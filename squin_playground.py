from kirin import ir, types, passes
from bloqade import squin
from kirin.ir import dialect_group
from kirin.prelude import basic
from kirin.dialects import py, func, ilist

# from bloqade.analysis import address


@dialect_group(basic.add(squin.wire).add(squin.op).add(squin.qubit).add(ilist))
def squin_dialect(self):
    # Const prop analysis runs first, then fold pass takes
    # ConstantFold puts in the type hints! Need that for the
    # get_constant_value method in the address analysis pass
    fold_pass = passes.Fold(self)
    typeinfer_pass = passes.TypeInfer(self)

    def run_pass(
        method: ir.Method,
        *,
        fold: bool = True,
    ):
        method.verify()
        # TODO make special Function rewrite

        if fold:
            fold_pass(method)

        typeinfer_pass(method)
        method.code.typecheck()

    return run_pass


"""
@squin_dialect
def squin_new_qubits():

    # create some new qubits
    qubits = squin.qubit.new(10)

    return qubits


frame, _ = address.AddressAnalysis(squin_new_qubits.dialects).run_analysis(squin_new_qubits)

print(frame)

for ssa_val, addr_type in frame.entries.items():
    print(f"SSA: {ssa_val}\n Addr: {addr_type}")"
"""


# Avoid using frontend, Roger brought up some problems

"""
Desired squin test program,
translate to statements by hand unfortunately

qreg = New(1)
q = q[0]

# Get the wire out
w = unwrap(q)
# Each op will give a new value
v1 = apply(op1, w)
v2 = apply(op2, v1)
v3 = apply(op3, v2)

return v3

"""


def as_int(value: int):
    return py.constant.Constant(value=value)


stmts = [
    # Create register
    (n_qubits := as_int(1)),
    (reg := squin.qubit.New(n_qubits=n_qubits.result)),  # access .result to get ilist
    # Get the single qubit
    ## How do you do this when ilist doesn't have a "Get" statement?
    # (idx := as_int(0)),
]

block = ir.Block(stmts)
block.args.append_from(types.MethodType[[], types.NoneType], "main_self")
func_wrapper = func.Function(
    sym_name="main",
    signature=func.Signature(inputs=(), output=types.NoneType),
    body=ir.Region(blocks=block),
)

constructed_method = ir.Method(
    mod=None,
    py_func=None,
    sym_name="main",
    dialects=squin_dialect,
    code=func_wrapper,
    arg_names=[],
)

constructed_method.print()

# Need to run a pass to extract the qubit from the
# Ilist generated by squin?


# Now we wrap to get the qubit back
## Can I just reuse the original qubit in the wrapping op?
## -> Yes! That's how it's done in Quake
# squin.wire.wrap(wire=w, qubit=q)
