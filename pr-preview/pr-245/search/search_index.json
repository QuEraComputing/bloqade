{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\: )\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"the Software Development Kit for neutral atom quantum computers <p>Bloqade is QuEra Computing's software development kit (SDK) for neutral atom quantum computers. It is designed to be a hub of embedded domain-specific languages (eDSLs) for neutral atom quantum computing. Bloqade is built on top of Kirin, the Kernel Intermediate Representation Infrastructure.</p> <p>Warning</p> <p>Bloqade is currently in the early stages of development. The APIs and features are subject to change. While we do not promise stability and backward compatibility at the moment, we will try to minimize breaking changes as much as possible. If you are concerned about the stability of the APIs, consider pin the version of Bloqade in your project.</p> <p>Info</p> <p>The old version (&lt;= 0.15) of Bloqade is still available as a sub-package <code>bloqade-analog</code>. You can keep using it via <code>bloqade.analog</code> module. For example <code>from bloqade import start</code> becomes <code>from bloqade.analog import start</code>. See Installation for more information.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install Bloqade, you can use the following command:</p> <pre><code>pip install bloqade\n</code></pre> <p>To install the extensions or extras for Bloqade and to setup the development environment, please refer to the installation guide.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Bloqade, you can refer to the following tutorials:</p> <ul> <li>Background: Background information on neutral atom quantum computing.</li> <li>Digital quick start: A quick start guide for QASM2 and its extensions.</li> <li>Analog quick start: A quick start guide for the analog quantum computing eDSL (same as older <code>bloqade</code> versions).</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to Bloqade. Please refer to the contribution guide for more information.</p>"},{"location":"#license","title":"License","text":"<p>Bloqade is licensed under the Apache License 2.0.</p>"},{"location":"background/","title":"Background","text":""},{"location":"background/#neutral-atom-qubits","title":"Neutral Atom Qubits","text":"<p>A key feature of a quantum computer is the ability to physically represent qubits. In neutral atom computers, the qubit is represented in the electronic state of the valence electron of Rubdidium 87. Arrays of individual atoms are held by laser tweezers, and quantum computations are executed by manipulating the electronic state of each atom using lasers and RF fields. Entanglement can be generated using the Rydberg state, which is a highly excited state that strongly interacts with adjacent atoms through a \\(R^{-6}\\) power law Van der Waals force.</p>"},{"location":"background/#analog-mode-quantum-computing","title":"Analog mode Quantum Computing","text":"<p>There are two modes of quantum computation that neutral atoms are capable of: Analog and Digital. In analog mode, the qubit is represented as in a ground state and a Rydberg state of an atom. The atoms are placed in user-specified arbitrary positions in a 2d space, and quantum computations can be enacted by driving the atoms between the ground and Rydberg state. However, adjacent atoms in the Rydberg state are always interacting, so the computation is done through a time evolution of the atoms via the Schrodinger equation</p> \\[ i \\hbar \\dfrac{\\partial}{\\partial t} | \\psi \\rangle = \\hat{\\mathcal{H}}(t) | \\psi \\rangle,  \\\\ \\] <p>Were \\(H\\) is a time-dependent \"Rydberg atom\" Hamiltonian.</p> \\[ \\frac{\\mathcal{H}(t)}{\\hbar} = \\sum_j \\frac{\\Omega_j(t)}{2} \\left( e^{i \\phi_j(t) } | g_j \\rangle  \\langle r_j | + e^{-i \\phi_j(t) } | r_j \\rangle  \\langle g_j | \\right) - \\sum_j \\Delta_j(t) \\hat{n}_j + \\sum_{j &lt; k} V_{jk} \\hat{n}_j \\hat{n}_k, \\] <p>where: \\(\\Omega_j\\), \\(\\phi_j\\), and \\(\\Delta_j\\) denote the Rabi frequency amplitude, laser phase, and the detuning of the driving laser field on atom (qubit) \\(j\\) coupling the two states  \\(| g_j \\rangle\\) (ground state) and \\(| r_j \\rangle\\) (Rydberg state); \\(\\hat{n}_j = |r_j\\rangle \\langle r_j|\\) is the number operator, and \\(V_{jk} = C_6/|\\mathbf{x}_j - \\mathbf{x}_k|^6\\) describes the Rydberg interaction (van der Waals interaction) between atoms \\(j\\) and \\(k\\) where \\(\\mathbf{x}_j\\) denotes the position of the atom \\(j\\); \\(C_6\\) is the Rydberg interaction constant that depends on the particular Rydberg state used. For Bloqade, the default \\(C_6 = 862690 \\times 2\\pi \\text{ MHz \u03bcm}^6\\) for \\(|r \\rangle = \\lvert 70S_{1/2} \\rangle\\) of the \\(^{87}\\)Rb atoms; \\(\\hbar\\) is the reduced Planck's constant.</p> <p>For a more nuanced read about the neutral atoms that Bloqade and Aquila use, refer to QuEra's qBook section on Qubits by puffing up atoms.</p> <p>You can find a brief explanation of the distinction below but for a more in-depth explanation you can refer to QuEra's qBook section on Analog vs Digital Quantum Computing. For more details on QuEra's cloud-accessible analog mode computer Aquila, please check out the Aquila whitepaper.</p>"},{"location":"background/#digital-mode","title":"Digital Mode","text":"<p>In the Digital Mode individual or multiple groups of qubits are controlled by applying gates (individual unitary operations). The digital mode qubit is represented in the two hyperfine clock ground states of the Rubidium 87 atom. These two states are extremely weakly interactive with the environment and other adjacent atoms, which leads to a very long coherence time upwards of 1 second. Single-qubit gates can be executed through a Raman laser drive coupling the two states to enact arbitrary rotations.</p> <p>Unlike Analog mode where the Rydberg state is persistent as part of the qubit encoding into the electronic states, digital mode only temporarily excites the atoms to the Rydberg state in order to interact with adjacent qubits, a process which typically takes less than ~1usec. Thus, a neutral atom entangling gate is executed by bringing multiple atoms together within the Rydberg blockade radius, and then doing some time-dependent drive between the hyperfine ground states and the Rydberg state, so that the final state returns to the hyperfine ground states. Due to the Rydberg blockade, only one atom can be in the Rydberg state at a time, which creates entanglement between the atoms. For more details see this paper on a recent demonstration of high fidelity gates.</p> <p>A unique advantage of reconfigurable neutral atom architectures is parallelism: the same laser can effect many lasers by aiming it in the same plane as the atom array. A single global Raman laser can enact the same parallel single-qubit gate on all qubits at the same time, and a single Rydberg laser (technically, two counter-propagating) can enact the same parallel multi-qubit gate on all cliques of qubits in an entangling region of the array. For more details see this paper on a recent demonstration of reconfigurable architectures. For this reason, it is important to represent quantum executions and circuits to be as parallel as possible. In our qasm2 dialect, we have extended qasm to natively include parallelism-- for example, <code>qasm2.parallel.cx(controls, targets)</code> represents a parallel CNOT gate between a list of <code>controls</code> on a list of <code>targets</code>.</p>"},{"location":"background/#reconfigurable-architectures-and-all-to-all-connectivity","title":"Reconfigurable architectures and \"all to all\" connectivity","text":"<p>A second advantage of reconfigurable neutral atom architectures is reconfigurability: atoms can be moved in parallel between sites in the array. QuEra's devices will have a zoned architecture, with distinct storage and entanglement zones and the ability to move atoms between them using a set of dynamic crossed AOD laser tweezers. This mobility can be considered as an efficient parallel swap gate, where any qubit can easily be moved to be adjacent to any other to enact entangling gates. For this reason, reconfigurable neutral atoms do not have a \"connectivity graph\" in the traditional sense-- instead, they have an \"all-to-all\" connectivity. There are still some technical constraints on this connectivity due to restrictions on the crossed AOD which we will detail when we open-source a move level dialect set in the near future.</p>"},{"location":"contrib/","title":"Contributing","text":"<p>Please see Installation for instructions on how to set up your development environment.</p>"},{"location":"contrib/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We use <code>pre-commit</code> to run the linter checks before you commit your changes. The pre-commit hooks are installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre> <p>This will run the linter checks before you commit your changes. If the checks fail, the commit will be rejected. Most of the following sections can be checked by the pre-commit hooks.</p>"},{"location":"contrib/#running-the-tests","title":"Running the tests","text":"<p>We use <code>pytest</code> for testing. To run the tests, simply run:</p> <pre><code>pytest\n</code></pre> <p>or for a specific test file with the <code>-s</code> flag to show the output of the program:</p> <pre><code>pytest -s tests/test_program.py\n</code></pre> <p>lots of tests contains pretty printing of the IR themselves, so it's useful to see the output.</p>"},{"location":"contrib/#code-style","title":"Code style","text":"<p>We use <code>black</code> for code formatting. Besides the linter requirements, we also require the following good-to-have practices:</p>"},{"location":"contrib/#naming","title":"Naming","text":"<ul> <li>try not to use abbreviation as names, unless it's a common abbreviation like <code>idx</code> for <code>index</code></li> <li>try not create a lot of duplicated name prefix unless the extra information is necessary when accessing the class object.</li> <li>try to use <code>snake_case</code> for naming variables and functions, and <code>CamelCase</code> for classes.</li> </ul>"},{"location":"contrib/#comments","title":"Comments","text":"<ul> <li>try not to write comments, unless it's really necessary. The code should be self-explanatory.</li> <li>if you have to write comments, try to use <code>NOTE:</code>, <code>TODO:</code> <code>FIXME:</code> tags to make it easier to search for them.</li> </ul>"},{"location":"contrib/#documentation","title":"Documentation","text":"<p>We use <code>just</code> for mangaging command line tools and scripts. It should be installed when you run <code>uv sync</code>. To build the documentation, simply run:</p> <pre><code>just doc\n</code></pre> <p>This will launch a local server to preview the documentation. You can also run <code>just doc-build</code> to build the documentation without launching the server.</p>"},{"location":"contrib/#license","title":"License","text":"<p>By contributing to this project, you agree to license your contributions under the Apache License 2.0 with LLVM Exceptions.</p>"},{"location":"install/","title":"Installation","text":"<p>Bloqade is available in PyPI and thus can be installed via <code>pip</code>. Install Bloqade using the following command:</p> <pre><code>pip install bloqade\n</code></pre> <p>Bloqade support python 3.10+.</p> <p>We strongly recommend developing your compiler project using <code>uv</code>, which is the official development environment for Bloqade. You can install <code>uv</code> using the following command:</p> Linux and macOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>then</p> <pre><code>uv add kirin-toolchain\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>then</p> <pre><code>uv add kirin-toolchain\n</code></pre>"},{"location":"install/#bloqade-and-its-friends","title":"Bloqade and its friends","text":"<p>Bloqade is a Python namespace package, we officially provide several sub-packages, each of which is an eDSL for neutral atom quantum computing. The following is a list of the sub-packages in Bloqade:</p>"},{"location":"install/#bloqadeqasm2","title":"<code>bloqade.qasm2</code>","text":"<p>QASM2 and its extensions support for neutral atom quantum computing. Available via:</p> <pre><code>pip install bloqade[qasm2]\n</code></pre>"},{"location":"install/#bloqadeanalog","title":"<code>bloqade.analog</code>","text":"<p>Analog quantum computing eDSL for neutral atom quantum computing (previously <code>bloqade-python</code>). Available via:</p> <pre><code>pip install bloqade-analog\n</code></pre>"},{"location":"install/#bloqadepyqrack","title":"<code>bloqade.pyqrack</code>","text":"<p>Support of the PyQrack simulator as a runtime backend for QASM2 and extensions.</p> <pre><code>pip install bloqade-pyqrack\n</code></pre>"},{"location":"install/#bloqadeqbraid","title":"<code>bloqade.qbraid</code>","text":"<p>Support of the qBraid cloud service as a runtime backend for retrieving noise models and running circuits.</p> <pre><code>pip install bloqade[qbraid]\n</code></pre>"},{"location":"install/#bloqadestim-experimental","title":"<code>bloqade.stim</code> (Experimental)","text":"<p>STIM and its extensions support for neutral atom quantum computing. Available via:</p> <pre><code>pip install bloqade[stim]\n</code></pre>"},{"location":"install/#development","title":"Development","text":"<p>If you want to contribute to Bloqade, you can clone the repository from GitHub:</p> <pre><code>git clone https://github.com/QuEraComputing/bloqade.git\n</code></pre> <p>We use <code>uv</code> to manage the development environment, after you install <code>uv</code>, you can install the development dependencies using the following command:</p> <pre><code>uv sync\n</code></pre> <p>Our code review requires that you pass the tests and the linting checks. We recommend you to install <code>pre-commit</code> to run the checks before you commit your changes, the command line tool <code>pre-commit</code> has been installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"manifesto/","title":"Bloqade Manifesto","text":"<p>The vision of Bloqade is to empower quantum scientists, from applications development to algorithmic co-design, to build hybrid quantum-classical programs that leverage the strength of neutral atom quantum computers and have a real chance of demonstrating quantum utility. Bloqade is built on top of Kirin, an open source compiler infrastructure designed for kernel functions and composable representations.</p>"},{"location":"manifesto/#composable-quantum-programming","title":"Composable quantum programming","text":"<p>Today Bloqade becomes a namespace package of multiple eDSLs (embedded domain-specific languages) around digital and analog quantum computation. <code>bloqade.analog</code> is the module for analog-mode neutral atom computers and includes several handy utilities ranging from building or analyzing analog programs, to emulation or executing on QuEra's cloud-accessible hardware \"Aquila\".</p> <p>Other submodules such as <code>bloqade.qasm2</code>, <code>bloqade.pyqrack</code> and <code>bloqade.stim</code> are the initial iteration to represent digital circuit execution using gate-based quantum computing on reconfigurable neutral atoms. It extends the QASM2 language to include extra annotation of circuits that is important for efficient execution, such as parallelism and global gates. As well as being able to construct quantum programs with the full convenience of typical classical programming within hardware kernels -- such as loops and control flow -- Bloqade also includes basic compiler transformation passes, emulation, and code generation.</p> <p>But Bloqade is not done with just these modules. We envision adding new modules (called \"dialects\") which help you write programs which are tuned for optimal performance in an error corrected era, and on neutral atom hardware. Stay tuned and help us build the future of quantum computing as we build out new components, such as QEC and atom moving dialects.</p>"},{"location":"manifesto/#hardware-oriented-programming-and-co-design","title":"Hardware-oriented programming and co-design","text":"<p>At its core, Bloqade strives to be the neutral atom SDK for getting the most out of today's and tomorrows' quantum hardware. It is clear that the circuit-level abstraction is not enough to program real quantum hardware; indeed, tomorrows' quantum demonstrations and applications must program at the hardware level and develop special tooling to compile higher-level abstractions to efficient implementations. We call this process \"co-design\": designing algorithms specialized to near-term hardware, with an eye on nontrivial demonstrations and scalable solutions. Ultimately, this co-design approach requires hardware-specific DSLs which explicitly represent the native executions on neutral atom hardware: in other words, Bloqade.</p>"},{"location":"manifesto/#hybrid-computing-beyond-circuits","title":"Hybrid computing beyond circuits","text":"<p>Many quantum algorithms are hybrid, requiring both classical and quantum resources to work together in a hybrid computation architecture. This could be anything from syndrome extraction and measurement-based computing to variational parameter updates in VQE methods and orbital fragmentation methods in molecular simulation. Through the use of the Kirin compiler infrastructure, Bloqade embraces this philosophy of heterogeneous compute. Kirin programs are written as (compositions of) kernels-- subroutines that are intended to run on particular hardware (such as QPUs), or orchestrated to run on heterogeneous compute (such as a real-time classical runtime plus a QPU). These subroutines-- plus the built-in hybrid representations-- enable many key primitives, such as error correction.</p> <p>Additionally, the ability to compose functions together and to use typical classical programming structures like <code>if</code> and recursion enables many simplifications in writing raw circuit executions. In fact, recursion and the ability to dynamically allocate new memory (which is not known until runtime) enables many powerful subroutines and is natively enabled with Bloqade's kernel-based representation; for example, see this implementation of a repeat-until-success program.</p>"},{"location":"manifesto/#analog-digital-logical-towards-real-quantum-utility","title":"Analog, digital, logical: towards real quantum utility","text":"<p>The first step in Bloqade was building out the analog mode SDK, designed to interface with QuEra\u2019s cloud-accessible analog-mode neutral-atom quantum computer Aquila, as well as enable analysis and scientific discovery in analog quantum computing. But the journey should not stop there: real quantum utility is error corrected and requires robust algorithmic exploration and design of quantum primitives, in-depth analysis of near-term hardware performance and benchmarking, and building pipelines and hybrid architectures that are intended not just for today\u2019s demonstrators but also for tomorrow\u2019s utility-scale hardware. By introducing the next generation of Bloqade, we hope to enable this exploration by adding in support for near-term digital and intermediate-term logical representations of hybrid quantum computations.</p>"},{"location":"manifesto/#join-us","title":"Join us!","text":"<p>If you are interested in contributing, please see the contribution page here. If you are interested in exploring more about neutral atom quantum computing, check out some analog tutorials here, and some circuit tutorials here. If you wish to work closer with QuEra, please feel free to reach out!</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/","title":"Introducing Bloqade SDK for Python","text":"<p>Greetings Neutral Atom QC experts, enthusiasts, and newcomers!</p> <p>We are excited to the Rydberg state thrilled to announce the Python version of our cutting-edge SDK, Bloqade. Originally developed in Julia, Bloqade has been a game-changer in the realm of Neutral Atom quantum computing. With the introduction of the Python version, we aim to make this revolutionary technology more accessible and user-friendly than ever before.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#why-python","title":"Why Python?","text":"<p>Python is one of the most widely used programming languages, especially in the quantum computing community and broader scientific communities. By extending Bloqade to Python, we are opening doors to a broader audience, enabling more developers, researchers, and organizations to harness the power of Neutral Atom quantum computing.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#neutral-atom-quantum-computing","title":"Neutral Atom Quantum Computing","text":"<p>Recently, the Neutral Atom platform has come on the QC scene in the form of Analog Hamiltonian Simulators that have a broad set of use cases beyond quantum circuits. Ranging from simulating unique quantum phases of matter, solving combinatorial optimization problems, and machine learning applications, the analog mode provides strong values in solving practical, interesting problems in the near term.</p> <p>These advances are crucial milestones on the way towards scalable digital gate-based architecture using atom shuttling. This new technology and its novel applications demand a paradigm shift in the way we not only think about quantum computing, but translate those ideas to real hardware. Enter Bloqade, a next-generation SDK designed to put the power of neutral atoms at your fingertips.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#why-bloqade","title":"Why Bloqade?","text":"<p>Bloqade is designed with the primary goal of making it easier to compose programs for QuEra\u2019s hardware and analyze results.</p> <p>We've gained valuable insights into how users have used our neutral-atom hardware and with it, their struggles with existing tools. We took advantage of this knowledge to produce a tool that could take the \"hard\" out of \"hardware\". Bloqade is precision-balanced in both flexibility to empower novices to experiment with ease and power to let experts perform cutting-edge work without breaking a sweat.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#highlights","title":"Highlights","text":""},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#smart-documentation","title":"Smart Documentation","text":"<p>With our commitment to enabling more seamless program development, we've put the relevant documentation you need right where and when you need it.</p> <p>No more obnoxious switching between your favorite coding environment and documentation in a separate window. Let Bloqade guide you where you'd like to go:</p> <p></p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#fully-parameterized-analog-programs","title":"Fully Parameterized Analog Programs","text":"<p>Parameter sweeps are a common theme of programs for analog quantum computers, where a user would like to observe differences in output results by varying a value or values in their program.</p> <p>You used to have to manually crank out variations of your program with different values and then keep track of all the individual submissions to the emulator and hardware, a mess to keep track of and process the results of afterwards.</p> <p>Bloqade eliminates this with its own support for variables that can later be assigned single values or a whole sequence of values for trivial parameter sweeping. This isn't some feature that's constrained to a certain backend, you can take your program with all its variables and submit it to your choice of emulator or our hardware directly.</p> <pre><code>from bloqade import var\nfrom bloqade.atom_arrangement import Square\n\nimport numpy as np\n\nadiabatic_durations = [0.4, 3.2, 0.4]\n\n# create variables explicitly...\nmax_detuning = var(\"max_detuning\")\n# ...or implicitly inside the program definition.\nadiabatic_program = (\n    Square(3, \"lattice_spacing\")\n    .rydberg.rabi.amplitude.uniform.piecewise_linear(\n        durations=adiabatic_durations, values=[0.0, \"max_rabi\", \"max_rabi\", 0.0]\n    )\n    .detuning.uniform.piecewise_linear(\n        durations=adiabatic_durations,\n        values=[\n            -max_detuning, # scalar variables support direct arithmetic operations\n            -max_detuning,\n            max_detuning,\n            max_detuning,\n        ],\n    )\n    .assign(max_rabi=15.8, max_detuning=16.33)\n    .batch_assign(lattice_spacing=np.arrange(4.0, 7.0, 0.5))\n)\n\n# Launch your program on your choice of Braket or in-house emulator...\nemu_results = adiabatic_program.braket.local_emulator().run(10000)\nfaster_emu_results = adiabatic_program.bloqade.python().run(10000)\n# ...as well as hardware without stress\nhw_results = adiabatic_program.parallelize(24).braket.aquila().run_async(100)\n</code></pre>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#integrated-visualization-tools","title":"Integrated Visualization Tools","text":"<p>Instantly understand what your programs are doing faster than you can say \"neutral atoms rock!\" with Bloqade's built-in visualization tools:</p> <p></p> <p></p> <p>For your results, no more obnoxious manual compilation of results across different parameters or wrangling them into more useful forms. Get insights of experiment outcomes in the blink of an eye:</p> <p></p> <p></p> <p>Now that's what we call having your cake AND eating it.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#bloqade-roadmap","title":"Bloqade Roadmap","text":""},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#bloqade-alpha-phase","title":"Bloqade Alpha Phase","text":"<p>During the next year, we plan on continuing development of Bloqade's python interface. If you are as excited about Neutral Atom quantum computing as us, or heck, even just quantum physics in general, give Bloqade a try! This is your opportunity to influence the direction of Bloqade and get in on the ground floor of the next Quantum Computing revolution.</p>"},{"location":"blog/2023/12/15/introducing-bloqade-sdk-for-python/#but-what-about-julia","title":"But what about Julia?","text":"<p>Don't you guys already HAVE an SDK in Julia? Why do you need two SDKs?</p> <p>That's right! However, there's a key motivating factor for the reason we created Bloqade Python that's distinct for Bloqade.jl's existence.</p> <p>Bloqade.jl is primarily geared as a high-performance emulator. It allows you to design complex neutral-atom algorithms that may not necessarily run on our hardware BUT are excellent if you're exploring novel physical phenonema/algorithms or as a tool for pedagogical purposes.</p> <p>Bloqade.jl does have the ability to submit to Aquila, our flagship quantum computer, but for more complex tasks such as sweeping parameters (e.g. running the same program on hardware with slightly different parameters each time) or advanced post-processing, it becomes cumbersome quite quickly.</p> <p>There are no plans to drop support any time soon though. On the contrary, we plan on fully integrating Bloqade.jl into the Python package, which will enable you to program Neutral Atom quantum hardware without having to choose.</p> <p>We very much look forward to you trying out Bloqade!</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/","title":"A new journey for Bloqade","text":"<p>In 2023 we were excited to introduce Bloqade, a python SDK for programming and interfacing with analog mode neutral atom hardware based off feedback from our community as well as a need to make conducting experiments on our hardware easier. Today, we introduce the next generation of Bloqade: as well as programming analog-mode computation, our new bloqade module enables programming gate-based computation, with an eye on near-term NISQ demonstrations and intermediate-term fault tolerant solutions. Don\u2019t worry; all of your favorite features of the previous generation of Bloqade are still there under the <code>bloqade.analog</code> namespace, but now you can explore digital-mode computation specialized to reconfigurable neutral atom architectures. Why have we built this new module? There are plenty of incredible quantum programming packages, such as Qiskit and Cirq, as well as an entire ecosystem of middleware providers with specialized pipelines to turn abstract problems into circuits. However, these packages may not be everything that is needed for efficient hardware execution on neutral atom hardware: a circuits-only representation of quantum executions may be an insufficient abstraction for effective hardware-level programs. This is a challenge: we want to enable everyone to maximally leverage the power of neutral atom quantum computers beyond abstract circuit representations. For this reason, we are building Bloqade to be a hardware-oriented SDK to represent hybrid executions on reconfigurable neutral atom hardware. In this way, Bloqade can be integrated into the larger ecosystem\u2014for example, code generation of QASM from a Bloqade program, but be an SDK specialized to our hardware: THE SDK for neutral atoms.</p> <p>The vision of Bloqade is to empower quantum scientists, working on things ranging from applications development to algorithmic co-design, to build hybrid quantum-classical programs that leverage the strength of neutral atom quantum computers and have a real chance of demonstrating quantum utility. Bloqade is built on top of Kirin, an open source compiler infrastructure designed for kernel functions and embedded Domain-Specific Language (eDSL) creation.</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/#composable-quantum-programming","title":"Composable quantum programming","text":"<p>As of today, Bloqade has two objectives: digital and analog quantum computing. <code>bloqade-analog</code> is the SDK for analog-mode neutral atom computers and includes several handy utilities ranging from building and analyzing analog programs, to emulation and execution on QuEra's cloud-accessible hardware \"Aquila\". <code>bloqade</code> is the initial iteration to represent digital circuit execution using gate-based quantum computing on reconfigurable neutral atom architecture. It extends the QASM2 language to include extra annotation of circuits that is important for efficient execution, such as parallelism and global gates. As well as being able to construct quantum programs with the full convenience of features found in classical programming languages - such as loops, control flows and closures - <code>bloqade</code> also includes basic compiler transformation passes, emulation, and code generation.</p> <p>But <code>bloqade</code> is not done with just these two components. We envision adding new components (called \"dialects\") which help you write programs which are tuned for optimal performance in an error corrected era of neutral atom hardware. Stay tuned and help us build the future of quantum computing as we build out new components targeting QEC and atom moving!</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/#hardware-oriented-programming-and-co-design","title":"Hardware-oriented programming and co-design","text":"<p>At its core, Bloqade strives to be the neutral atom SDK for getting the most out of today's and tomorrows' quantum hardware. It is clear that the circuit-level abstraction is not enough to program real quantum hardware; indeed, tomorrows' quantum demonstrations and applications must program at the hardware level and develop special tooling to compile higher-level abstractions to efficient implementations. We call this process \"co-design\": designing algorithms specialized to near-term hardware, with an eye on nontrivial demonstrations and scalable solutions. Ultimately, this co-design approach requires hardware-specific DSLs which explicitly represent the native executions on neutral atom hardware: in other words, Bloqade.</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/#hybrid-computing-beyond-circuits","title":"Hybrid computing beyond circuits","text":"<p>Many quantum algorithms are hybrid, requiring both classical and quantum resources to work together in tandem. This could be anything from syndrome extraction and measurement-based computing to variational parameter updates in VQE methods and orbital fragmentation methods in molecular simulation. Through the use of the Kirin compiler infrastructure, Bloqade embraces this philosophy of heterogeneous compute. Kirin programs are written as (compositions of) kernels -- subroutines that are intended to run on particular hardware (such as QPUs), or orchestrated to run on heterogeneous compute (such as a real-time classical runtime plus a QPU). These subroutines -- plus the built-in hybrid representations-- enable many key primitives, such as error correction.</p> <p>Additionally, the ability to compose functions together and to use typical classical programming structures like <code>if</code> and recursions enables many simplifications in writing complex circuits. In fact, recursions and the ability to dynamically allocate new memory (which is not known until runtime) enables many powerful subroutines and is natively enabled with Bloqade's kernel-based representation; for example, see this implementation of a repeat-until-success program.</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/#analog-digital-logical-towards-real-quantum-utility","title":"Analog, digital, logical: towards real quantum utility","text":"<p>The first step in Bloqade's journey was building out the analog mode SDK, designed to interface with QuEra\u2019s cloud-accessible analog-mode neutral-atom quantum computer Aquila, as well as enable analysis and scientific discovery in analog quantum computing. But the journey should not stop there: real quantum utility is error corrected and requires robust algorithmic exploration and design of quantum primitives, in-depth analysis of near-term hardware performance and benchmarking, and building pipelines and hybrid architectures that are intended not just for today\u2019s demonstrations but also for tomorrow\u2019s utility-scale hardware. By introducing the next generation of Bloqade, we hope to enable this exploration by adding in support for near-term digital and intermediate-term logical representations of hybrid quantum computations.</p>"},{"location":"blog/2025/03/01/a-new-journey-for-bloqade/#learn-more","title":"Learn more","text":"<p>Bloqade is an open-source project and can be freely downloaded and modified; you can learn how to do so here. If you want to see how to write programs with of the new <code>bloqade</code> package, check out our examples here. If you would like to learn more about QuEra Computing Inc., check out our webpage as well as discover our many academic publications and demonstrations.</p>"},{"location":"digital/","title":"Index","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"digital/#digital-bloqade","title":"Digital Bloqade","text":"<p>This page provides some information on digital circuits, their simulation and a collection of quick examples to help you get started with Digital Bloqade. Each example is a self-contained page that demonstrates a specific feature or use case. You can copy and paste the code snippets into your own project and modify them as needed.</p> <p>You can also find the corresponding scripts in jupytext format at the bloqade repository under <code>docs/digital/examples/</code>.</p>"},{"location":"digital/dialects_and_kernels/","title":"Dialects and kernels","text":"<p>Info</p> <p>A kernel function is a piece of code that runs on specialized hardware such as a quantum computer.</p> <p>A dialect is a domain-specific language (DSL) with which you can write such a kernel. Each dialect comes with a specific set of statements and instructions you can use in order to write your program.</p> <p>Bloqade provides a set of pre-defined dialects, with which you can write your programs and circuits.</p> <p>Once you have your kernel, you can inspect their intermediate representation (IR), apply different optimizations using compiler passes, or run them on a (simulator) device.</p>"},{"location":"digital/dialects_and_kernels/#available-dialects","title":"Available dialects","text":"<p>Here's a quick overview of the most important available dialects.</p>"},{"location":"digital/dialects_and_kernels/#qasm2","title":"qasm2","text":"<p>There are a number of dialects with which you can write kernels that represent QASM2 programs. See also the qasm2 API reference</p>"},{"location":"digital/dialects_and_kernels/#qasm2main","title":"qasm2.main","text":"<p>This dialect allows you to write native QASM2 programs. As such, it includes definitions gates, measurements and quantum and classical registers, which are part of the QASM2 specification. For details on the language, see the specification.</p> <p>Here's an example kernel</p> <pre><code>from bloqade import qasm2\n\n@qasm2.main\ndef main():\n    q = qasm2.qreg(2)\n    qasm2.h(q[0])\n    qasm2.cx(q[0], q[1])\n\n    c = qasm2.creg(2)\n    qasm2.measure(q, c)\n    return c\n</code></pre> <p>Here's how you can look at the QASM2 program this kernel represents:</p> <pre><code>from bloqade.qasm2.emit import QASM2\nfrom bloqade.qasm2.parse import pprint\n\n\ntarget = QASM2()\nqasm2_program = target.emit(main)\npprint(qasm2_program)\n</code></pre>"},{"location":"digital/dialects_and_kernels/#qasm2extended","title":"qasm2.extended","text":"<p>This dialect can also be used to write QASM2 programs. However, it adds a couple of statements that makes it easier to write programs. For example, QASM2 does not support for-loops. With <code>qasm2.extended</code>, however, you can use for-loops and can let the compiler worry about unrolling these loops such that valid QASM2 code is produced.</p> <pre><code>from bloqade import qasm2\n\n@qasm2.extended\ndef main():\n    n = 2\n    q = qasm2.qreg(n)\n\n    for i in range(n):\n        qasm2.h(q[i])\n\n    qasm2.cx(q[0], q[1])\n    c = qasm2.creg(n)\n    qasm2.measure(q, c)\n    return c\n</code></pre> <p>If you run this through the code emission as shown above, you'll see that the for-loop gets unrolled into separate hadamard gate applications for each qubit. At the same time, if you try to define this kernel using the <code>qasm2.main</code> dialect only, you will receive a <code>BuildError</code> telling you to take that crazy for-loop out of there as it's not supported.</p>"},{"location":"digital/dialects_and_kernels/#noisenative","title":"noise.native","text":"<p>Using this dialect, you can represent different noise processes in your kernel. As of now, there are essentially two different noise channels:</p> <ul> <li>A pauli noise channel, which can represent different types of decoherence.</li> <li>An atomic loss channel, which can be used to model effects of losing a qubit during the execution of a program.</li> </ul> <p>Usually, you don't want to write noise statements directly. Instead, use a NoisePass in order to inject noise statements automatically according to a specific noise model.</p> <p>Note</p> <p>Right now, only the <code>qasm2</code> dialects fully support noise.</p> <p>For example, you may want to do something like this:</p> <pre><code>from bloqade import qasm2\nfrom bloqade.noise import native\nfrom bloqade.qasm2.passes import NoisePass\n\n\n# Add the noise dialect to qasm2.extended\nnoise_dialect = qasm2.extended.add(native.dialect)\n\n@noise_dialect\ndef main():\n    n = 2\n    q = qasm2.qreg(n)\n\n    for i in range(n):\n        qasm2.h(q[i])\n\n    qasm2.cx(q[0], q[1])\n    c = qasm2.creg(n)\n    qasm2.measure(q, c)\n    return c\n\n# Define the noise pass you want to use\nnoise_pass = NoisePass(main.dialects)  # just use the default noise model for now\n\n# Inject the noise - note that the main method will be updated in-place\nnoise_pass.unsafe_run(main)\n\n# Look at the IR and all the glorious noise in there\nmain.print()\n</code></pre>"},{"location":"digital/dialects_and_kernels/#squin","title":"squin","text":"<p>This dialect is, in a sense, more expressive than the qasm2 dialects: it allows you to specify operators rather than just gate applications. That can be useful if you're trying to e.g. simulate a Hamiltonian time evolution.</p> <p>Warning</p> <p>The squin dialect is in an early stage of development. Expect substantial changes to it in the near future.</p> <p>Here's a short example:</p> <pre><code>from bloqade import squin\n\n@squin.kernel\ndef main():\n    q = squin.qubit.new(2)\n    h = squin.op.h()\n\n    # apply a hadamard to only the first qubit\n    h1 = squin.op.kron(h, squin.op.identity(sites=1))\n\n    squin.qubit.apply(h1, q)\n\n    cx = squin.op.cx()\n    squin.qubit.apply(cx, q)\n\n    return squin.qubit.measure(q)\n\n# have a look at the IR\nmain.print()\n</code></pre> <p>See also the squin API reference</p>"},{"location":"digital/dialects_and_kernels/#stim","title":"stim","text":"<p>Warning</p> <p>Sorry folks, still under construction.</p> <p>See also the stim API reference</p>"},{"location":"digital/examples/deutsch_squin/","title":"Deutsch-Jozsa Algorithm","text":"<p>We start by loading in some stuff and defining some parameters.</p> In\u00a0[\u00a0]: Copied! <pre>import random\nfrom typing import Any\n\nfrom bloqade.types import Qubit\nfrom kirin.dialects import ilist\nfrom bloqade.pyqrack import StackMemorySimulator\n\nfrom bloqade import squin\n\nn_bits = 2\n</pre> import random from typing import Any  from bloqade.types import Qubit from kirin.dialects import ilist from bloqade.pyqrack import StackMemorySimulator  from bloqade import squin  n_bits = 2 <p>Now, before we can implement the actual algorithm, we need to define the oracles, i.e. the functions we want to check for.</p> <p>The problem is defined as follows: Given a bit string of length $n$, $x \\in \\{0, 1\\}^\\otimes n$, we have a function that is either constant or balanced.</p> <p>A constant function is defined as $f_\\text{const}(x) = c \\forall x$, where $c \\in \\{0, 1\\}$ is some constant value.</p> <p>A balanced function, on the other hand, is defined by</p> <p>$f_\\text{balanced}(x) = \\begin{cases} 0 \\, \\forall x \\in S(x), \\\\ 1 \\text{ else,} \\end{cases}$</p> <p>where $S(x)$ is an arbitrarily chosen half of all possible bit strings, i.e. $|S(x)| = 2^{n-1}$.</p> <p>For our example, we will be using $n + 1$ qubits, where $n$ store the bitstring $x$ and the result is stored in the last qubit. We'll be writing our oracle functions as squin kernels, which we can then later use in the actual algorithm implementation.</p> <p>In order to define our oracle functions, we can simply choose for the constant function to always return $1$, which we achieve by flipping the final qubit using an $X$ gate.</p> In\u00a0[\u00a0]: Copied! <pre>@squin.kernel\ndef f_constant(q: ilist.IList[Qubit, Any]):\n    x = squin.op.x()\n\n    # flip the final (result) qubit -- every bit string is mapped to 1\n    squin.qubit.apply(x, [q[-1]])\n</pre> @squin.kernel def f_constant(q: ilist.IList[Qubit, Any]):     x = squin.op.x()      # flip the final (result) qubit -- every bit string is mapped to 1     squin.qubit.apply(x, [q[-1]]) <p>For the balanced oracle we use the following approach: we use the first qubit as control in a $CX$ gate, which is applied to the resulting qubit. This means that the result will be $1$ in exactly half the cases.</p> In\u00a0[\u00a0]: Copied! <pre>@squin.kernel\ndef f_balanced(q: ilist.IList[Qubit, Any]):\n    x = squin.op.x()\n    cn_x = squin.op.control(x, n_controls=1)\n    squin.qubit.apply(cn_x, [q[0], q[-1]])\n</pre> @squin.kernel def f_balanced(q: ilist.IList[Qubit, Any]):     x = squin.op.x()     cn_x = squin.op.control(x, n_controls=1)     squin.qubit.apply(cn_x, [q[0], q[-1]]) <p>Now, we define the actual algorithm as a kernel, which simply takes one of the other kernels as input. In the end, we can infer which function was provided by looking at the resulting measurement of the result qubit.</p> In\u00a0[\u00a0]: Copied! <pre>@squin.kernel\ndef deutsch_algorithm(f):\n    q = squin.qubit.new(n_qubits=n_bits + 1)\n\n    x = squin.op.x()\n    squin.qubit.apply(x, [q[-1]])\n\n    h = squin.op.h()\n    for i in range(len(q)):\n        squin.qubit.apply(h, [q[i]])\n\n    # apply the oracle function\n    f(q)\n\n    for i in range(n_bits):\n        squin.qubit.apply(h, [q[i]])\n\n    return squin.qubit.measure(q[:-1])\n</pre> @squin.kernel def deutsch_algorithm(f):     q = squin.qubit.new(n_qubits=n_bits + 1)      x = squin.op.x()     squin.qubit.apply(x, [q[-1]])      h = squin.op.h()     for i in range(len(q)):         squin.qubit.apply(h, [q[i]])      # apply the oracle function     f(q)      for i in range(n_bits):         squin.qubit.apply(h, [q[i]])      return squin.qubit.measure(q[:-1]) <p>Finally, we actually run the result. To do so, we use the <code>PyQrack</code> simulation backend in bloqade.</p> <p>To make things a bit more interesting, we randomly select which function we are running the algorithm with.</p> In\u00a0[\u00a0]: Copied! <pre>sim = StackMemorySimulator(min_qubits=n_bits + 1)\n\nf_choice_idx = random.randint(0, 1)\nf_choice = (f_constant, f_balanced)[f_choice_idx]\n\n# result = sim.run(deutsch_algorithm, args=(f_balanced, n))\nresult0 = 0.0\nn_shots = 100\nfor _ in range(n_shots):\n    res = sim.run(deutsch_algorithm, args=(f_choice,))\n    result0 += res[0] / n_shots\n\nprint(\n    \"Oh magic Deutsch-Jozsa algorithm, tell us if our function is constant or balanced:\"\n)\nprint(\"*drumroll*\")\nif result0 == 0:\n    print(\"It's constant!\")\n\n    # let's make sure we actually did the right thing here\n    assert f_choice_idx == 0\nelse:\n    print(\"It's balanced!\")\n\n    # let's make sure we actually did the right thing here\n    assert f_choice_idx == 1\n</pre> sim = StackMemorySimulator(min_qubits=n_bits + 1)  f_choice_idx = random.randint(0, 1) f_choice = (f_constant, f_balanced)[f_choice_idx]  # result = sim.run(deutsch_algorithm, args=(f_balanced, n)) result0 = 0.0 n_shots = 100 for _ in range(n_shots):     res = sim.run(deutsch_algorithm, args=(f_choice,))     result0 += res[0] / n_shots  print(     \"Oh magic Deutsch-Jozsa algorithm, tell us if our function is constant or balanced:\" ) print(\"*drumroll*\") if result0 == 0:     print(\"It's constant!\")      # let's make sure we actually did the right thing here     assert f_choice_idx == 0 else:     print(\"It's balanced!\")      # let's make sure we actually did the right thing here     assert f_choice_idx == 1"},{"location":"digital/examples/deutsch_squin/#deutsch-jozsa-algorithm","title":"Deutsch-Jozsa Algorithm\u00b6","text":"<p>In this example, we will implement a version of the Deutsch-Josza algorithm using bloqade's squin dialect.</p>"},{"location":"digital/examples/ghz/","title":"GHZ State Preparation with Parallelism","text":"In\u00a0[\u00a0]: Copied! <pre>import math\n\nfrom bloqade import qasm2\nfrom kirin.dialects import ilist\n</pre> import math  from bloqade import qasm2 from kirin.dialects import ilist In\u00a0[\u00a0]: Copied! <pre>def ghz_linear(n: int):\n    n_qubits = int(2**n)\n\n    @qasm2.extended\n    def ghz_linear_program():\n\n        qreg = qasm2.qreg(n_qubits)\n        # Apply a Hadamard on the first qubit\n        qasm2.h(qreg[0])\n        # Create a cascading sequence of CX gates\n        # necessary for quantum computers that\n        # only have nearest-neighbor connectivity between qubits\n        for i in range(1, n_qubits):\n            qasm2.cx(qreg[i - 1], qreg[i])\n\n    return ghz_linear_program\n</pre> def ghz_linear(n: int):     n_qubits = int(2**n)      @qasm2.extended     def ghz_linear_program():          qreg = qasm2.qreg(n_qubits)         # Apply a Hadamard on the first qubit         qasm2.h(qreg[0])         # Create a cascading sequence of CX gates         # necessary for quantum computers that         # only have nearest-neighbor connectivity between qubits         for i in range(1, n_qubits):             qasm2.cx(qreg[i - 1], qreg[i])      return ghz_linear_program <p>Circuit vs. Execution Depth</p> <p> Before going any further, it's worth distinguishing between the concept of circuit depth and circuit execution depth. For example, in the following implementation, each CX gate instruction inside the for-loop is executed in sequence. So even thought the circuit depth is $log(N) = n$, the circuit execution depth is still $N$. </p> In\u00a0[\u00a0]: Copied! <pre>def ghz_log_depth(n: int):\n    n_qubits = int(2**n)\n\n    @qasm2.extended\n    def layer_of_cx(i_layer: int, qreg: qasm2.QReg):\n        step = n_qubits // (2**i_layer)\n        for j in range(0, n_qubits, step):\n            qasm2.cx(ctrl=qreg[j], qarg=qreg[j + step // 2])\n\n    @qasm2.extended\n    def ghz_log_depth_program():\n\n        qreg = qasm2.qreg(n_qubits)\n\n        qasm2.h(qreg[0])\n        for i in range(n):\n            layer_of_cx(i_layer=i, qreg=qreg)\n\n    return ghz_log_depth_program\n</pre> def ghz_log_depth(n: int):     n_qubits = int(2**n)      @qasm2.extended     def layer_of_cx(i_layer: int, qreg: qasm2.QReg):         step = n_qubits // (2**i_layer)         for j in range(0, n_qubits, step):             qasm2.cx(ctrl=qreg[j], qarg=qreg[j + step // 2])      @qasm2.extended     def ghz_log_depth_program():          qreg = qasm2.qreg(n_qubits)          qasm2.h(qreg[0])         for i in range(n):             layer_of_cx(i_layer=i, qreg=qreg)      return ghz_log_depth_program In\u00a0[\u00a0]: Copied! <pre>def ghz_log_simd(n: int):\n    n_qubits = int(2**n)\n\n    @qasm2.extended\n    def layer(i_layer: int, qreg: qasm2.QReg):\n        step = n_qubits // (2**i_layer)\n\n        def get_qubit(x: int):\n            return qreg[x]\n\n        ctrl_qubits = ilist.Map(fn=get_qubit, collection=range(0, n_qubits, step))\n        targ_qubits = ilist.Map(\n            fn=get_qubit, collection=range(step // 2, n_qubits, step)\n        )\n\n        # Ry(-pi/2)\n        qasm2.parallel.u(qargs=targ_qubits, theta=-math.pi / 2, phi=0.0, lam=0.0)\n\n        # CZ gates\n        qasm2.parallel.cz(ctrls=ctrl_qubits, qargs=targ_qubits)\n\n        # Ry(pi/2)\n        qasm2.parallel.u(qargs=targ_qubits, theta=math.pi / 2, phi=0.0, lam=0.0)\n\n    @qasm2.extended\n    def ghz_log_depth_program():\n\n        qreg = qasm2.qreg(n_qubits)\n\n        qasm2.h(qreg[0])\n        for i in range(n):\n            layer(i_layer=i, qreg=qreg)\n\n    return ghz_log_depth_program\n</pre> def ghz_log_simd(n: int):     n_qubits = int(2**n)      @qasm2.extended     def layer(i_layer: int, qreg: qasm2.QReg):         step = n_qubits // (2**i_layer)          def get_qubit(x: int):             return qreg[x]          ctrl_qubits = ilist.Map(fn=get_qubit, collection=range(0, n_qubits, step))         targ_qubits = ilist.Map(             fn=get_qubit, collection=range(step // 2, n_qubits, step)         )          # Ry(-pi/2)         qasm2.parallel.u(qargs=targ_qubits, theta=-math.pi / 2, phi=0.0, lam=0.0)          # CZ gates         qasm2.parallel.cz(ctrls=ctrl_qubits, qargs=targ_qubits)          # Ry(pi/2)         qasm2.parallel.u(qargs=targ_qubits, theta=math.pi / 2, phi=0.0, lam=0.0)      @qasm2.extended     def ghz_log_depth_program():          qreg = qasm2.qreg(n_qubits)          qasm2.h(qreg[0])         for i in range(n):             layer(i_layer=i, qreg=qreg)      return ghz_log_depth_program <p>Using Closures to Capture Global Variables</p> <p> While bloqade.qasm2 permits a main program with arguments, standard QASM2 does not. To get around this, we need to put the program in a closure. Our Kirin compiler toolchain can capture the global variable inside the closure. In this case, the n_qubits will be captured upon calling the ghz_log_simd(n_qubits) python function. As a result, the returned QASM2 program will not have any arguments. </p> In\u00a0[\u00a0]: Copied! <pre>target = qasm2.emit.QASM2(\n    allow_parallel=True,\n)\nast = target.emit(ghz_log_simd(4))\nqasm2.parse.pprint(ast)\n</pre> target = qasm2.emit.QASM2(     allow_parallel=True, ) ast = target.emit(ghz_log_simd(4)) qasm2.parse.pprint(ast)"},{"location":"digital/examples/ghz/#ghz-state-preparation-with-parallelism","title":"GHZ State Preparation with Parallelism\u00b6","text":"<p>In this example, we will implement a Greenberger-Horne-Zeilinger (GHZ) state preparation circuit with $N = 2^n$ qubits.</p> <p>First, we will present the standard linear-depth construction in Bloqade but later we will present a log-depth construction that achieves the same result. We then take this one step further and use the fact that Bloqade (and QuEra's neutral atom hardware!) support parallel gates, allowing for the application of the same gate across multiple qubits simultaneously. Combined with the fact that atom shuttling allows for arbitrary connectivity, we can also decrease the circuit execution depth from $N$ to just $n$.</p>"},{"location":"digital/examples/ghz/#simple-linear-depth-implementation-of-a-ghz-state-preparation-circuit","title":"Simple Linear Depth Implementation of a GHZ State Preparation Circuit\u00b6","text":"<p>A simple GHZ state preparation circuit can be built with $N - 1$ CX gates and $1$ H gate. This gives the circuit an execution depth of $N$.</p>"},{"location":"digital/examples/ghz/#log-depth-implementation-of-a-ghz-state-preparation-circuit","title":"Log-depth Implementation of a GHZ State Preparation Circuit\u00b6","text":"<p>Let's take a look how we can rewrite the circuit to take advantage of QuEra's hardware capabilities. We can achieve log(N) circuit depth by rearranging the CX gates (see Mooney, White, Hill, Hollenberg - 2021).</p>"},{"location":"digital/examples/ghz/#our-native-gate-set-and-parallelism","title":"Our Native Gate Set and Parallelism\u00b6","text":"<p>By nature, our digital quantum computer can execute native gates in parallel in an single instruction/ execution cycle. The concept is very similar to the SIMD (Single Instruction, Multiple Data) in classical computing.</p> <p>On our hardware, there are two important factors to be considered:</p> <ol> <li>the native gate set allows for arbitrary (parallel) rotations and (parallel) CZ gates.</li> <li>Our atom shuttling architecture allows arbitrary qubit connectivity. This means that our parallel instruction is not limited to fixed connectivity (for example nearest neighbor connectivity).</li> </ol> <p>With this in mind, we can rewrite the <code>layer</code> subroutine to now use the <code>qasm2.parallel</code> dialect in Bloqade. We know that the CX gate can be decomposed into a CZ gate with two single-qubit gates $R_y(-\\pi/2)$ and $R_y(\\pi/2)$ acting on the target qubits. With this decomposition in mind, we can now using our parallel gate instructions <code>parallel.u</code> and <code>parallel.cz</code>. With the following modification, we can further reduce the circuit execution depth to just $n$ (log of the total number of qubits $N$)</p>"},{"location":"digital/examples/pauli_exponentiation/","title":"Pauli Exponentiation for Quantum Simulation","text":"In\u00a0[\u00a0]: Copied! <pre>import math\n\nfrom bloqade import qasm2\n</pre> import math  from bloqade import qasm2 <p>First, we define the <code>zzzz_gadget</code> function which is a simple implementation of Pauli Z exponentiation with a parameterized angle <code>gamma</code>.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef zzzz_gadget(targets: tuple[qasm2.Qubit, ...], gamma: float):\n    for i in range(len(targets) - 1):\n        qasm2.cx(targets[i], targets[i + 1])\n\n    qasm2.rz(targets[-1], gamma)\n\n    for j in range(len(targets) - 1):\n        qasm2.cx(targets[-j - 1], targets[-j - 2])\n</pre> @qasm2.extended def zzzz_gadget(targets: tuple[qasm2.Qubit, ...], gamma: float):     for i in range(len(targets) - 1):         qasm2.cx(targets[i], targets[i + 1])      qasm2.rz(targets[-1], gamma)      for j in range(len(targets) - 1):         qasm2.cx(targets[-j - 1], targets[-j - 2]) <p>Next, we define the <code>pauli_basis_change</code> function which is a simple implementation of Pauli basis change with a parameterized start and end Pauli basis.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef pauli_basis_change(targets: tuple[qasm2.Qubit, ...], start: str, end: str):\n    # assert len(targets) == len(start)\n    # assert len(targets) == len(end)\n\n    # for qubit, start_pauli, end_pauli in zip(targets, start, end):\n    for i in range(len(targets)):\n        qubit = targets[i]\n        start_pauli = start[i]\n        end_pauli = end[i]\n\n        target = start_pauli + end_pauli\n        if target == \"ZX\":\n            qasm2.ry(qubit, math.pi / 2)\n        elif target == \"ZY\":\n            qasm2.rx(qubit, -math.pi / 2)\n        # elif target == \"ZZ\":\n        #     pass\n        # elif target == \"XX\":\n        #     pass\n        elif target == \"XY\":\n            qasm2.rz(qubit, math.pi / 2)\n        elif target == \"XZ\":\n            qasm2.ry(qubit, -math.pi / 2)\n        elif target == \"YX\":\n            qasm2.rz(qubit, -math.pi / 2)\n        # elif target == \"YY\":\n        #     pass\n        elif target == \"YZ\":\n            qasm2.rx(qubit, math.pi / 2)\n</pre> @qasm2.extended def pauli_basis_change(targets: tuple[qasm2.Qubit, ...], start: str, end: str):     # assert len(targets) == len(start)     # assert len(targets) == len(end)      # for qubit, start_pauli, end_pauli in zip(targets, start, end):     for i in range(len(targets)):         qubit = targets[i]         start_pauli = start[i]         end_pauli = end[i]          target = start_pauli + end_pauli         if target == \"ZX\":             qasm2.ry(qubit, math.pi / 2)         elif target == \"ZY\":             qasm2.rx(qubit, -math.pi / 2)         # elif target == \"ZZ\":         #     pass         # elif target == \"XX\":         #     pass         elif target == \"XY\":             qasm2.rz(qubit, math.pi / 2)         elif target == \"XZ\":             qasm2.ry(qubit, -math.pi / 2)         elif target == \"YX\":             qasm2.rz(qubit, -math.pi / 2)         # elif target == \"YY\":         #     pass         elif target == \"YZ\":             qasm2.rx(qubit, math.pi / 2) <p>Putting it all together, we define the <code>pauli_exponential</code> function which is a simple implementation of Pauli Exponentiation with a parameterized Pauli basis and angle <code>gamma</code>.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef pauli_exponential(targets: tuple[qasm2.Qubit, ...], pauli: str, gamma: float):\n    # assert len(targets) == len(pauli)\n\n    pauli_basis_change(targets=targets, start=\"Z\" * len(targets), end=pauli)\n    zzzz_gadget(targets=targets, gamma=gamma)\n    pauli_basis_change(targets=targets, start=pauli, end=\"Z\" * len(targets))\n</pre> @qasm2.extended def pauli_exponential(targets: tuple[qasm2.Qubit, ...], pauli: str, gamma: float):     # assert len(targets) == len(pauli)      pauli_basis_change(targets=targets, start=\"Z\" * len(targets), end=pauli)     zzzz_gadget(targets=targets, gamma=gamma)     pauli_basis_change(targets=targets, start=pauli, end=\"Z\" * len(targets)) <p>Finally, we define the <code>main</code> function as the entry point of the program.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef main():\n    register = qasm2.qreg(4)\n    pauli_exponential((register[0], register[1], register[2]), \"ZXY\", 0.5)\n</pre> @qasm2.extended def main():     register = qasm2.qreg(4)     pauli_exponential((register[0], register[1], register[2]), \"ZXY\", 0.5) <p>we can now ask the compiler to emit the QASM2 code for the <code>main</code> function.</p> In\u00a0[\u00a0]: Copied! <pre>target = qasm2.emit.QASM2()\nast = target.emit(main)\nqasm2.parse.pprint(ast)\n</pre> target = qasm2.emit.QASM2() ast = target.emit(main) qasm2.parse.pprint(ast)"},{"location":"digital/examples/pauli_exponentiation/#pauli-exponentiation-for-quantum-simulation","title":"Pauli Exponentiation for Quantum Simulation\u00b6","text":"<p>In this example, we will consider a simple Pauli Exponentiation circuit.</p>"},{"location":"digital/examples/qaoa/","title":"QAOA","text":"<p>Lets do a simple example of a prototype circuit that benefits from parallelism: QAOA solving the MaxCut problem. For more details, see arXiv:1411.4028 and the considerable literature that has developed around this algorithm.</p> In\u00a0[\u00a0]: Copied! <pre>import math\nfrom typing import Any\n\nimport kirin\nimport networkx as nx\nfrom kirin.dialects import ilist\n\nfrom bloqade import qasm2\n\npi = math.pi\n</pre> import math from typing import Any  import kirin import networkx as nx from kirin.dialects import ilist  from bloqade import qasm2  pi = math.pi <p>MaxCut is a combinatorial graph problem that seeks to bi-partition the nodes of some graph G such that the number of edges between the two partitions is maximized. Here, we choose a random 3 regular graph with 32 nodes ref</p> In\u00a0[\u00a0]: Copied! <pre>N = 32\nG = nx.random_regular_graph(3, N, seed=42)\n</pre> N = 32 G = nx.random_regular_graph(3, N, seed=42) <p>To build the quantum program, we use a builder function and use closure to pass variables inside of the kernel function (kirin methods). In this case, the two variables that are passed inside are the edges and nodes of the graph.</p> <p>The QAOA first prepares the |+&gt; state as a superposition of all possible bitstrings, then repeats between the (diagonal) cost function and the mixer X with angles gamma and beta. It is parameterized by gamma and betas, which are each the p length lists of angles.</p> <p>Lets first implement the sequential version of the QAOA algorithm, which does not inform any parallelism to the compiler.</p> In\u00a0[\u00a0]: Copied! <pre>def qaoa_sequential(G: nx.Graph) -&gt; kirin.ir.Method:\n\n    edges = list(G.edges)\n    nodes = list(G.nodes)\n    N = len(nodes)\n\n    @qasm2.extended\n    def kernel(gamma: ilist.IList[float, Any], beta: ilist.IList[float, Any]):\n        # Initialize the register in the |+&gt; state\n        q = qasm2.qreg(N)\n        for i in range(N):  # structural control flow is native to the Kirin compiler\n            qasm2.h(q[i])\n\n        # Repeat the cost and mixer layers\n        for i in range(len(gamma)):\n            # The cost layer, which corresponds to a ZZ(phase) gate applied\n            # to each edge of the graph\n            for j in range(len(edges)):\n                edge = edges[j]\n                qasm2.cx(q[edge[0]], q[edge[1]])\n                qasm2.rz(q[edge[1]], gamma[i])\n                qasm2.cx(q[edge[0]], q[edge[1]])\n            # The mixer layer, which corresponds to a X(phase) gate applied\n            # to each node of the graph\n            for j in range(N):\n                qasm2.rx(q[j], beta[i])\n\n        return q\n\n    return kernel\n</pre> def qaoa_sequential(G: nx.Graph) -&gt; kirin.ir.Method:      edges = list(G.edges)     nodes = list(G.nodes)     N = len(nodes)      @qasm2.extended     def kernel(gamma: ilist.IList[float, Any], beta: ilist.IList[float, Any]):         # Initialize the register in the |+&gt; state         q = qasm2.qreg(N)         for i in range(N):  # structural control flow is native to the Kirin compiler             qasm2.h(q[i])          # Repeat the cost and mixer layers         for i in range(len(gamma)):             # The cost layer, which corresponds to a ZZ(phase) gate applied             # to each edge of the graph             for j in range(len(edges)):                 edge = edges[j]                 qasm2.cx(q[edge[0]], q[edge[1]])                 qasm2.rz(q[edge[1]], gamma[i])                 qasm2.cx(q[edge[0]], q[edge[1]])             # The mixer layer, which corresponds to a X(phase) gate applied             # to each node of the graph             for j in range(N):                 qasm2.rx(q[j], beta[i])          return q      return kernel <p>Next, lets implement a SIMD (Single Instruction, Multiple Data) version of the QAOA algorithm, which effectively represents the parallelism in the QAOA algorithm. This can be done by coloring the (commuting) ZZ(phase) gates into groups with non-overlapping sets of qubits, and then applying each of those groups in parallel. By Vizing's theorem the edges of a graph can efficiently be colored into $\\Delta+1$ colors, where $\\Delta$ is the maximum degree of the graph. Unfortunately, networkx does not have a native implementation of the algorithm so instead we use the lesser [Brooks' theorem]https://en.wikipedia.org/wiki/Brooks%27_theorem) to color the edges using an equitable coloring of the line graph.</p> In\u00a0[\u00a0]: Copied! <pre>def qaoa_simd(G: nx.Graph) -&gt; kirin.ir.Method:\n\n    nodes = list(G.nodes)\n\n    # Note that graph computation is happening /outside/ the kernel function:\n    # this is a computation that occurs on your laptop in Python when you generate\n    # a program, as opposed to on a piece of quantum hardware, which is what\n    # occurs inside of the kernel.\n    Gline = nx.line_graph(G)\n    colors = nx.algorithms.coloring.equitable_color(Gline, num_colors=5)\n    left_ids = ilist.IList(\n        [\n            ilist.IList([edge[0] for edge in G.edges if colors[edge] == i])\n            for i in range(5)\n        ]\n    )\n    right_ids = ilist.IList(\n        [\n            ilist.IList([edge[1] for edge in G.edges if colors[edge] == i])\n            for i in range(5)\n        ]\n    )\n    # We can use composition of kernel functions to simplify repeated code.\n    # Small snippets (say, the CX gate) can be written once and then called\n    # many times.\n\n    @qasm2.extended\n    def parallel_h(qargs: ilist.IList[qasm2.Qubit, Any]):\n        qasm2.parallel.u(qargs=qargs, theta=pi / 2, phi=0.0, lam=pi)\n\n    # A parallel CX gate is equivalently a parallel H gate, followed by a parallel CZ gate,\n    # followed by another parallel H. the CZ can be done in any order as they permute.\n    @qasm2.extended\n    def parallel_cx(\n        ctrls: ilist.IList[qasm2.Qubit, Any], qargs: ilist.IList[qasm2.Qubit, Any]\n    ):\n        parallel_h(qargs)\n        qasm2.parallel.cz(ctrls, qargs)\n        parallel_h(qargs)\n\n    @qasm2.extended\n    def parallel_cz_phase(\n        ctrls: ilist.IList[qasm2.Qubit, Any],\n        qargs: ilist.IList[qasm2.Qubit, Any],\n        gamma: float,\n    ):\n        parallel_cx(ctrls, qargs)\n        qasm2.parallel.rz(qargs, gamma)\n        parallel_cx(ctrls, qargs)\n\n    @qasm2.extended\n    def kernel(gamma: ilist.IList[float, Any], beta: ilist.IList[float, Any]):\n        # Declare the register and set it to the |+&gt; state\n        q = qasm2.qreg(len(nodes))\n        # qasm2.glob.u(theta=pi / 2, phi=0.0, lam=pi,registers=[q])\n\n        def get_qubit(x: int):\n            return q[x]\n\n        all_qubits = ilist.map(fn=get_qubit, collection=range(N))\n\n        parallel_h(all_qubits)\n\n        for i in range(len(gamma)):  # For each QAOA layer...\n            # Do the ZZ phase gates...\n            for cind in range(\n                5\n            ):  # by applying a parallel CZ phase gate in parallel for each color,\n                ctrls = ilist.map(fn=get_qubit, collection=left_ids[cind])\n                qargs = ilist.map(fn=get_qubit, collection=right_ids[cind])\n                parallel_cz_phase(ctrls, qargs, gamma[i])\n            # ...then, do an X phase gate. Observe that because this happens on every\n            # qubit, we can do a global rotation, which is higher fidelity than\n            # parallel local rotations.\n            # qasm2.glob.u(theta=beta[i],phi=0.0,lam=0.0,registers=[q])\n            qasm2.parallel.u(qargs=all_qubits, theta=beta[i], phi=0.0, lam=0.0)\n\n        return q\n\n    return kernel\n</pre> def qaoa_simd(G: nx.Graph) -&gt; kirin.ir.Method:      nodes = list(G.nodes)      # Note that graph computation is happening /outside/ the kernel function:     # this is a computation that occurs on your laptop in Python when you generate     # a program, as opposed to on a piece of quantum hardware, which is what     # occurs inside of the kernel.     Gline = nx.line_graph(G)     colors = nx.algorithms.coloring.equitable_color(Gline, num_colors=5)     left_ids = ilist.IList(         [             ilist.IList([edge[0] for edge in G.edges if colors[edge] == i])             for i in range(5)         ]     )     right_ids = ilist.IList(         [             ilist.IList([edge[1] for edge in G.edges if colors[edge] == i])             for i in range(5)         ]     )     # We can use composition of kernel functions to simplify repeated code.     # Small snippets (say, the CX gate) can be written once and then called     # many times.      @qasm2.extended     def parallel_h(qargs: ilist.IList[qasm2.Qubit, Any]):         qasm2.parallel.u(qargs=qargs, theta=pi / 2, phi=0.0, lam=pi)      # A parallel CX gate is equivalently a parallel H gate, followed by a parallel CZ gate,     # followed by another parallel H. the CZ can be done in any order as they permute.     @qasm2.extended     def parallel_cx(         ctrls: ilist.IList[qasm2.Qubit, Any], qargs: ilist.IList[qasm2.Qubit, Any]     ):         parallel_h(qargs)         qasm2.parallel.cz(ctrls, qargs)         parallel_h(qargs)      @qasm2.extended     def parallel_cz_phase(         ctrls: ilist.IList[qasm2.Qubit, Any],         qargs: ilist.IList[qasm2.Qubit, Any],         gamma: float,     ):         parallel_cx(ctrls, qargs)         qasm2.parallel.rz(qargs, gamma)         parallel_cx(ctrls, qargs)      @qasm2.extended     def kernel(gamma: ilist.IList[float, Any], beta: ilist.IList[float, Any]):         # Declare the register and set it to the |+&gt; state         q = qasm2.qreg(len(nodes))         # qasm2.glob.u(theta=pi / 2, phi=0.0, lam=pi,registers=[q])          def get_qubit(x: int):             return q[x]          all_qubits = ilist.map(fn=get_qubit, collection=range(N))          parallel_h(all_qubits)          for i in range(len(gamma)):  # For each QAOA layer...             # Do the ZZ phase gates...             for cind in range(                 5             ):  # by applying a parallel CZ phase gate in parallel for each color,                 ctrls = ilist.map(fn=get_qubit, collection=left_ids[cind])                 qargs = ilist.map(fn=get_qubit, collection=right_ids[cind])                 parallel_cz_phase(ctrls, qargs, gamma[i])             # ...then, do an X phase gate. Observe that because this happens on every             # qubit, we can do a global rotation, which is higher fidelity than             # parallel local rotations.             # qasm2.glob.u(theta=beta[i],phi=0.0,lam=0.0,registers=[q])             qasm2.parallel.u(qargs=all_qubits, theta=beta[i], phi=0.0, lam=0.0)          return q      return kernel In\u00a0[\u00a0]: Copied! <pre>print(\"--- Sequential ---\")\nqaoa_sequential(G).code.print()\n</pre> print(\"--- Sequential ---\") qaoa_sequential(G).code.print() In\u00a0[\u00a0]: Copied! <pre>kernel = qaoa_simd(G)\n\nprint(\"\\n\\n--- Simd ---\")\nkernel.print()\n</pre> kernel = qaoa_simd(G)  print(\"\\n\\n--- Simd ---\") kernel.print() In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef main():\n    kernel([0.1, 0.2], [0.3, 0.4])\n</pre> @qasm2.extended def main():     kernel([0.1, 0.2], [0.3, 0.4]) In\u00a0[\u00a0]: Copied! <pre>target = qasm2.emit.QASM2()\nast = target.emit(main)\nqasm2.parse.pprint(ast)\n</pre> target = qasm2.emit.QASM2() ast = target.emit(main) qasm2.parse.pprint(ast)"},{"location":"digital/examples/qft/","title":"Quantum Fourier Transform","text":"In\u00a0[\u00a0]: Copied! <pre>import math\n\nfrom bloqade import qasm2\nfrom bloqade.pyqrack import PyQrack\n</pre> import math  from bloqade import qasm2 from bloqade.pyqrack import PyQrack <p>In the following, we will define the Quantum Fourier Transform (QFT) circuit using recursion inside a kernel function <code>qft</code>. The <code>qft</code> function takes two arguments: a quantum register <code>qreg</code> and an integer <code>n</code> representing the number of qubits we want to apply the QFT circuit to.</p> In\u00a0[\u00a0]: Copied! <pre>pi = math.pi\n\n\n@qasm2.extended\ndef qft(qreg: qasm2.QReg, n: int, k: int):\n    if k == n:\n        return qreg\n\n    qasm2.h(qreg[k])\n    for i in range(k + 1, n):\n        qasm2.cu1(qreg[i], qreg[k], 2 * math.pi / 2**i)\n    qft(qreg, n, k + 1)  # recursion\n    return qreg\n</pre> pi = math.pi   @qasm2.extended def qft(qreg: qasm2.QReg, n: int, k: int):     if k == n:         return qreg      qasm2.h(qreg[k])     for i in range(k + 1, n):         qasm2.cu1(qreg[i], qreg[k], 2 * math.pi / 2**i)     qft(qreg, n, k + 1)  # recursion     return qreg <p>Next, we will call this kernel function <code>qft</code> inside a <code>main</code> function to check if the QFT circuit is correctly implemented. We will use a quantum register of size 3.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef main():\n    return qft(qasm2.qreg(3), 3, 0)\n</pre> @qasm2.extended def main():     return qft(qasm2.qreg(3), 3, 0) <p>Finally, we will run the <code>main</code> function on the <code>PyQrack</code> backend and print the quantum register to see the final state of the qubits after applying the QFT circuit.</p> In\u00a0[\u00a0]: Copied! <pre>device = PyQrack()\nqreg = device.run(main)\nprint(qreg)\n</pre> device = PyQrack() qreg = device.run(main) print(qreg) <p>we can also emit the QASM2 code for the <code>main</code> function and print it to see the QASM2 code that corresponds to the QFT circuit.</p> In\u00a0[\u00a0]: Copied! <pre>from bloqade.qasm2.emit import QASM2  # noqa: E402\nfrom bloqade.qasm2.parse import pprint  # noqa: E402\n\ntarget = QASM2()\nast = target.emit(main)\npprint(ast)\n</pre> from bloqade.qasm2.emit import QASM2  # noqa: E402 from bloqade.qasm2.parse import pprint  # noqa: E402  target = QASM2() ast = target.emit(main) pprint(ast)"},{"location":"digital/examples/qft/#quantum-fourier-transform","title":"Quantum Fourier Transform\u00b6","text":"<p>In this example, we will explore the Quantum Fourier Transform (QFT) circuit using recursion and iteration -- a convenient way to implement the QFT circuit using our high-level programming features.</p> <p>To begin, we will import the <code>qasm2</code> module from the <code>bloqade</code> package and the <code>PyQrack</code> backend from the <code>bloqade.pyqrack</code> module, which can be installed via</p> <pre>pip install bloqade-pyqrack[backend]\n</pre> <p>with the <code>backend</code> being one of <code> pyqrack</code>, <code>pyqrack-cpu</code>, <code>pyqrack-cuda</code> depending on the hardware and OS you have. see README for mote details.</p>"},{"location":"digital/examples/repeat_until_success/","title":"Repeat Until Success with STAR Gadget","text":"In\u00a0[\u00a0]: Copied! <pre>from bloqade import qasm2\n</pre> from bloqade import qasm2 <p>This example highlights a few interesting capabilities of having a full kernel structure with runtime control flow. One example is the ability to dynamically allocate qubits, possibly based on previous run-time measurement outcomes.</p> <p>In this case, we prepare a resource state, which is a generalization of the T state with an arbitrary Z rotation $|0\\rangle + e^{i\\theta}|1\\rangle$.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef prep_resource_state(theta: float):\n    qreg = qasm2.qreg(1)\n    qubit = qreg[0]\n    qasm2.h(qubit)\n    qasm2.rz(qubit, theta)\n    return qubit\n</pre> @qasm2.extended def prep_resource_state(theta: float):     qreg = qasm2.qreg(1)     qubit = qreg[0]     qasm2.h(qubit)     qasm2.rz(qubit, theta)     return qubit <p>Using this resource state, we can teleport the Z phase gate to a target qubit using only Clifford gates, which are much easier to implement fault-tolerantly. This is implemented by first applying a CNOT gate controlled by the resource state on the target qubit, then measuring the target qubit in the computational basis. If the measurement outcome is 1 (which occurs with 50% probability), the gadget executed a Z(theta) gate on the target qubit and teleported it to the new resource state.</p> <p>However, if the measurement outcome is 0 (which occurs with 50% probability), we apply an X gate, and the gadget executed a Z(-theta) gate on the target qubit. In order to correct this gate, we must apply a Z(+2theta) gate on the new target state. Of course, we can apply this Z(+2theta) gate by applying the same gadget with twice the angle, and repeat until we get the correct outcome.</p> <p>The simplest way to implement the gadget is to simply post-select the correct measurement outcome using an assert statement. This is straightforward, but comes with an exponential overhead in the number of resource states: there is a 50% chance of success at each step, so there is only a $2^{-n}$ chance of success after $n$ Z phase gates.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef z_phase_gate_postselect(target: qasm2.Qubit, theta: float) -&gt; qasm2.Qubit:\n    ancilla = prep_resource_state(theta)\n    qasm2.cx(ancilla, target)\n    creg = qasm2.creg(1)\n    qasm2.measure(target, creg[0])\n    if creg[0] == 1:\n        qasm2.x(ancilla)\n    return ancilla\n</pre> @qasm2.extended def z_phase_gate_postselect(target: qasm2.Qubit, theta: float) -&gt; qasm2.Qubit:     ancilla = prep_resource_state(theta)     qasm2.cx(ancilla, target)     creg = qasm2.creg(1)     qasm2.measure(target, creg[0])     if creg[0] == 1:         qasm2.x(ancilla)     return ancilla <p>To (deterministically) implement the gate, we can recursively apply the gadget by correcting the angle of the Z gate by applying Z(+2*theta). Observe that, while it is efficient to represent this as a composition of kernels, there is no equivalent representation as a circuit, as the number of resource qubits and total number of gates is not known until runtime.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef z_phase_gate_recursive(target: qasm2.Qubit, theta: float) -&gt; qasm2.Qubit:\n    \"\"\"\n    https://journals.aps.org/prxquantum/pdf/10.1103/PRXQuantum.5.010337 Fig. 7\n    \"\"\"\n    ancilla = prep_resource_state(theta)\n    qasm2.cx(ancilla, target)\n    creg = qasm2.creg(1)\n    qasm2.measure(target, creg[0])\n    if creg[0] == 0:\n        return z_phase_gate_recursive(ancilla, 2 * theta)\n    if creg[0] == 1:\n        qasm2.x(ancilla)\n    return ancilla\n</pre> @qasm2.extended def z_phase_gate_recursive(target: qasm2.Qubit, theta: float) -&gt; qasm2.Qubit:     \"\"\"     https://journals.aps.org/prxquantum/pdf/10.1103/PRXQuantum.5.010337 Fig. 7     \"\"\"     ancilla = prep_resource_state(theta)     qasm2.cx(ancilla, target)     creg = qasm2.creg(1)     qasm2.measure(target, creg[0])     if creg[0] == 0:         return z_phase_gate_recursive(ancilla, 2 * theta)     if creg[0] == 1:         qasm2.x(ancilla)     return ancilla <p>An alternative representation uses control flow to implement the same gate. If the number of repeats is fixed, this can be represented as a static circuit, though it would require a large number of resource qubits and may still fail with a small probability $2^{-attempts}$.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef z_phase_gate_loop(target: qasm2.Qubit, theta: float, attempts: int):\n    \"\"\"\n    https://journals.aps.org/prxquantum/pdf/10.1103/PRXQuantum.5.010337 Fig. 7\n    \"\"\"\n    creg = qasm2.creg(1)  # Implicitly initialized to 0, thanks qasm...\n    for ctr in range(attempts):\n        ancilla = prep_resource_state(theta * (2**ctr))\n        if creg[0] == 0:\n            qasm2.cx(ancilla, target)\n            qasm2.measure(target, creg[0])\n            target = ancilla\n    qasm2.x(target)\n</pre> @qasm2.extended def z_phase_gate_loop(target: qasm2.Qubit, theta: float, attempts: int):     \"\"\"     https://journals.aps.org/prxquantum/pdf/10.1103/PRXQuantum.5.010337 Fig. 7     \"\"\"     creg = qasm2.creg(1)  # Implicitly initialized to 0, thanks qasm...     for ctr in range(attempts):         ancilla = prep_resource_state(theta * (2**ctr))         if creg[0] == 0:             qasm2.cx(ancilla, target)             qasm2.measure(target, creg[0])             target = ancilla     qasm2.x(target) <p>Before we analyze these circuits, we must declare a main function which takes no inputs, as qasm2 does not support parameterized circuits or subcircuits.</p> In\u00a0[\u00a0]: Copied! <pre>theta = 0.1  # Specify some Z rotation angle. Note that this is being defined\n</pre> theta = 0.1  # Specify some Z rotation angle. Note that this is being defined <p>outside the main function and being used inside the function via closure.</p> In\u00a0[\u00a0]: Copied! <pre>@qasm2.extended\ndef postselect_main():\n    target = qasm2.qreg(1)\n    z_phase_gate_postselect(target[0], theta)\n\n\n@qasm2.extended\ndef recursion_main():\n    target = qasm2.qreg(1)\n    z_phase_gate_recursive(target[0], theta)\n\n\n@qasm2.extended\ndef loop_main():\n    target = qasm2.qreg(1)\n    z_phase_gate_loop(target[0], theta, 5)\n</pre> @qasm2.extended def postselect_main():     target = qasm2.qreg(1)     z_phase_gate_postselect(target[0], theta)   @qasm2.extended def recursion_main():     target = qasm2.qreg(1)     z_phase_gate_recursive(target[0], theta)   @qasm2.extended def loop_main():     target = qasm2.qreg(1)     z_phase_gate_loop(target[0], theta, 5) <p>Now lets explore running some interpreters on these circuits. We support the quantum emulation backend PyQrack, which simulates quantum circuits using state vectors.</p> In\u00a0[\u00a0]: Copied! <pre>from bloqade.pyqrack import PyQrack  # noqa: E402\n\ndevice = PyQrack()\nqreg = device.run(postselect_main)\nprint(qreg)\n</pre> from bloqade.pyqrack import PyQrack  # noqa: E402  device = PyQrack() qreg = device.run(postselect_main) print(qreg) <p>Now lets generate the QASM2 code for these circuits! This is an example of code generation, where we go from one DSL and translate to another.</p> In\u00a0[\u00a0]: Copied! <pre>from bloqade.qasm2.emit import QASM2  # noqa: E402\nfrom bloqade.qasm2.parse import pprint  # noqa: E402\n\ntarget = QASM2()\nqasm_postselect = target.emit(postselect_main)\nqasm_loop = target.emit(loop_main)\n\ntry:  # The recursion version has no qasm representation.\n    qasm_recursive = target.emit(recursion_main)\nexcept Exception:\n    print(\"Whoops! We cannot emit calls with return value. This is expected.\")\n\nprint(\"\\n\\n--- Postselect ---\")\npprint(qasm_postselect)\nprint(\"\\n\\n--- Loop ---\")\npprint(qasm_loop)\n</pre> from bloqade.qasm2.emit import QASM2  # noqa: E402 from bloqade.qasm2.parse import pprint  # noqa: E402  target = QASM2() qasm_postselect = target.emit(postselect_main) qasm_loop = target.emit(loop_main)  try:  # The recursion version has no qasm representation.     qasm_recursive = target.emit(recursion_main) except Exception:     print(\"Whoops! We cannot emit calls with return value. This is expected.\")  print(\"\\n\\n--- Postselect ---\") pprint(qasm_postselect) print(\"\\n\\n--- Loop ---\") pprint(qasm_loop) <p>We can also get qasm out as a string</p> In\u00a0[\u00a0]: Copied! <pre>payload = target.emit_str(postselect_main)\n</pre> payload = target.emit_str(postselect_main)"},{"location":"digital/examples/repeat_until_success/#repeat-until-success-with-star-gadget","title":"Repeat Until Success with STAR Gadget\u00b6","text":"<p>In this example, we will demonstrate a near-term fault tolerant gadget which is a repeat-until-success protocol to implement a Z phase gate using a resource state (similar to a T state), Pauli gates, and feed-forward measurement.</p> <p>For more information, see https://journals.aps.org/prxquantum/pdf/10.1103/PRXQuantum.5.010337, especially Fig. 7.</p>"},{"location":"digital/simulator_device/simulator_device/","title":"Simulation devices","text":"<p>A simulation device can run a task, such as executing a kernel. It acts just like a device that is an actual hardware, but runs everything in a local simulation. As such, it can also be used to inspect the results of your program beyond what is possible on a QPU. For example, you can return the <code>state_vector</code> of the quantum register at the end of the task execution.</p> <p>Here's how you can use it in order to run a simple <code>qasm2.extended</code> kernel.</p> <pre><code>from bloqade.pyqrack import StackMemorySimulator\nfrom bloqade import qasm2\n\n@qasm2.extended\ndef main():\n    q = qasm2.qreg(2)\n\n    qasm2.h(q[0])\n    qasm2.cx(q[0], q[1])\n\n    return q\n\nsim = StackMemorySimulator(min_qubits=2)\n\n# get the state vector -- oohh entanglement\nstate = sim.state_vector(main)\n</code></pre>"},{"location":"digital/simulator_device/tasks/","title":"Tasks","text":"<p>Warning</p> <p>Sorry folks, still under construction.</p> <p>For now, please check the API reference.</p>"},{"location":"quick_start/analog/","title":"Index","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/analog/#quick-start","title":"Quick Start","text":"<p>All the sections below are self-contained, you can click on the links in the Table of Contents to read the relevant parts.</p>"},{"location":"quick_start/analog/#defining-atom-geometry","title":"Defining Atom Geometry","text":"<p>You can import pre-defined geometries based on Bravais lattices from <code>bloqade.analog.atom_arrangement</code>. You may also specify a lattice spacing which dictates the spacing between the atoms as well as the number of atom sites in a certain direction.</p> <pre><code>from bloqade.analog.atom_arrangement import Square, Kagome\n\nsimple_geometry = Square(2, 4, lattice_spacing = 4.0)\nmore_complex_geometry = Kagome(2, 2, lattice_spacing = 2.0)\n</code></pre> <p>You can easily visualize your geometries as well with <code>.show()</code>:</p> <pre><code>more_complex_geometry.show()\n</code></pre> <p>You can also add positions to a pre-defined geometry:</p> <pre><code>from bloqade.analog.atom_arrangement import Square\n\nbase_geometry = Square(2)\ngeometry_with_my_positions = base_geometry.add_position([(10,10), (20,20)])\n</code></pre> <p>As well as apply defects via <code>.apply_defect_density</code>. In the example below we apply a defect with a probability of 0.2:</p> <pre><code>from bloqade.analog.atom_arrangement import Square, Kagome\n\nmore_complex_geometry = Kagome(2, 2, lattice_spacing = 2.0)\ndefective_geometry = more_complex_geometry.apply_defect_density(0.2)\n</code></pre> <p>Or if you want to completely roll out your own atom geometry from scratch just use <code>add_position</code> by itself:</p> <pre><code>from bloqade.analog import start\n\nmy_geometry = start.add_position([(1,2), (3,4), (5,6)])\n</code></pre>"},{"location":"quick_start/analog/#building-waveforms","title":"Building Waveforms","text":"<p>After you've defined a geometry you:</p> <ul> <li>Specify which level coupling to drive: <code>rydberg</code> or <code>hyperfine</code></li> <li>Specify <code>detuning</code>, <code>rabi.amplitude</code> or <code>rabi.phase</code></li> <li>Specify the spatial modulation</li> </ul> <p>Which then leads you to the ability to specify a waveform of interest and begin constructing your pulse sequence. In the example below, we target the ground-Rydberg level coupling to drive with uniform spatial modulation for the Rabi amplitude. Our waveform is a piecewise linear one which ramps from \\(0\\) to \\(5 \\,\\text{rad/us}\\), holds that value for \\(1 \\,\\text{us}\\) and then ramps back down to \\(0 \\,\\text{rad/us}\\).</p> <pre><code>from bloqade.analog import start\n\ngeometry = start.add_position((0,0))\ntarget_rabi_amplitude = geometry.rydberg.rabi.amplitude.uniform\nwaveform_applied = (\n    target_rabi_amplitude\n    .piecewise_linear(durations = [0.06, 1, 0.06], values = [0, 5, 5, 0])\n)\n</code></pre> <p>You aren't restricted to just piecewise linear waveforms however, you can also specify:</p> <ul> <li><code>linear</code> - Define a transition from one value to another over a duration</li> <li><code>constant</code> - Define a fixed value over a duration</li> <li><code>piecewise_constant</code> - Define a step-wise function with specific durations for each step</li> <li><code>poly</code> - Define a polynomial waveform using coefficients over a duration</li> </ul>"},{"location":"quick_start/analog/#arbitrary-functions-as-waveforms","title":"Arbitrary Functions as Waveforms","text":"<p>For more complex waveforms it may provide to be tedious trying to chain together a large number of <code>piecewise_constant</code> or <code>piecewise_linear</code> methods and instead easier to just define the waveform as a function of time.</p> <p>Bloqade lets you easily plug in an arbitrary function with <code>.fn</code>:</p> <pre><code>from bloqade.analog import start\nfrom math import sin\n\ngeometry = start.add_position((0,0))\ntarget_rabi_amplitude = geometry.rydberg.rabi.amplitude.uniform\n\ndef custom_waveform(t):\n    return 2.0 * sin(t)\n\ncustom_waveform_applied = (\n    target_rabi_amplitude\n    .fn(custom_waveform, duration = 3.0)\n)\n</code></pre> <p>In this form you can immediately emulate it if you'd like but to run this on hardware you need to discretize it. The waveform on hardware has to either be:</p> <ul> <li>Piecewise linear for Rabi amplitude and detuning terms of the Hamiltonian</li> <li>Piecewise constant for the Phase term of the Hamiltonian</li> </ul> <p>Bloqade can automatically perform this conversion with <code>sample()</code>, all you need to do is specify the kind of interpolation and the size of the discretization step in time. Below we set the step duration to be \\(0.05 \\,\\text{us}\\) with <code>\"linear\"</code> interpolation to give us a resulting piecewise linear waveform.</p> <pre><code>custom_discretized_waveform_applied = (\n    target_rabi_amplitude\n    .fn(custom_waveform, duration = 3.0)\n    .sample(0.05, \"linear\")\n)\n</code></pre> <p>Note</p> <p>Programs that have custom functions as waveforms are not fully serializable. This means that when you are saving and reloading results, the original embedded program will be missing that custom waveform. You will still be able to analyze the saved results!</p>"},{"location":"quick_start/analog/#slicing-and-recording-waveforms","title":"Slicing and Recording Waveforms","text":"<p>When you conduct parameter sweeps with your program, you may want to sweep over your program across  time. This will require \"slicing\" your waveforms, where you define the waveform of interest and then, using a variable with <code>.slice</code>, indicate the times at which the waveform duration should be cut short.</p> <p>In the example below we define a simple piecewise linear waveform but slice it starting from a time duration of \\(0 \\,\\text{us}\\) to values between \\(1\\) to \\(2 \\,\\text{us}\\).</p> <pre><code>from bloqade.analog import start\nimport numpy as np\n\nsliced_program = (\n    start.add_position((0, 0))\n    .rydberg.rabi.amplitude.uniform.piecewise_linear(\n        durations=[0.5, 2.5, 0.5], values=[0, 3.0, 3.0, 0]\n    ).slice(start=0, stop=\"run_time\")\n)\n\nrun_times = np.linspace(1.0, 2.0, 10)\nvars_assigned_program = sliced_program.batch_assign(run_time=run_times)\n</code></pre> <p>This program will run fine in emulation but due to hardware constraints certain waveforms (such as those targeting the Rabi Amplitude), the waveform needs to start and end at \\(0 \\,\\text{rad}/\\text{us}\\). Thus, there needs to be a way to slice our waveform but also add an end component to that waveform. <code>.record</code> in Bloqade lets you literally \"record\" the value at the end of a <code>.slice</code> and then use it to construct further parts of the waveform.</p> <p>In the program below the waveform is still sliced but with the help of <code>.record</code> a linear segment that pulls the waveform down to \\(0.0 \\,\\text{rad}/\\text{us}\\) from whatever its current value at the slice is in \\(0.7 \\,\\text{us}\\) is added.</p> <pre><code>from bloqade.analog import start\nimport numpy as np\n\nsliced_program = (\n    start.add_position((0, 0))\n    .rydberg.rabi.amplitude.uniform.piecewise_linear(\n        durations=[0.5, 2.5, 0.5], values=[0, 3.0, 3.0, 0]\n    ).slice(start=0, stop=\"run_time\")\n    .record(\"waveform_value\")\n    .linear(\"rabi_value\", 0.0, 0.7)\n)\n\nrun_times = np.linspace(1.0, 2.0, 10)\nvars_assigned_program = sliced_program.batch_assign(run_time=run_times)\n</code></pre>"},{"location":"quick_start/analog/#waveforms-with-no-geometry","title":"Waveforms with No Geometry","text":"<p>If you have multiple atom geometries you'd like to apply a pulse sequence to or you simply don't want to worry about what atom geometry to start with, you can just build straight off of <code>start</code>:</p> <pre><code>from bloqade.analog import start\n\npulse_sequence = (\n    start\n    .rydberg.rabi.amplitude.uniform\n    .constant(value=1.0, duration=1.0)\n    .parse_sequence()\n)\n</code></pre> <p>You can visualize your sequence as well with <code>.show()</code>:</p> <pre><code>pulse_sequence.show()\n</code></pre> <p></p> <p>And when you're content with it you just <code>.apply()</code> it on the geometries of your choice:</p> <pre><code>from bloqade.analog.atom_arrangement import Honeycomb, Kagome\n\ngeometry_1 = Honeycomb(2, lattice_spacing = 6.0)\ngeometry_2 = Kagome(2, lattice_spacing = 6.0)\n\nprogram_1  = geometry_1.apply(pulse_sequence)\nprogram_2  = geometry_2.apply(pulse_sequence)\n</code></pre>"},{"location":"quick_start/analog/#emulation","title":"Emulation","text":"<p>When you've completed the definition of your program you can use Bloqade's own emulator to get results. The emulation performs the time evolution of the analog Rydberg Hamiltonian. Here we say we want to the program to be run and measurements obtained 1000 times.</p> <pre><code>results = your_program.bloqade.python().run(1000)\n</code></pre> <p>Note</p> <p>If your atoms are particularly close together or the ODE solver gives you the following message:</p> <pre><code>RuntimeError: DOP853/DOPRI5: Problem is probably stiff (interrupted).\n</code></pre> <p>In which case you will need to specify the <code>interaction_picture=True</code> argument:</p> <pre><code>results = your_program.bloqade.python().run(1000, interaction_picture=True)\n</code></pre>"},{"location":"quick_start/analog/#submitting-to-hardware","title":"Submitting to Hardware","text":"<p>To submit your program to hardware ensure you have your AWS Braket credentials loaded. You will need to use the AWS CLI to do this.</p> <p>Then it's just a matter of selecting the Aquila on Braket backend. Before going any further Bloqade provides two options for running your program on actual hardware:</p> <ul> <li>Using <code>.run</code> is blocking, meaning you will not be able to execute anything else while Bloqade waits for results</li> <li>Using <code>.run_async</code> lets you submit to hardware and continue any further execution, while also letting you query the status of your program in the queue.</li> </ul> <p>In the example below we use <code>.run_async</code> to specify the program should be run and measurements obtained 1000 times.</p> <pre><code>async_results = your_program.braket.aquila().run_async(1000)\n</code></pre> <p>We can see the status of our program via:</p> <p><pre><code>async_results.fetch()\n</code></pre> Which gives us the Task ID, a unique identifier for the task as well as the status of the task. In the example below the task is <code>Enqueued</code> meaning it has been successfully created and is awaiting execution on the cloud. When the task is actually running on hardware, the status will change to <code>Running</code>. <pre><code>                                             task ID    status  shots\n0  arn:aws:braket:us-east-1:XXXXXXXXXXXX:quantum-...  Enqueued    100\n</code></pre></p>"},{"location":"quick_start/analog/#analyzing-results","title":"Analyzing Results","text":"<p>When you've retrieved your results from either emulation or hardware you can generate a <code>.report()</code>:</p> <pre><code>report = results.report()\n</code></pre> <p>For the examples below we analyze the results of a two atom program.</p> <p>The report contains useful information such as:</p> <ul> <li> <p>The raw bitstrings measured per each execution of the program <pre><code>report.bitstrings()\n</code></pre> <pre><code>[array([[1, 1],\n        [1, 1],\n        [1, 1],\n        ...,\n        [1, 1],\n        [1, 1],\n        [1, 0]], dtype=int8)]\n</code></pre></p> </li> <li> <p>The number of times each unique bitstring occurred: <pre><code>report.counts()\n</code></pre> <pre><code>[OrderedDict([('11', 892), ('10', 59), ('01', 49)])]\n</code></pre></p> </li> <li> <p>The Rydberg Density for each atom <pre><code>report.rydberg_densities()\n</code></pre> <pre><code>                 0      1\ntask_number\n0            0.053  0.054\n</code></pre></p> </li> </ul> <p>And can also provide useful visual information such as the state of your atoms and the bitstring distribution via:</p> <pre><code>report.show()\n</code></pre> <p></p>"},{"location":"quick_start/analog/#parameter-sweeps","title":"Parameter Sweeps","text":"<p>You can easily do parameter sweeps in emulation and on Aquila with variables. Bloqade automatically detects strings in your program as variables that you can later assign singular or multiple values to.</p> <p>In the example below, we define a program with a singular variable that controls the amplitude of the waveform.</p> <pre><code>from bloqade.analog import start\n\nrabi_oscillations_program = (\n    start.add_position((0, 0))\n    .rydberg.rabi.amplitude.uniform.piecewise_linear(\n        durations=[0.06, 3, 0.06],\n        values=[0, \"rabi_amplitude\", \"rabi_amplitude\", 0]\n    )\n)\n</code></pre> <p>We can assign a single fixed value to the variable:</p> <pre><code>single_value_assignment = rabi_oscillations_program.assign(rabi_amplitude=3.5)\n</code></pre> <p>Or, to perform a sweep, we use <code>.batch_assign</code>:</p> <pre><code>import numpy as np\nrabi_amplitudes = np.linspace(1.0, 2.0, 20)\n\nmultiple_value_assignment = rabi_oscillations_program.batch_assign(rabi_amplitude=rabi_amplitudes)\n</code></pre> <p>This will actually create multiple versions of the program internally, with each program assigned a fixed value from the sweep. Bloqade will automatically handle the compilation of results from these multiple programs in order, meaning there is no major departure from what you saw in analyzing the results of your program.</p> <p>You can also delay assignment of a value to a variable by first declaring it in <code>.args()</code> and then passing a value when you call <code>run</code>:</p> <pre><code>delayed_assignment_program = rabi_oscillations_program.args([\"rabi_amplitude\"])\nresults = delayed_assignment_program.bloqade.python().run(100, args=(1.0,))\n</code></pre> <p>You can alternatively treat the program as a callable after using <code>.args()</code> (note the inverted order of arguments in the call!):</p> <pre><code>delayed_assignment_program = rabi_oscillations_program.args([\"rabi_amplitude\"])\ncallable_program = delayed_assignment_program.bloqade.python()\nresults = callable_program(1.0, shots=100)\n</code></pre> <p>Variables aren't just restricted to having values assigned to them, you can also symbolically manipulate them!</p>"},{"location":"quick_start/analog/#symbolic-parameters","title":"Symbolic Parameters","text":"<p>Variables in Bloqade can also be symbolically manipulated, giving you even more flexibility when you construct your program.</p> <p>In the example below, we externally declare a variable <code>my_var</code> that then has some arithmetic done on it to allow it to have a different value in a later part of the program:</p> <pre><code>from bloqade.analog import start, var\n\nmy_var = var(\"my_variable\")\nwaveform_durations = [0.6, 1.0, 0.6]\n\ngeometry = start.add_position((0,0))\ntarget_rabi_amplitude = geometry.rydberg.rabi.amplitude.uniform\nrabi_waveform = (\n    target_rabi_amplitude\n    .piecewise_linear(durations=waveform_durations,\n                      values=[0.0, my_var, my_var, 0.0])\n)\ntarget_detuning = rabi_waveform.detuning.uniform\ndetuning_waveform = (\n    target_detuning\n    .piecewise_linear(durations=waveform_durations,\n                      values=[my_var-1.0, my_var*0.5, my_var/2, my_var+1.0 ])\n)\n</code></pre> <p>You still perform variable assignment just like you normally would:</p> <pre><code>program = detuning_waveform.assign(my_variable=1.0)\n</code></pre> <p>You can also use Python's built-in <code>sum</code> if you want the sum of multiple variables as a value in your program. This is quite useful when it comes to needing to indicate a full duration for a waveform that doesn't need to be split up:</p> <p><pre><code>from bloqade.analog import start, var\n\nvariable_durations = var([\"a\", \"b\", \"c\"])\n\ngeometry = start.add_position((0,0))\ntarget_rabi_amplitude = geometry.rydberg.rabi.amplitude.uniform\nrabi_waveform = (\n    target_rabi_amplitude\n    .piecewise_linear(durations=variable_durations,\n                      values=[0.0, 1.5, 1.5, 0.0])\n)\ntarget_detuning = rabi_waveform.detuning.uniform\ndetuning_waveform = (\n    target_detuning\n    .constant(duration=sum(variable_durations),\n              value=16.2)\n)\n</code></pre> We later assign values and Bloqade will automatically handle the summation:</p> <pre><code>program = detuning_waveform.assign(a=0.5, b=1.2, c=0.5)\n</code></pre>"},{"location":"quick_start/analog/#saving-and-loading-results","title":"Saving and Loading Results","text":"<p>You can save your results in JSON format using Bloqade's <code>save</code> function:</p> <pre><code>from bloqade.analog import start, save\n\nyour_program = ...\nemulation_results = your_program.bloqade.python().run(100)\nhardware_results = your_program.braket.aquila.run_async(100)\n\nsave(emulation_results, \"emulation_results.json\")\nsave(hardware_results, \"hardware_results.json\")\n</code></pre> <p>And later reload them into Python using the <code>load</code> function:</p> <pre><code>from bloqade.analog import load\nemulation_results = load(\"emulation_results.json\")\nhardware_results = load(\"hardware_results.json\")\n</code></pre>"},{"location":"quick_start/circuits/","title":"Digital Quantum Computing with circuits","text":"<p>This section provides the quick start guide for developing quantum programs represented by circuits using Bloqade. Circuits are a general-purpose and powerful way of representing arbitrary computations. For a few examples please refer to our examples.</p>"},{"location":"quick_start/circuits/#open-quantum-assembly-language-qasm2-and-beyond","title":"Open Quantum Assembly Language (QASM2) and beyond","text":"<p>We have chosen to closely mirror the semantics of the Open Quantum Assembly Language (QASM2) in bloqade.circuits. The QASM2 dialect is a simple quantum assembly language that allows you to write quantum circuits in a human-readable format. However, one should note that QASM2 is a very restricted language and does not support all the features of a high-level language.</p> <p>For example, there is a separation of gate routines declared with <code>gate</code> and main program written as a sequence of gate applications. While the gate routine is similar to a function in many ways, it does not support high-level features such as recursion (due to lack of <code>if</code> statement support inside) or control flows.</p> <p>Indeed, bloqade.circuits is designed with the notion of kernels in mind by decorating functions with a <code>@qasm2.extended</code> decorator. The python code is interpreted and parsed by the Kirin compiler toolchain and lowered to an abstract representation of the program. These kernels can include classical computation and the usual programming structures-- if/else, for and while loops, function inputs, and the like, as one is used to in Python.</p> <p>Additionally, the QASM2 representations of bloqade.circuits have been extended to include a key advantage of reconfigurable neutral atom hardware: parallelism. For example, one can represent a CZ gate applied to many qubit pairs at once as</p> <p><pre><code>@qasm2.extended\ndef parallel_cz(controls:ilist[qasm2.Qubit],targets:ilist[qasm2.Qubit]):\n    for ctr in range(len(controls)):\n        qasm2.cz(ctrl=controls[0],qarg=controls[1])\n</code></pre> or equivalently use a SIMD (single instruction multiple data)-like instruction to explicitly flag the parallelism <pre><code>@qasm2.extended\ndef simd_cz(controls:ilist[qasm2.Qubit],targets:ilist[qasm2.Qubit]):\n    qasm2.parallel.cz(ctrls=controls,qargs=targets)\n</code></pre> Both will ultimately emit the exact same QASM code, but the latter snippet represents the kind of parallelism that can be leveraged by reconfigurable neutral atom hardware to more efficiently execute a program.</p> <p>While in our initial release we support QASM2 as the first eDSL, we plan to use it as a compilation target instead of a programming language for long-term development. We are working on a more expressive language that will be more suitable for quantum programming in the error-corrected era.</p>"},{"location":"quick_start/circuits/#quick-example","title":"Quick Example","text":"<p>You can program kernels and quantum programs using the <code>qasm2.extended</code> decorator, such as the following Quantum Fourier Transform (QFT) circuit:</p> <pre><code>import math\nfrom bloqade import qasm2\n\n@qasm2.extended\ndef qft(qreg: qasm2.QReg, n: int):\n    if n == 0:\n        return qreg\n\n    qasm2.h(qreg[0])\n    for i in range(1, n):\n        qasm2.cu1(qreg[i], qreg[0], 2 * math.pi / 2**i)\n    qft(qreg, n - 1)\n    return qreg\n</code></pre> <p>While the syntax is similar to Python, the <code>qasm2.extended</code> decorator actually compiles the <code>qft</code> function into lower-level intermediate representation (IR) code that can be later interpreted, analyzed, or executed on quantum hardware. Observe that this function cannot immediately compile down to QASM as it takes parametrized inputs, and is called recursively.</p> <p>You can inspect the initial IR code by calling the pretty printer:</p> <pre><code>qft.print()\n</code></pre> <p></p> <p>And emit QASM2 code</p> <pre><code>from bloqade.qasm2.emit import QASM2 # the QASM2 target\nfrom bloqade.qasm2.parse import pprint # the QASM2 pretty printer\n\ntarget = QASM2()\nast = target.emit(main)\npprint(ast)\n</code></pre> <p></p>"},{"location":"quick_start/circuits/#understanding-the-compilation-process","title":"Understanding the compilation process","text":"<p>The compilation process is divided into several stages:</p> <ol> <li>Lowering: the decorator <code>qasm2.extended</code> takes the Python Abstract Syntax Tree (AST) and lowers it into Kirin IR in the Static Single Assignment (SSA) form.</li> <li>Interpretation: when invoking the PyQrack backend, the IR code is interpreted via Kirin's IR interpreter (missing link) with the PyQrack runtime backend.</li> <li>Target code generation: when emitting QASM2 code:</li> <li>The IR code gets aggressively inlined and all constant expressions are evaluated.</li> <li>All loops and control flow are unrolled.</li> <li>All compatible Python expressions (e.g <code>sin</code>, arithmetics) are translated into QASM2 expression.</li> <li>The QASM2 code is emitted as QASM2 AST for pretty printing.</li> </ol>"},{"location":"quick_start/circuits/#progressive-compilation","title":"Progressive compilation","text":"<p>As well as writing circuit executions, you can also progressively transform and compile that circuit. For example, you may want to lower arbitrary single qubit unitaries into hardware-specific unitaries, as is done in this example. For more details on the kinds of circuit-level compiler passes and how to write your own, see here</p>"},{"location":"quick_start/circuits/#dialect-groups","title":"Dialect groups","text":"<p>Bloqade provides a set of dialects (missing link) for QASM2 and our custom extensions to model parallel gates in neutral atom architectures. The basic QASM2 functionality can be enabled via</p> <pre><code>pip install bloqade[qasm2]\n</code></pre>"},{"location":"quick_start/circuits/#extended-qasm","title":"Extended QASM","text":"<p>The decorator <code>qasm2.extended</code> is a group of smaller dialects:</p> <pre><code>extended = structural_no_opt.union(\n     [\n         inline,\n         uop,\n         glob,\n         noise,\n         parallel,\n         core,\n     ]\n )\n</code></pre> <p>where <code>structural_no_opt</code> is the base dialect group that provides the basic control flow, common Python expressions (but not all), then:</p> <ul> <li><code>core</code> provides the core QASM2 operations such as register allocation, measurement and reset.</li> <li><code>uop</code> provides the unary operations, such as standard Pauli gates, rotation gates, etc.</li> </ul> <p>The following dialects are specific to neutral atom quantum computing as an extension:</p> <ul> <li><code>glob</code> provides the global gates (Rydberg specific)</li> <li><code>noise</code> provides the noise channels</li> <li><code>parallel</code> provides the parallel gate support (Rydberg specific).</li> <li><code>inline</code> dialect provides the inline QASM string</li> </ul>"},{"location":"quick_start/circuits/#strict-qasm2-mode","title":"Strict QASM2 mode","text":"<p>While the <code>qasm2.extended</code> decorator provides a lot of high-level features as an extension of QASM2, you may want to program in strict QASM2 mode for compatibility reasons. You can do this by using the <code>qasm2.main</code> and <code>qasm2.gate</code> decorators:</p> <pre><code>@qasm2.main\ndef main():\n    qasm2.h(0)\n    qasm2.cx(0, 1)\n    qasm2.measure(0)\n    qasm2.measure(1)\n    return qasm2.qreg(2)\n</code></pre> <p>which corresponding to the following QASM2 code:</p> <pre><code>OPENQASM 2.0;\ninclude \"qelib1.inc\";\n\nqreg q[2];\ncreg c[2];\n\nh q[0];\ncx q[0], q[1];\nmeasure q[0] -&gt; c[0];\nmeasure q[1] -&gt; c[1];\n</code></pre> <p>Note that the <code>return</code> values are all ignored due to lack of equivalent in QASM2.</p>"},{"location":"quick_start/circuits/API/qasm2_core/","title":"QASM2 Core","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/API/qasm2_inline_defunct/","title":"Qasm2 inline defunct","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p> <p>?? Merge with qasm2 core API to cut down on pages?</p>"},{"location":"quick_start/circuits/API/qasm2_noise/","title":"QASM2 Noise","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/API/qasm2_parallel/","title":"QASM2 Parallel","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/API/qasm2_uop/","title":"QASM2 Uop","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p> <p>?? Merge with qasm2 core API to cut down on pages?</p>"},{"location":"quick_start/circuits/compiler_passes/","title":"Index","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/compiler_passes/asap_parallelism/","title":"ASAP Parallelism","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/compiler_passes/circuit_simplification/","title":"Circuit simplification","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/compiler_passes/native_gate_rewrite/","title":"Native gate rewrite","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/interpreters_and_analysis/","title":"Index","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/interpreters_and_analysis/pyqrack_emulator/","title":"PyQrack emulator","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/interpreters_and_analysis/pyqrack_emulator/#running-simulations","title":"Running simulations","text":"<p>The program can be executed via a simulator backend, e.g. PyQrack, you can install it via</p> <pre><code>pip install bloqade-pyqrack[backend]\n</code></pre> <p>with the <code>backend</code> being one of <code>pyqrack</code>, <code>pyqrack-cpu</code>, <code>pyqrack-cuda</code> depending on the hardware and OS you have. See README for mote details.</p> <pre><code>@qasm2.extended\ndef main():\n    return qft(qasm2.qreg(3), 3)\n\ndevice = PyQrack()\nqreg = device.run(main)\nprint(qreg)\n</code></pre>"},{"location":"quick_start/circuits/interpreters_and_analysis/qasm2_codegen/","title":"QASM2 Codegen","text":"<p>Warning</p> <p>This page is under construction. The content may be incomplete or incorrect. Submit an issue on GitHub if you need help or want to contribute.</p>"},{"location":"quick_start/circuits/interpreters_and_analysis/qasm2_codegen/#emitting-qasm2-code","title":"Emitting QASM2 code","text":"<p>You can also emit QASM2 code from the IR code:</p> <pre><code>from bloqade.qasm2.emit import QASM2 # the QASM2 target\nfrom bloqade.qasm2.parse import pprint # the QASM2 pretty printer\n\ntarget = QASM2()\nast = target.emit(main)\npprint(ast)\n</code></pre> <p></p>"},{"location":"reference/","title":"API Reference","text":"<p>Use the navigation on the left to browse the full API reference of the bloqade package. The documentation is separated into all submodules of bloqade.</p>"},{"location":"reference/analog/","title":"analog","text":""},{"location":"reference/analog/#bloqade.analog.RB_C6","title":"RB_C6  <code>module-attribute</code>","text":"<pre><code>RB_C6 = 2 * pi * 862690\n</code></pre> <p>The C6 constant for the Rydberg Interaction of two Rubidium atoms in units of: rad \u03bcm^6/\u03bcs</p>"},{"location":"reference/analog/#bloqade.analog.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty [<code>ListOfLocations</code>][bloqade.ir.location.list.ListOfLocations].</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li><code>start.rydberg</code>: for [<code>Rydberg</code>][bloqade.builder.coupling.Rydberg]     Level coupling</li> <li><code>start.hyperfine</code>: for [<code>Hyperfine</code>][bloqade.builder.coupling.Hyperfine]     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li><code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li>[<code>Scalar</code>][bloqade.ir.scalar.Scalar] objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.Literal","title":"Literal","text":"<p>               Bases: <code>Real</code></p>"},{"location":"reference/analog/#bloqade.analog.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Decimal\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/analog/#bloqade.analog.Variable","title":"Variable","text":"<p>               Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/analog/#bloqade.analog.cast","title":"cast","text":"<pre><code>cast(py) -&gt; Scalar\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to [<code>Scalar Literal</code>][bloqade.ir.scalar.Literal].</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to [<code>Scalar Variable</code>][bloqade.ir.scalar.Variable].</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n    \"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n\n    Returns:\n        Scalar\n    \"\"\"\n    ret = trycast(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.constant","title":"constant","text":"<pre><code>constant(\n    duration: ScalarType, value: ScalarType\n) -&gt; Constant\n</code></pre> <p>Create a Constant waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>Duration of the Constant waveform.</p> required <code>value</code> <code>ScalarType</code> <p>Value of the Constant waveform.s</p> required <p>Returns:</p> Name Type Description <code>Constant</code> <code>Constant</code> <p>A Constant waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef constant(duration: ScalarType, value: ScalarType) -&gt; Constant:\n    \"\"\"Create a Constant waveform.\n\n    Args:\n        duration (ScalarType): Duration of the Constant waveform.\n        value (ScalarType): Value of the Constant waveform.s\n\n    Returns:\n        Constant: A Constant waveform.\n    \"\"\"\n    return Constant(value, duration)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.dumps","title":"dumps","text":"<pre><code>dumps(\n    o: Any, use_decimal: bool = True, **json_kwargs\n) -&gt; str\n</code></pre> <p>Serialize object to string</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dumps</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the serialized object as a string</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef dumps(\n    o: Any,\n    use_decimal: bool = True,\n    **json_kwargs,\n) -&gt; str:\n    \"\"\"Serialize object to string\n\n    Args:\n        o (Any): the object to serialize\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dumps\n\n    Returns:\n        str: the serialized object as a string\n    \"\"\"\n    if not isinstance(o, Serializer.types):\n        raise TypeError(\n            f\"Object of type {type(o)} is not JSON serializable. \"\n            f\"Only {Serializer.types} are supported.\"\n        )\n    return json.dumps(o, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.get_capabilities","title":"get_capabilities","text":"<pre><code>get_capabilities(\n    use_experimental: bool = False,\n) -&gt; QuEraCapabilities\n</code></pre> <p>Get the device capabilities for Aquila</p> <p>Parameters:</p> Name Type Description Default <code>use_experimental</code> <code>bool</code> <p>Get experimental capabilities instead of standard ones. By default value is False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>QuEraCapabilities</code> <code>QuEraCapabilities</code> <p>capabilities object for Aquila device.</p> Note <p>Units of time, distance, and energy are microseconds (us), micrometers (um), and rad / us, respectively.</p> <p>For a comprehensive list of capabilities, see the Hardware Reference page</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>def get_capabilities(use_experimental: bool = False) -&gt; \"QuEraCapabilities\":\n    \"\"\"Get the device capabilities for Aquila\n\n    Args:\n        use_experimental (bool): Get experimental capabilities instead of\n            standard ones. By default value is False.\n\n    Returns:\n        QuEraCapabilities: capabilities object for Aquila device.\n\n\n    Note:\n        Units of time, distance, and energy are microseconds (us),\n        micrometers (um), and rad / us, respectively.\n\n        For a comprehensive list of capabilities,\n        see the [Hardware Reference](../../reference/hardware-capabilities.md)\n        page\n    \"\"\"\n\n    from bloqade.analog.submission.capabilities import get_capabilities\n\n    # manually convert to units\n    return get_capabilities(use_experimental=use_experimental).scale_units(\n        Decimal(\"1e6\"), Decimal(\"1e-6\")\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.linear","title":"linear","text":"<pre><code>linear(\n    duration: ScalarType,\n    start: ScalarType,\n    stop: ScalarType,\n) -&gt; Linear\n</code></pre> <p>Create a Linear waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>Duration of linear waveform</p> required <code>start</code> <code>ScalarType</code> <p>Starting value of linear waveform</p> required <code>stop</code> <code>ScalarType</code> <p>Ending value of linear waveform</p> required <p>Returns:</p> Name Type Description <code>Linear</code> <code>Linear</code> <p>Linear waveform</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef linear(duration: ScalarType, start: ScalarType, stop: ScalarType) -&gt; Linear:\n    \"\"\"Create a Linear waveform.\n\n    Args:\n        duration (ScalarType): Duration of linear waveform\n        start (ScalarType): Starting value of linear waveform\n        stop (ScalarType): Ending value of linear waveform\n\n    Returns:\n        Linear: Linear waveform\n    \"\"\"\n    return Linear(start, stop, duration)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.load","title":"load","text":"<pre><code>load(\n    fp: Union[TextIO, str],\n    use_decimal: bool = True,\n    **json_kwargs\n)\n</code></pre> <p>Load object from file</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.load</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef load(fp: Union[TextIO, str], use_decimal: bool = True, **json_kwargs):\n    \"\"\"Load object from file\n\n    Args:\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.load\n\n    Returns:\n        Any: the deserialized object\n    \"\"\"\n    load_bloqade()\n    if isinstance(fp, str):\n        with open(fp, \"r\") as f:\n            return json.load(\n                f,\n                object_hook=Serializer.object_hook,\n                use_decimal=use_decimal,\n                **json_kwargs,\n            )\n    else:\n        return json.load(\n            fp,\n            object_hook=Serializer.object_hook,\n            use_decimal=use_decimal,\n            **json_kwargs,\n        )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.loads","title":"loads","text":"<pre><code>loads(s: str, use_decimal: bool = True, **json_kwargs)\n</code></pre> <p>Load object from string</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>the string to load</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.loads</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef loads(s: str, use_decimal: bool = True, **json_kwargs):\n    \"\"\"Load object from string\n\n    Args:\n        s (str): the string to load\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.loads\n\n    Returns:\n        Any: the deserialized object\n    \"\"\"\n    load_bloqade()\n    return json.loads(\n        s, object_hook=Serializer.object_hook, use_decimal=use_decimal, **json_kwargs\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise constant waveform from a list of durations and values. The value <code>duration[i]</code> corresponds to the length of time for the i'th segment with a value of <code>values[i]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not the same as the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef piecewise_constant(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform:\n    \"\"\"Create a piecewise linear waveform.\n\n    Create a piecewise constant waveform from a list of durations and values. The\n    value `duration[i]` corresponds to the length of time for the i'th segment\n    with a value of `values[i]`.\n\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n\n    Raises:\n        ValueError: If the length of `values` is not the same as the length of\n        `durations`.\n\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\n    if len(durations) != len(values):\n        raise ValueError(\n            \"The length of values must be the same as the length of durations\"\n        )\n\n    pwc_wf = None\n    for duration, value in zip(durations, values):\n        if pwc_wf is None:\n            pwc_wf = Constant(value, duration)\n        else:\n            pwc_wf = pwc_wf.append(Constant(value, duration))\n\n    return pwc_wf\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise linear waveform from a list of durations and values. The value <code>duration[i]</code> is of the linear segment between <code>values[i]</code> and <code>values[i+1]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not one greater than the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef piecewise_linear(durations: List[ScalarType], values: List[ScalarType]) -&gt; Waveform:\n    \"\"\"Create a piecewise linear waveform.\n\n    Create a piecewise linear waveform from a list of durations and values. The\n    value `duration[i]` is of the linear segment between `values[i]` and `values[i+1]`.\n\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n\n    Raises:\n        ValueError: If the length of `values` is not one greater than the length of\n        `durations`.\n\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\n\n    if len(durations) + 1 != len(values):\n        raise ValueError(\n            \"The length of values must be one greater than the length of durations\"\n        )\n\n    pwl_wf = None\n    for duration, start, stop in zip(durations, values[:-1], values[1:]):\n        if pwl_wf is None:\n            pwl_wf = Linear(start, stop, duration)\n        else:\n            pwl_wf = pwl_wf.append(Linear(start, stop, duration))\n\n    return pwl_wf\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.rydberg_h","title":"rydberg_h","text":"<pre><code>rydberg_h(\n    atoms_positions: Any,\n    detuning: Optional[Waveform] = None,\n    amplitude: Optional[Waveform] = None,\n    phase: Optional[Waveform] = None,\n    static_params: Dict[str, Any] = {},\n    batch_params: Union[\n        List[Dict[str, Any]], Dict[str, Any]\n    ] = [],\n    args: List[str] = [],\n) -&gt; Routine\n</code></pre> <p>Create a rydberg program with uniform detuning, amplitude, and phase.</p> <p>Parameters:</p> Name Type Description Default <code>atoms_positions</code> <code>Any</code> <p>Description of geometry of atoms in system.</p> required <code>detuning</code> <code>Optional[Waveform]</code> <p>Waveform for detuning. Defaults to None.</p> <code>None</code> <code>amplitude</code> <code>Optional[Waveform]</code> <p>Waveform describing the amplitude of the rabi term. Defaults to None.</p> <code>None</code> <code>phase</code> <code>Optional[Waveform]</code> <p>Waveform describing the phase of rabi term. Defaults to None.</p> <code>None</code> <code>static_params</code> <code>Dict[str, Any]</code> <p>Define static parameters of your program. Defaults to {}.</p> <code>{}</code> <code>batch_params</code> <code>Union[List[Dict[str, Any]], Dict[str, Any]]</code> <p>Parmaters for a batch of tasks. Defaults to [].</p> <code>[]</code> <code>args</code> <code>List[str]</code> <p>List of arguments to leave till runtime. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>An object that can be used to dispatch a rydberg program to multiple backends.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef rydberg_h(\n    atoms_positions: Any,\n    detuning: Optional[Waveform] = None,\n    amplitude: Optional[Waveform] = None,\n    phase: Optional[Waveform] = None,\n    static_params: Dict[str, Any] = {},\n    batch_params: Union[List[Dict[str, Any]], Dict[str, Any]] = [],\n    args: List[str] = [],\n) -&gt; Routine:\n    \"\"\"Create a rydberg program with uniform detuning, amplitude, and phase.\n\n    Args:\n        atoms_positions (Any): Description of geometry of atoms in system.\n        detuning (Optional[Waveform], optional): Waveform for detuning.\n            Defaults to None.\n        amplitude (Optional[Waveform], optional): Waveform describing the amplitude of\n            the rabi term. Defaults to None.\n        phase (Optional[Waveform], optional): Waveform describing the phase of rabi\n            term. Defaults to None.\n        static_params (Dict[str, Any], optional): Define static parameters of your\n            program. Defaults to {}.\n        batch_params (Union[List[Dict[str, Any]], Dict[str, Any]], optional):\n            Parmaters for a batch of tasks. Defaults to [].\n        args (List[str], optional): List of arguments to leave till runtime.\n            Defaults to [].\n\n    Returns:\n        Routine: An object that can be used to dispatch a rydberg program to\n            multiple backends.\n    \"\"\"\n    from bloqade.analog import start\n    from bloqade.analog.atom_arrangement import AtomArrangement\n\n    if isinstance(atoms_positions, AtomArrangement):\n        prog = atoms_positions\n    else:\n        prog = start.add_position(atoms_positions)\n\n    if detuning is not None:\n        prog = prog.rydberg.detuning.uniform.apply(detuning)\n\n    if amplitude is not None:\n        prog = prog.amplitude.uniform.apply(amplitude)\n\n    if phase is not None:\n        prog = prog.phase.uniform.apply(phase)\n\n    prog = prog.assign(**static_params)\n\n    if isinstance(batch_params, dict):\n        prog = prog.batch_assign(**batch_params)\n    else:\n        prog = prog.batch_assign(batch_params)\n\n    prog = prog.args(args)\n\n    return prog.parse()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.save","title":"save","text":"<pre><code>save(\n    o: Any,\n    fp: Union[TextIO, str],\n    use_decimal=True,\n    **json_kwargs\n) -&gt; None\n</code></pre> <p>Serialize object to file</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef save(\n    o: Any,\n    fp: Union[TextIO, str],\n    use_decimal=True,\n    **json_kwargs,\n) -&gt; None:\n    \"\"\"Serialize object to file\n\n    Args:\n        o (Any): the object to serialize\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dump\n\n    Returns:\n        None\n    \"\"\"\n    if not isinstance(o, Serializer.types):\n        raise TypeError(\n            f\"Object of type {type(o)} is not JSON serializable. \"\n            f\"Only {Serializer.types} are supported.\"\n        )\n    if isinstance(fp, str):\n        with open(fp, \"w\") as f:\n            json.dump(o, f, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n    else:\n        json.dump(o, fp, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.tree_depth","title":"tree_depth","text":"<pre><code>tree_depth(depth: int = None)\n</code></pre> <p>Setting globally maximum depth for tree printing</p> <p>If <code>depth=None</code>, return current depth. If <code>depth</code> is provided, setting current depth to <code>depth</code></p> <p>Parameters:</p> Name Type Description Default <code>depth</code> <code>int</code> <p>the user specified depth. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>current updated depth</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/__init__.py</code> <pre><code>def tree_depth(depth: int = None):\n    \"\"\"Setting globally maximum depth for tree printing\n\n    If `depth=None`, return current depth.\n    If `depth` is provided, setting current depth to `depth`\n\n    Args:\n        depth (int, optional): the user specified depth. Defaults to None.\n\n    Returns:\n        int: current updated depth\n    \"\"\"\n    if depth is not None:\n        _ir.tree_print.MAX_TREE_DEPTH = depth\n    return _ir.tree_print.MAX_TREE_DEPTH\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.var","title":"var","text":"<pre><code>var(py: str) -&gt; Variable\n</code></pre> <p>cast string (or list/tuple of strings) to [<code>Variable</code>][bloqade.ir.scalar.Variable].</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n    \"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n\n    Returns:\n       Union[Variable]\n    \"\"\"\n    ret = tryvar(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Variable\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement","title":"atom_arrangement","text":""},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement","title":"AtomArrangement","text":"<pre><code>AtomArrangement(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims: int\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.add_position","title":"add_position","text":"<pre><code>add_position(\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[\n        Union[BoolArray, List[bool], bool]\n    ] = None,\n) -&gt; ListOfLocations\n</code></pre> <p>Add a position or multiple positions to a pre-existing geometry.</p> <p><code>add_position</code> is capable of accepting: - A single tuple for one atom coordinate: <code>(1.0, 2.5)</code> - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.] - A numpy array of shape (N, 2) where N is the number of atoms</p> <p>You may also intersperse variables anywhere a value may be present.</p> <p>You can also pass in an optional argument which determines the atom \"filling\" (whether or not at a specified coordinate an atom should be present).</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.add_position--usage-example","title":"Usage Example:","text":"<pre><code># single coordinate\n&gt;&gt;&gt; reg = start.add_position((0,0))\n# you may chain add_position calls\n&gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n# you can add variables anywhere a value may be present\n&gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n# and specify your atom fillings\n&gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n[True, False])\n# alternatively you could use one boolean to specify\n# all coordinates should be empty/filled\n&gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n(5.2, 2.2)], False)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def add_position(\n    self,\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[Union[BoolArray, List[bool], bool]] = None,\n) -&gt; \"ListOfLocations\":\n    \"\"\"\n    Add a position or multiple positions to a pre-existing geometry.\n\n    `add_position` is capable of accepting:\n    - A single tuple for one atom coordinate: `(1.0, 2.5)`\n    - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.]\n    - A numpy array of shape (N, 2) where N is the number of atoms\n\n    You may also intersperse variables anywhere a value may be present.\n\n    You can also pass in an optional argument which determines the atom \"filling\"\n    (whether or not at a specified coordinate an atom should be present).\n\n    ### Usage Example:\n    ```\n    # single coordinate\n    &gt;&gt;&gt; reg = start.add_position((0,0))\n    # you may chain add_position calls\n    &gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n    # you can add variables anywhere a value may be present\n    &gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n    # and specify your atom fillings\n    &gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n    [True, False])\n    # alternatively you could use one boolean to specify\n    # all coordinates should be empty/filled\n    &gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n    (5.2, 2.2)], False)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`: to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`: to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    if is_bearable(position, PositionArray) and is_bearable(\n        filling, Optional[BoolArray]\n    ):\n        return self.add_position_ndarray(position, filling)\n    elif is_bearable(position, List[Tuple[ScalarType, ScalarType]]) and is_bearable(\n        filling, Optional[List[bool]]\n    ):\n        return self.add_position_list_tuples(position, filling)\n    elif is_bearable(position, Tuple[ScalarType, ScalarType]) and is_bearable(\n        filling, Optional[bool]\n    ):\n        return self.add_position_single_tupe(position, filling)\n    else:\n        raise TypeError(\"Invalid input types for add_position provided!\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.apply_defect_count","title":"apply_defect_count","text":"<pre><code>apply_defect_count(\n    n_defects: int, rng: Generator = np.random.default_rng()\n)\n</code></pre> <p>Drop <code>n_defects</code> atoms from the geometry randomly. Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.apply_defect_count--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n# you may also chain apply_defect_count calls\n&gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n# you can also use apply_defect_count on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>:     to add more positions</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_density(defect_probability)</code>:     to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>:     to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify     Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>:     to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>:     shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_count(\n    self, n_defects: int, rng: np.random.Generator = np.random.default_rng()\n):\n    \"\"\"\n    Drop `n_defects` atoms from the geometry randomly. Internally this occurs\n    by setting certain sites to have a SiteFilling set to false indicating\n    no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n    # you may also chain apply_defect_count calls\n    &gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n    # you can also use apply_defect_count on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n            to add more positions\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_count(n_defects)`: to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_density(defect_probability)`:\n            to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n            to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`: to specify\n            Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n            to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n            shows your geometry in your web browser\n    \"\"\"\n\n    location_list = []\n    for location_info in self.enumerate():\n        location_list.append(location_info)\n\n    filled_sites = []\n\n    for index, location_info in enumerate(location_list):\n        if location_info.filling is SiteFilling.filled:\n            filled_sites.append(index)\n\n    if n_defects &gt;= len(filled_sites):\n        raise ValueError(\n            f\"n_defects {n_defects} must be less than the number of filled sites \"\n            f\"({len(filled_sites)})\"\n        )\n\n    for _ in range(n_defects):\n        index = rng.choice(filled_sites)\n        location_list[index] = LocationInfo.create(\n            location_list[index].position,\n            (False if location_list[index].filling is SiteFilling.filled else True),\n        )\n        filled_sites.remove(index)\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.apply_defect_density","title":"apply_defect_density","text":"<pre><code>apply_defect_density(\n    defect_probability: float,\n    rng: Generator = np.random.default_rng(),\n)\n</code></pre> <p>Drop atoms randomly with <code>defect_probability</code> probability (range of 0 to 1). Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.apply_defect_density--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n# you may also chain apply_defect_density calls\n&gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n# you can also use apply_defect_density on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n.apply_defect_density(0.5, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>: to add more positions</li> <li><code>...apply_defect_count(defect_counts).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts) .apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_density(\n    self,\n    defect_probability: float,\n    rng: np.random.Generator = np.random.default_rng(),\n):\n    \"\"\"\n    Drop atoms randomly with `defect_probability` probability (range of 0 to 1).\n    Internally this occurs by setting certain sites to have a SiteFilling\n    set to false indicating no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n    # you may also chain apply_defect_density calls\n    &gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n    # you can also use apply_defect_density on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n    .apply_defect_density(0.5, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n        to add more positions\n        - `...apply_defect_count(defect_counts).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n        .apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n        to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`:\n        to specify Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n        shows your geometry in your web browser\n    \"\"\"\n\n    p = min(1, max(0, defect_probability))\n    location_list = []\n\n    for location_info in self.enumerate():\n        if rng.random() &lt; p:\n            location_list.append(\n                LocationInfo.create(\n                    location_info.position,\n                    (\n                        False\n                        if location_info.filling is SiteFilling.filled\n                        else True\n                    ),\n                )\n            )\n        else:\n            location_list.append(location_info)\n\n    return ListOfLocations(location_list=location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    \"\"\"enumerate all locations in the register.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    return get_atom_arrangement_figure(self, fig_kwargs=fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.rydberg_interaction","title":"rydberg_interaction","text":"<pre><code>rydberg_interaction(**assignments) -&gt; NDArray\n</code></pre> <p>calculate the Rydberg interaction matrix.</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>the values to assign to the variables in the register.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>NDArray</code> <code>NDArray</code> <p>the Rydberg interaction matrix in the lower triangular form.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def rydberg_interaction(self, **assignments) -&gt; NDArray:\n    \"\"\"calculate the Rydberg interaction matrix.\n\n    Args:\n        **assignments: the values to assign to the variables in the register.\n\n    Returns:\n        NDArray: the Rydberg interaction matrix in the lower triangular form.\n\n    \"\"\"\n\n    from bloqade.analog.constants import RB_C6\n\n    # calculate the Interaction matrix\n    V_ij = np.zeros((self.n_sites, self.n_sites))\n    for i, site_i in enumerate(self.enumerate()):\n        pos_i = np.array([float(ele(**assignments)) for ele in site_i.position])\n\n        for j, site_j in enumerate(self.enumerate()):\n            if j &gt;= i:\n                break  # enforce lower triangular form\n\n            pos_j = np.array([float(ele(**assignments)) for ele in site_j.position])\n            r_ij = np.linalg.norm(pos_i - pos_j)\n\n            V_ij[i, j] = RB_C6 / r_ij**6\n\n    return V_ij\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.scale","title":"scale","text":"<pre><code>scale(scale: ScalarType)\n</code></pre> <p>Scale the geometry of your atoms.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.scale--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n# atom positions are now (0,0), (2,2)\n&gt;&gt;&gt; new_reg = reg.scale(2)\n# you may also use scale on pre-defined geometries\n&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n# atoms in the chain will now be 2 um apart versus\n# the default 1 um\n&gt;&gt;&gt; Chain(11).scale(2)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef scale(self, scale: ScalarType):\n    \"\"\"\n    Scale the geometry of your atoms.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n    # atom positions are now (0,0), (2,2)\n    &gt;&gt;&gt; new_reg = reg.scale(2)\n    # you may also use scale on pre-defined geometries\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    # atoms in the chain will now be 2 um apart versus\n    # the default 1 um\n    &gt;&gt;&gt; Chain(11).scale(2)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`:\n        to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    scale = cast(scale)\n    location_list = []\n    for location_info in self.enumerate():\n        x, y = location_info.position\n        new_position = (scale * x, scale * y)\n        location_list.append(\n            LocationInfo.create(new_position, bool(location_info.filling.value))\n        )\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.AtomArrangement.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Chain","title":"Chain","text":"<pre><code>Chain(\n    L: int,\n    *,\n    lattice_spacing: ScalarType = 1.0,\n    vertical_chain: bool = False\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L: int, *, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\n    self.L = L\n    self.lattice_spacing = cast(lattice_spacing)\n    self.vertical_chain = vertical_chain\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (1/2, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = L1 * L1 * 2.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells in direction a2. n_atoms = L1 * L2 * 2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Kagome","title":"Kagome","text":"<pre><code>Kagome(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = 3 * L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Lieb","title":"Lieb","text":"<pre><code>Lieb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = 3* L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations","title":"ListOfLocations","text":"<pre><code>ListOfLocations(\n    location_list: List[\n        Union[LocationInfo, Tuple[ScalarType, ScalarType]]\n    ] = [],\n)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    location_list: List[Union[LocationInfo, Tuple[ScalarType, ScalarType]]] = [],\n):\n    self.location_list = []\n    for ele in location_list:\n        if isinstance(ele, LocationInfo):\n            self.location_list.append(ele)\n        else:\n            self.location_list.append(LocationInfo.create(ele, True))\n\n    if self.location_list:\n        self.__n_atoms = sum(\n            1 for loc in self.location_list if loc.filling == SiteFilling.filled\n        )\n        self.__n_sites = len(self.location_list)\n        self.__n_vacant = self.__n_sites - self.__n_atoms\n        self.__n_dims = len(self.location_list[0].position)\n    else:\n        self.__n_sites = 0\n        self.__n_atoms = 0\n        self.__n_dims = None\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.ListOfLocations.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self):\n    return iter(self.location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0,\n):\n    self.width = width\n    self.height = height\n    self.lattice_spacing_x = cast(lattice_spacing_x)\n    self.lattice_spacing_y = (\n        cast(lattice_spacing_y)\n        if lattice_spacing_y is not None\n        else self.lattice_spacing_x\n    )\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Square","title":"Square","text":"<pre><code>Square(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites in direction a2. n_atoms = L1 * L2, default is L1</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.atom_arrangement.Triangular","title":"Triangular","text":"<pre><code>Triangular(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites along a2 direction, n_atoms = L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder","title":"builder","text":""},{"location":"reference/analog/#bloqade.analog.builder.backend","title":"backend","text":""},{"location":"reference/analog/#bloqade.analog.builder.backend.BackendRoute","title":"BackendRoute","text":"<pre><code>BackendRoute(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>QuEraService</code>, <code>BraketService</code>, <code>BloqadeService</code></p> <p>Specify the backend to run your program on via a string (versus more formal builder syntax) of specifying the vendor/product first (Bloqade/Braket) and narrowing it down (e.g: ...device(\"quera.aquila\") versus ...quera.aquila()) - You can pass the following arguments:     - <code>\"braket.aquila\"</code>     - <code>\"braket.local_emulator\"</code>     - <code>\"bloqade.python\"</code>     - <code>\"bloqade.julia\"</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.bloqade","title":"bloqade","text":""},{"location":"reference/analog/#bloqade.analog.builder.backend.bloqade.BloqadeDeviceRoute","title":"BloqadeDeviceRoute","text":"<pre><code>BloqadeDeviceRoute(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.bloqade.BloqadeDeviceRoute.python","title":"python","text":"<pre><code>python()\n</code></pre> <p>Specify the Bloqade Python backend.</p> <ul> <li>Possible Next Steps:<ul> <li><code>...python().run(shots)</code>:     to submit to the python emulator and await results</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/bloqade.py</code> <pre><code>def python(self):\n    \"\"\"\n    Specify the Bloqade Python backend.\n\n    - Possible Next Steps:\n        - `...python().run(shots)`:\n            to submit to the python emulator and await results\n    \"\"\"\n    return self.parse().bloqade.python()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.bloqade.BloqadeService","title":"BloqadeService","text":"<pre><code>BloqadeService(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.bloqade.BloqadeService.bloqade","title":"bloqade  <code>property</code>","text":"<pre><code>bloqade\n</code></pre> <p>Specify the Bloqade backend.</p> <ul> <li>Possible Next Steps:<ul> <li><code>...bloqade.python()</code>: target submission to the Bloqade python backend</li> <li><code>...bloqade.julia()</code>: (CURRENTLY NOT IMPLEMENTED!)target     submission to the Bloqade.jl backend</li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket","title":"braket","text":""},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketDeviceRoute","title":"BraketDeviceRoute","text":"<pre><code>BraketDeviceRoute(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketDeviceRoute.aquila","title":"aquila","text":"<pre><code>aquila() -&gt; BraketHardwareRoutine\n</code></pre> <p>Specify QuEra's Aquila QPU on Braket to submit your program to.</p> <p>The number of shots you specify in the subsequent <code>.run</code> method will either:     - dictate the number of times your program is run     - dictate the number of times per parameter your program is run if       you have a variable with batch assignments/intend to conduct       a parameter sweep</p> <ul> <li>Possible next steps are:<ul> <li><code>...aquila().run(shots)</code>: To submit to hardware and WAIT for     results (blocking)</li> <li><code>...aquila().run_async(shots)</code>: To submit to hardware and immediately     allow for other operations to occur</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/braket.py</code> <pre><code>def aquila(self) -&gt; \"BraketHardwareRoutine\":\n    \"\"\"\n    Specify QuEra's Aquila QPU on Braket to submit your program to.\n\n    The number of shots you specify in the subsequent `.run` method will either:\n        - dictate the number of times your program is run\n        - dictate the number of times per parameter your program is run if\n          you have a variable with batch assignments/intend to conduct\n          a parameter sweep\n\n\n    - Possible next steps are:\n        - `...aquila().run(shots)`: To submit to hardware and WAIT for\n            results (blocking)\n        - `...aquila().run_async(shots)`: To submit to hardware and immediately\n            allow for other operations to occur\n    \"\"\"\n    return self.parse().braket.aquila()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketDeviceRoute.device","title":"device","text":"<pre><code>device(device_arn) -&gt; BraketHardwareRoutine\n</code></pre> <p>Specify QPU based on the device ARN on Braket to submit your program to.</p> <p>The number of shots you specify in the subsequent <code>.run</code> method will either:     - dictate the number of times your program is run     - dictate the number of times per parameter your program is run if         you have a variable with batch assignments/intend to conduct         a parameter sweep</p> <ul> <li>Possible next steps are:<ul> <li><code>...device(arn).run(shots)</code>: To submit to hardware and WAIT for     results (blocking)</li> <li><code>...device(arn).run_async(shots)</code>: To submit to hardware and immediately     allow for other operations to occur</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/braket.py</code> <pre><code>def device(self, device_arn) -&gt; \"BraketHardwareRoutine\":\n    \"\"\"\n    Specify QPU based on the device ARN on Braket to submit your program to.\n\n    The number of shots you specify in the subsequent `.run` method will either:\n        - dictate the number of times your program is run\n        - dictate the number of times per parameter your program is run if\n            you have a variable with batch assignments/intend to conduct\n            a parameter sweep\n\n\n    - Possible next steps are:\n        - `...device(arn).run(shots)`: To submit to hardware and WAIT for\n            results (blocking)\n        - `...device(arn).run_async(shots)`: To submit to hardware and immediately\n            allow for other operations to occur\n    \"\"\"\n    return self.parse().braket.device(device_arn)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketDeviceRoute.local_emulator","title":"local_emulator","text":"<pre><code>local_emulator() -&gt; BraketLocalEmulatorRoutine\n</code></pre> <p>Specify the Braket local emulator to submit your program to.</p> <ul> <li>The number of shots you specify in the subsequent <code>.run</code> method will either:<ul> <li>dictate the number of times your program is run</li> <li>dictate the number of times per parameter your program is run if   you have a variable with batch assignments/intend to   conduct a parameter sweep</li> </ul> </li> <li>Possible next steps are:<ul> <li><code>...local_emulator().run(shots)</code>: to submit to the emulator     and await results</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/braket.py</code> <pre><code>def local_emulator(self) -&gt; \"BraketLocalEmulatorRoutine\":\n    \"\"\"\n    Specify the Braket local emulator to submit your program to.\n\n    - The number of shots you specify in the subsequent `.run` method will either:\n        - dictate the number of times your program is run\n        - dictate the number of times per parameter your program is run if\n          you have a variable with batch assignments/intend to\n          conduct a parameter sweep\n    - Possible next steps are:\n        - `...local_emulator().run(shots)`: to submit to the emulator\n            and await results\n\n    \"\"\"\n    return self.parse().braket.local_emulator()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketService","title":"BraketService","text":"<pre><code>BraketService(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.braket.BraketService.braket","title":"braket  <code>property</code>","text":"<pre><code>braket\n</code></pre> <p>Specify the Braket backend. This allows you to access the AWS Braket local emulator OR go submit things to QuEra hardware on AWS Braket service.</p> <ul> <li>Possible Next Steps are:<ul> <li><code>...braket.aquila()</code>: target submission to the QuEra Aquila QPU</li> <li><code>...braket.local_emulator()</code>: target submission to the Braket local emulator</li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera","title":"quera","text":""},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute","title":"QuEraDeviceRoute","text":"<pre><code>QuEraDeviceRoute(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute.aquila","title":"aquila","text":"<pre><code>aquila()\n</code></pre> <p>Specify QuEra's Aquila QPU</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/quera.py</code> <pre><code>def aquila(self):\n    \"\"\"\n    Specify QuEra's Aquila QPU\n\n    Return:\n        QuEraHardwareRoutine\n\n\n    - Possible Next:\n\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n\n\n    \"\"\"\n    return self.parse().quera.aquila()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute.cloud_mock","title":"cloud_mock","text":"<pre><code>cloud_mock()\n</code></pre> <p>Specify QuEra's Remote Mock QPU</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/quera.py</code> <pre><code>def cloud_mock(self):\n    \"\"\"\n    Specify QuEra's Remote Mock QPU\n\n    Return:\n        QuEraHardwareRoutine\n\n    - Possible Next:\n\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n\n\n\n    \"\"\"\n    return self.parse().quera.cloud_mock()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute.custom","title":"custom","text":"<pre><code>custom()\n</code></pre> <p>Specify custom backend</p> Return <p>CustomSubmissionRoutine</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/quera.py</code> <pre><code>def custom(self):\n    \"\"\"\n    Specify custom backend\n\n    Return:\n        CustomSubmissionRoutine\n\n    \"\"\"\n\n    return self.parse().quera.custom()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute.device","title":"device","text":"<pre><code>device(config_file: Optional[str] = None, **api_config)\n</code></pre> <p>Specify QuEra's QPU device,</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>file that speficy the target hardware</p> <code>None</code> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...device().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...device().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...device().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/quera.py</code> <pre><code>def device(self, config_file: Optional[str] = None, **api_config):\n    \"\"\"\n    Specify QuEra's QPU device,\n\n    Args:\n        config_file (str): file that speficy the target hardware\n\n    Return:\n        QuEraHardwareRoutine\n\n    - Possible Next:\n\n        -&gt; `...device().submit`\n            :: submit aync remote job\n\n        -&gt; `...device().run`\n            :: submit job and wait until job finished\n            and results returned\n\n        -&gt; `...device().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n\n\n    \"\"\"\n    return self.parse().quera.device(config_file, **api_config)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraDeviceRoute.mock","title":"mock","text":"<pre><code>mock(\n    state_file: str = \".mock_state.txt\",\n    submission_error: bool = False,\n)\n</code></pre> <p>Specify mock, testing locally.</p> Return <p>QuEraHardwareRoutine</p> <ul> <li> <p>Possible Next:</p> <p>-&gt; <code>...aquila().submit</code>     :: submit aync remote job</p> <p>-&gt; <code>...aquila().run</code>     :: submit job and wait until job finished     and results returned</p> <p>-&gt; <code>...aquila().__callable__</code>     :: submit job and wait until job finished     and results returned</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/backend/quera.py</code> <pre><code>def mock(self, state_file: str = \".mock_state.txt\", submission_error: bool = False):\n    \"\"\"\n    Specify mock, testing locally.\n\n    Return:\n        QuEraHardwareRoutine\n\n    - Possible Next:\n\n        -&gt; `...aquila().submit`\n            :: submit aync remote job\n\n        -&gt; `...aquila().run`\n            :: submit job and wait until job finished\n            and results returned\n\n        -&gt; `...aquila().__callable__`\n            :: submit job and wait until job finished\n            and results returned\n\n\n\n    \"\"\"\n    return self.parse().quera.mock(\n        state_file=state_file, submission_error=submission_error\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraService","title":"QuEraService","text":"<pre><code>QuEraService(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.backend.quera.QuEraService.quera","title":"quera  <code>property</code>","text":"<pre><code>quera\n</code></pre> <ul> <li>Specify Quera backend</li> <li> <p>Possible Next:</p> <p>-&gt; <code>...quera.aquila</code>     :: Aquila QPU</p> <p>-&gt; <code>...quera.mock</code>     :: mock backend, meant for testings</p> <p>-&gt; <code>...quera.device</code>     :: QuEra QPU, specifiy by config_file</p> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.coupling","title":"coupling","text":""},{"location":"reference/analog/#bloqade.analog.builder.coupling.Hyperfine","title":"Hyperfine","text":"<pre><code>Hyperfine(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>LevelCoupling</code></p> <p>This node represents level coupling between hyperfine states.</p> <p>Examples:</p> <pre><code>- To reach the node from the start node:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.coupling.Hyperfine'&gt;\n\n- Hyperfine level coupling has two reachable field nodes:\n\n    - detuning term (See also [`Detuning`][bloqade.builder.field.Detuning])\n    - rabi term (See also [`Rabi`][bloqade.builder.field.Rabi])\n\n&gt;&gt;&gt; hyp_detune = bloqade.start.hyperfine.detuning\n&gt;&gt;&gt; hyp_rabi = bloqade.start.hyperfine.rabi\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.Hyperfine.__bloqade_ir__","title":"__bloqade_ir__","text":"<pre><code>__bloqade_ir__()\n</code></pre> <p>Generate the intermediate representation (IR) for the Hyperfine level coupling.</p> <p>Returns:</p> Name Type Description <code>IR</code> <p>An intermediate representation of the Hyperfine level coupling sequence.</p> Note <p>This method is used internally by the Bloqade framework.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/coupling.py</code> <pre><code>def __bloqade_ir__(self):\n    \"\"\"\n    Generate the intermediate representation (IR) for the Hyperfine level coupling.\n\n    Args:\n        None\n\n    Returns:\n        IR: An intermediate representation of the Hyperfine level coupling sequence.\n\n    Raises:\n        None\n\n    Note:\n        This method is used internally by the Bloqade framework.\n    \"\"\"\n    from bloqade.analog.ir.control.sequence import hyperfine\n\n    return hyperfine\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.LevelCoupling","title":"LevelCoupling","text":"<pre><code>LevelCoupling(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.LevelCoupling.detuning","title":"detuning  <code>property</code>","text":"<pre><code>detuning: Detuning\n</code></pre> <p>Specify the [<code>Detuning</code>][bloqade.builder.field.Detuning] [<code>Field</code>][bloqade.builder.field.Field] of your program. You will be able to specify the spatial modulation afterwards.</p> <p>Returns:</p> Type Description <code>Detuning</code> <p>[<code>Detuning</code>][bloqade.builder.field.Detuning]: A program node representing the detuning field.</p> Note <p>The detuning specifies how off-resonant the laser being applied to the atoms is from the atomic energy transition, driven by the Rabi frequency.</p> <p>Example:     <pre><code>from bloqade import start\ngeometry = start.add_position((0,0))\ncoupling = geometry.rydberg\ncoupling.detuning\n</code></pre></p> <ul> <li>Next Possible Steps You may continue building your program via:</li> <li>[<code>uniform</code>][bloqade.builder.field.Detuning.uniform]: To address all atoms in the field</li> <li>[<code>location(locations, scales)</code>][bloqade.builder.field.Detuning.location]: To address atoms at specific locations via indices</li> <li>[<code>scale(coeffs)</code>][bloqade.builder.field.Detuning.scale]: To address all atoms with an individual scale factor</li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.LevelCoupling.rabi","title":"rabi  <code>property</code>","text":"<pre><code>rabi: Rabi\n</code></pre> <p>Specify the complex-valued [<code>Rabi</code>][bloqade.builder.field.Rabi] field of your program.</p> <p>The Rabi field is composed of a real-valued Amplitude and Phase field.</p> <p>Returns:</p> Name Type Description <code>Rabi</code> <code>Rabi</code> <p>A program node representing the Rabi field.</p> Note <p>Next possible steps to build your program are creating the RabiAmplitude field and RabiPhase field of the field: - <code>...rabi.amplitude</code>: To create the Rabi amplitude field - <code>...rabi.phase</code>: To create the Rabi phase field</p>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.Rydberg","title":"Rydberg","text":"<pre><code>Rydberg(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>LevelCoupling</code></p> <p>This node represents level coupling of the Rydberg state.</p> <p>Examples:</p> <pre><code>- To reach the node from the start node:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.coupling.Rydberg'&gt;\n\n- Rydberg level coupling has two reachable field nodes:\n\n    - detuning term (See also [`Detuning`][bloqade.builder.field.Detuning])\n    - rabi term (See also [`Rabi`][bloqade.builder.field.Rabi])\n\n&gt;&gt;&gt; ryd_detune = bloqade.start.rydberg.detuning\n&gt;&gt;&gt; ryd_rabi = bloqade.start.rydberg.rabi\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.coupling.Rydberg.__bloqade_ir__","title":"__bloqade_ir__","text":"<pre><code>__bloqade_ir__()\n</code></pre> <p>Generate the intermediate representation (IR) for the Rydberg level coupling.</p> <p>Returns:</p> Name Type Description <code>IR</code> <p>An intermediate representation of the Rydberg level coupling sequence.</p> Note <p>This method is used internally by the Bloqade framework.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/coupling.py</code> <pre><code>def __bloqade_ir__(self):\n    \"\"\"\n    Generate the intermediate representation (IR) for the Rydberg level coupling.\n\n    Args:\n        None\n\n    Returns:\n        IR: An intermediate representation of the Rydberg level coupling sequence.\n\n    Raises:\n        None\n\n    Note:\n        This method is used internally by the Bloqade framework.\n    \"\"\"\n    from bloqade.analog.ir.control.sequence import rydberg\n\n    return rydberg\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.drive","title":"drive","text":""},{"location":"reference/analog/#bloqade.analog.builder.drive.Drive","title":"Drive","text":""},{"location":"reference/analog/#bloqade.analog.builder.drive.Drive.hyperfine","title":"hyperfine  <code>property</code>","text":"<pre><code>hyperfine: Hyperfine\n</code></pre> <p>Address the Hyperfine level coupling in your program.</p> <ul> <li>Next possible steps to build your program are specifying the   [<code>Rabi</code>][bloqade.builder.field.Rabi] field or   [<code>Detuning</code>][bloqade.builder.field.Detuning] field.<ul> <li><code>...hyperfine.rabi</code>: for Rabi field</li> <li><code>...hyperfine.detuning</code>: for Detuning field</li> </ul> </li> <li>In the absence of a field you the value is set to zero by default.</li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.drive.Drive.rydberg","title":"rydberg  <code>property</code>","text":"<pre><code>rydberg: Rydberg\n</code></pre> <p>Address the Rydberg level coupling in your program.</p> <ul> <li>Next possible steps to build your program are specifying the   [<code>Rabi</code>][bloqade.builder.field.Rabi] field or   [<code>Detuning</code>][bloqade.builder.field.Detuning] field.<ul> <li><code>...rydberg.rabi</code>: for Rabi field</li> <li><code>...rydberg.detuning</code>: for Detuning field</li> </ul> </li> <li>In the absence of a field you the value is set to zero by default.</li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.field","title":"field","text":""},{"location":"reference/analog/#bloqade.analog.builder.field.Detuning","title":"Detuning","text":"<pre><code>Detuning(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Field</code></p> <p>This node represent detuning field of a specified level coupling (rydberg or hyperfine) type.</p> <p>Examples:</p> <pre><code>- To specify detuning of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.detuning\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Detuning'&gt;\n\n- To specify detuning of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.detuning\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Detuning'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See [<code>SpatialModulation</code>][bloqade.builder.field.SpatialModulation] for additional options.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field","title":"Field","text":"<pre><code>Field(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field.uniform","title":"uniform  <code>property</code>","text":"<pre><code>uniform: Uniform\n</code></pre> <p>Address all atoms as part of defining the spatial modulation component of a drive.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.).</p> <ul> <li>You can now do:<ul> <li><code>...uniform.linear(start, stop, duration)</code> : to apply a linear waveform</li> <li><code>...uniform.constant(value, duration)</code> : to apply a constant waveform</li> <li><code>...uniform.poly([coefficients], duration)</code> : to apply a     polynomial waveform</li> <li><code>...uniform.apply(wf:bloqade.ir.Waveform)</code>: to apply a pre-defined waveform</li> <li><code>...uniform.piecewise_linear([durations], [values])</code>:  to apply a piecewise linear waveform</li> <li><code>...uniform.piecewise_constant([durations], [values])</code>: to apply a piecewise constant waveform</li> <li><code>...uniform.fn(f(t,...))</code>: to apply a function as a waveform</li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field.location","title":"location","text":"<pre><code>location(\n    labels: Union[List[int], int],\n    scales: Union[\n        List[ScalarType], ScalarType, None\n    ] = None,\n) -&gt; Location\n</code></pre> <p>Address a single atom (or multiple) atoms.</p> <p>Address a single atom (or multiple) as part of defining the spatial modulation component of a drive. You can specify the atoms to target as a list of labels and a list of scales. The scales are used to multiply the waveform that is applied to the atom. You can also specify a single label and scale to target a single atom.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field. (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)</p>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field.location--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n# to target a single atom with a waveform\n&gt;&gt;&gt; one_location_prog = prog.location(0)\n# to target a single atom with a scale\n&gt;&gt;&gt; one_location_prog = prog.location(0, 0.5)\n# to target multiple atoms with same waveform\n&gt;&gt;&gt; multi_location_prog = prog.location([0, 2])\n# to target multiple atoms with different scales\n&gt;&gt;&gt; multi_location_prog = prog.location([0, 2], [0.5, \"scale\"])\n</code></pre> <ul> <li>You can now do:<ul> <li><code>...location(labels, scales).linear(start, stop, duration)</code> : to apply     a linear waveform</li> <li><code>...location(labels, scales).constant(value, duration)</code> : to apply     a constant waveform</li> <li><code>...location(labels, scales).poly([coefficients], duration)</code> : to apply     a polynomial waveform</li> <li><code>...location(labels, scales).apply(wf:bloqade.ir.Waveform)</code>: to apply     a pre-defined waveform</li> <li><code>...location(labels, scales).piecewise_linear([durations], [values])</code>:     to apply     a piecewise linear waveform</li> <li><code>...location(labels, scales).piecewise_constant([durations], [values])</code>:     to apply     a piecewise constant waveform</li> <li><code>...location(labels, scales).fn(f(t,..))</code>: to apply a function as a     waveform</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/field.py</code> <pre><code>def location(\n    self,\n    labels: Union[List[int], int],\n    scales: Union[List[ScalarType], ScalarType, None] = None,\n) -&gt; \"Location\":\n    \"\"\"Address a single atom (or multiple) atoms.\n\n    Address a single atom (or multiple) as part of defining the spatial\n    modulation component of a drive. You can specify the atoms to target\n    as a list of labels and a list of scales. The scales are used to\n    multiply the waveform that is applied to the atom. You can also specify\n    a single label and scale to target a single atom.\n\n    Next steps to build your program include choosing the waveform that\n    will be summed with the spatial modulation to create a drive.\n\n    The drive by itself, or the sum of subsequent drives (created by just\n    chaining the construction of drives) will become the field.\n    (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n    # to target a single atom with a waveform\n    &gt;&gt;&gt; one_location_prog = prog.location(0)\n    # to target a single atom with a scale\n    &gt;&gt;&gt; one_location_prog = prog.location(0, 0.5)\n    # to target multiple atoms with same waveform\n    &gt;&gt;&gt; multi_location_prog = prog.location([0, 2])\n    # to target multiple atoms with different scales\n    &gt;&gt;&gt; multi_location_prog = prog.location([0, 2], [0.5, \"scale\"])\n    ```\n\n    - You can now do:\n        - `...location(labels, scales).linear(start, stop, duration)` : to apply\n            a linear waveform\n        - `...location(labels, scales).constant(value, duration)` : to apply\n            a constant waveform\n        - `...location(labels, scales).poly([coefficients], duration)` : to apply\n            a polynomial waveform\n        - `...location(labels, scales).apply(wf:bloqade.ir.Waveform)`: to apply\n            a pre-defined waveform\n        - `...location(labels, scales).piecewise_linear([durations], [values])`:\n            to apply\n            a piecewise linear waveform\n        - `...location(labels, scales).piecewise_constant([durations], [values])`:\n            to apply\n            a piecewise constant waveform\n        - `...location(labels, scales).fn(f(t,..))`: to apply a function as a\n            waveform\n\n    \"\"\"\n    return self._location(labels, scales)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field.scale","title":"scale","text":"<pre><code>scale(coeffs: Union[str, List[ScalarType]]) -&gt; Scale\n</code></pre> <p>Address all the atoms scaling each atom with an element of the list or define a variable name for the scale list to be assigned later by defining a <code>name</code> and using <code>assign</code> or <code>batch_assign</code> later.</p> <p>Next steps to build your program include choosing the waveform that will be summed with the spatial modulation to create a drive.</p> <p>The drive by itself, or the sum of subsequent drives (created by just chaining the construction of drives) will become the field (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)</p>"},{"location":"reference/analog/#bloqade.analog.builder.field.Field.scale--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n\n# assign a literal list of values to scale each atom\n&gt;&gt;&gt; one_location_prog = prog.scale([0.1, 0.2, 0.3])\n# assign a variable name to be assigned later\n&gt;&gt;&gt; one_location_prog = prog.scale(\"a\")\n# \"a\" can be assigned in the END of the program during variable assignment\n# using a list of values, indicating the scaling for each atom\n&gt;&gt;&gt; single_assignment = ...assign(a = [0.1, 0.2, 0.3])\n# a list of lists, indicating a set of atoms should be targeted\n# for each task in a batch.\n&gt;&gt;&gt; batch_assignment = ...batch_assign(a = [list_1, list_2, list_3,...])\n</code></pre> <ul> <li>You can now do:<ul> <li><code>...scale(coeffs).linear(start, stop, duration)</code> : to apply     a linear waveform</li> <li><code>...scale(coeffs).constant(value, duration)</code> : to apply     a constant waveform</li> <li><code>...scale(coeffs).poly([coefficients], duration)</code> : to apply     a polynomial waveform</li> <li><code>...scale(coeffs).apply(wf:bloqade.ir.Waveform)</code>: to apply     a pre-defined waveform</li> <li><code>...scale(coeffs).piecewise_linear(durations, values)</code>:  to     apply a piecewise linear waveform</li> <li><code>...scale(coeffs).piecewise_constant(durations, values)</code>: to     apply a piecewise constant waveform</li> <li><code>...scale(coeffs).fn(f(t,..))</code>: to apply a function as a waveform</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/field.py</code> <pre><code>def scale(self, coeffs: Union[str, List[ScalarType]]) -&gt; \"Scale\":\n    \"\"\"\n    Address all the atoms scaling each atom with an element of the list\n    or define a variable name for the scale list to be assigned later by\n    defining a `name` and using `assign` or `batch_assign` later.\n\n    Next steps to build your program include choosing the waveform that\n    will be summed with the spatial modulation to create a drive.\n\n    The drive by itself, or the sum of subsequent drives (created by just\n    chaining the construction of drives) will become the field\n    (e.g. Detuning Field, Real-Valued Rabi Amplitude/Rabi Phase Field, etc.)\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position([(0,0),(1,4),(2,8)]).rydberg.rabi\n\n    # assign a literal list of values to scale each atom\n    &gt;&gt;&gt; one_location_prog = prog.scale([0.1, 0.2, 0.3])\n    # assign a variable name to be assigned later\n    &gt;&gt;&gt; one_location_prog = prog.scale(\"a\")\n    # \"a\" can be assigned in the END of the program during variable assignment\n    # using a list of values, indicating the scaling for each atom\n    &gt;&gt;&gt; single_assignment = ...assign(a = [0.1, 0.2, 0.3])\n    # a list of lists, indicating a set of atoms should be targeted\n    # for each task in a batch.\n    &gt;&gt;&gt; batch_assignment = ...batch_assign(a = [list_1, list_2, list_3,...])\n\n    ```\n\n    - You can now do:\n        - `...scale(coeffs).linear(start, stop, duration)` : to apply\n            a linear waveform\n        - `...scale(coeffs).constant(value, duration)` : to apply\n            a constant waveform\n        - `...scale(coeffs).poly([coefficients], duration)` : to apply\n            a polynomial waveform\n        - `...scale(coeffs).apply(wf:bloqade.ir.Waveform)`: to apply\n            a pre-defined waveform\n        - `...scale(coeffs).piecewise_linear(durations, values)`:  to\n            apply a piecewise linear waveform\n        - `...scale(coeffs).piecewise_constant(durations, values)`: to\n            apply a piecewise constant waveform\n        - `...scale(coeffs).fn(f(t,..))`: to apply a function as a waveform\n\n    \"\"\"\n    from bloqade.analog.builder.spatial import Scale\n\n    return Scale(coeffs, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.Rabi","title":"Rabi","text":"<pre><code>Rabi(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> <p>This node represent rabi field of a specified level coupling (rydberg or hyperfine) type.</p> <p>Examples:</p> <pre><code>- To specify rabi of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi\n&lt;class 'bloqade.builder.field.Rabi'&gt;\n\n- To specify rabi of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Rabi'&gt;\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.Rabi.amplitude","title":"amplitude  <code>property</code>","text":"<pre><code>amplitude: RabiAmplitude\n</code></pre> <p>Specify the real-valued Rabi Amplitude field.</p> <p>Next steps to build your program focus on specifying a spatial modulation.</p> <p>The spatial modulation, when coupled with a waveform, completes the specification of a \"Drive\". One or more drives can be summed together automatically to create a field such as the Rabi Amplitude here.</p> <ul> <li>You can now<ul> <li><code>...amplitude.uniform</code>: Address all atoms in the field</li> <li><code>...amplitude.location(...)</code>: Scale atoms by their indices</li> <li><code>...amplitude.scale(...)</code>: Scale each atom with a value from a     list or assign a variable name to be assigned later</li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.field.Rabi.phase","title":"phase  <code>property</code>","text":"<pre><code>phase: RabiPhase\n</code></pre> <p>Specify the real-valued Rabi Phase field.</p> <p>Next steps to build your program focus on specifying a spatial modulation.</p> <p>The spatial modulation, when coupled with a waveform, completes the specification of a \"Drive\". One or more drives can be summed together automatically to create a field such as the Rabi Phase here.</p> <ul> <li>You can now<ul> <li><code>...amplitude.uniform</code>: Address all atoms in the field</li> <li><code>...amplitude.location(...)</code>: Scale atoms by their indices</li> <li><code>...amplitude.scale(...)</code>: Scale each atom with a value from a     list or assign a variable name to be assigned later</li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.builder.field.RabiAmplitude","title":"RabiAmplitude","text":"<pre><code>RabiAmplitude(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Field</code></p> <p>This node represent amplitude of a rabi field.</p> <p>Examples:</p> <pre><code>- To specify rabi amplitude of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi.amplitude\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Amplitude'&gt;\n\n- To specify rabi amplitude of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi.amplitude\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Amplitude'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See [<code>SpatialModulation</code>][bloqade.builder.field.SpatialModulation] for additional options.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.field.RabiPhase","title":"RabiPhase","text":"<pre><code>RabiPhase(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Field</code></p> <p>This node represent phase of a rabi field.</p> <p>Examples:</p> <pre><code>- To specify rabi phase of rydberg coupling:\n\n&gt;&gt;&gt; node = bloqade.start.rydberg.rabi.phase\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Phase'&gt;\n\n- To specify rabi phase of hyperfine coupling:\n\n&gt;&gt;&gt; node = bloqade.start.hyperfine.rabi.phase\n&gt;&gt;&gt; type(node)\n&lt;class 'bloqade.builder.field.Phase'&gt;\n</code></pre> Note <p>This node is a SpatialModulation node. See [<code>SpatialModulation</code>][bloqade.builder.field.SpatialModulation] for additional options.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse","title":"parse","text":""},{"location":"reference/analog/#bloqade.analog.builder.parse.builder","title":"builder","text":"<p>Module for parsing builder definitions into intermediate representation (IR) using the bloqade library.</p> <p>This module provides a Parser class for parsing various components of a quantum computing program, including atom arrangements, pulse sequences, analog circuits, and routines. It also defines utility functions for reading addresses, waveforms, drives, sequences, registers, and pragmas from a builder stream.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser","title":"Parser","text":"<p>A class for parsing quantum computing program components into intermediate representation (IR).</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.parse","title":"parse","text":"<pre><code>parse(builder: Builder) -&gt; Routine\n</code></pre> <p>Parse a routine from the builder.</p> <p>Parameters:</p> Name Type Description Default <code>builder</code> <code>Builder</code> <p>The builder instance.</p> required <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>The parsed routine.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def parse(self, builder: Builder) -&gt; \"Routine\":\n    \"\"\"\n    Parse a routine from the builder.\n\n    Args:\n        builder (Builder): The builder instance.\n\n    Returns:\n        Routine: The parsed routine.\n    \"\"\"\n    from bloqade.analog.ir.routine.base import Routine\n    from bloqade.analog.ir.analog_circuit import AnalogCircuit\n    from bloqade.analog.ir.routine.params import Params, ScalarArg, VectorArg\n    from bloqade.analog.compiler.analysis.common.scan_variables import ScanVariables\n\n    self.reset(builder)\n    self.read_register()\n    self.read_sequence()\n    self.read_pragmas()\n\n    circuit = AnalogCircuit(self.register, self.sequence)\n\n    var_res = ScanVariables().scan(circuit)\n    # mark vector and scalar arguments\n    args_list = [\n        (VectorArg(name) if name in var_res.vector_vars else ScalarArg(name))\n        for name in self.order\n    ]\n\n    params = Params(\n        n_sites=self.register.n_sites,\n        static_params=self.static_params,\n        batch_params=self.batch_params,\n        args_list=args_list,\n    )\n\n    return Routine(builder, circuit, params)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.parse_circuit","title":"parse_circuit","text":"<pre><code>parse_circuit(builder: Builder) -&gt; AnalogCircuit\n</code></pre> <p>Parse an analog circuit from the builder.</p> <p>Parameters:</p> Name Type Description Default <code>builder</code> <code>Builder</code> <p>The builder instance.</p> required <p>Returns:</p> Name Type Description <code>AnalogCircuit</code> <code>AnalogCircuit</code> <p>The parsed analog circuit.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def parse_circuit(self, builder: Builder) -&gt; \"AnalogCircuit\":\n    \"\"\"\n    Parse an analog circuit from the builder.\n\n    Args:\n        builder (Builder): The builder instance.\n\n    Returns:\n        AnalogCircuit: The parsed analog circuit.\n    \"\"\"\n    from bloqade.analog.ir.analog_circuit import AnalogCircuit\n\n    self.reset(builder)\n    self.read_register()\n    self.read_sequence()\n\n    circuit = AnalogCircuit(self.register, self.sequence)\n\n    return circuit\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.parse_register","title":"parse_register","text":"<pre><code>parse_register(\n    builder: Builder,\n) -&gt; Union[ir.AtomArrangement, ir.ParallelRegister]\n</code></pre> <p>Parse an atom arrangement register from the builder.</p> <p>Parameters:</p> Name Type Description Default <code>builder</code> <code>Builder</code> <p>The builder instance.</p> required <p>Returns:</p> Type Description <code>Union[AtomArrangement, ParallelRegister]</code> <p>Union[ir.AtomArrangement, ir.ParallelRegister]: The parsed atom arrangement or parallel register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def parse_register(\n    self, builder: Builder\n) -&gt; Union[ir.AtomArrangement, ir.ParallelRegister]:\n    \"\"\"\n    Parse an atom arrangement register from the builder.\n\n    Args:\n        builder (Builder): The builder instance.\n\n    Returns:\n        Union[ir.AtomArrangement, ir.ParallelRegister]: The parsed atom arrangement or parallel register.\n    \"\"\"\n    self.reset(builder)\n    self.read_register()\n    self.read_pragmas()\n    return self.register\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.parse_sequence","title":"parse_sequence","text":"<pre><code>parse_sequence(builder: Builder) -&gt; ir.Sequence\n</code></pre> <p>Parse a sequence from the builder.</p> <p>Parameters:</p> Name Type Description Default <code>builder</code> <code>Builder</code> <p>The builder instance.</p> required <p>Returns:</p> Type Description <code>Sequence</code> <p>ir.Sequence: The parsed sequence.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def parse_sequence(self, builder: Builder) -&gt; ir.Sequence:\n    \"\"\"\n    Parse a sequence from the builder.\n\n    Args:\n        builder (Builder): The builder instance.\n\n    Returns:\n        ir.Sequence: The parsed sequence.\n    \"\"\"\n    self.reset(builder)\n    self.read_sequence()\n    return self.sequence\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_address","title":"read_address","text":"<pre><code>read_address(\n    stream,\n) -&gt; Tuple[LevelCoupling, Field, BuilderNode]\n</code></pre> <p>Read an address from the builder stream.</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <p>The builder stream.</p> required <p>Returns:</p> Type Description <code>Tuple[LevelCoupling, Field, BuilderNode]</code> <p>Tuple[LevelCoupling, Field, BuilderNode]: A tuple containing the level coupling, field, and spatial modulation.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_address(self, stream) -&gt; Tuple[LevelCoupling, Field, BuilderNode]:\n    \"\"\"\n    Read an address from the builder stream.\n\n    Args:\n        stream: The builder stream.\n\n    Returns:\n        Tuple[LevelCoupling, Field, BuilderNode]: A tuple containing the level coupling, field, and spatial modulation.\n    \"\"\"\n    spatial = stream.read_next([Location, Uniform, Scale])\n    curr = spatial\n\n    if curr is None:\n        return (None, None, None)\n\n    while curr.next is not None:\n        if not isinstance(curr.node, SpatialModulation):\n            break\n        curr = curr.next\n\n    if type(spatial.node.__parent__) in [Detuning, RabiAmplitude, RabiPhase]:\n        field = spatial.node.__parent__  # field is updated\n        if type(field) in [RabiAmplitude, RabiPhase]:\n            coupling = field.__parent__.__parent__  # skip Rabi\n        else:\n            coupling = field.__parent__\n\n        # coupling not updated\n        if type(coupling) not in [Rydberg, Hyperfine]:\n            coupling = None\n        return (coupling, field, spatial)\n    else:  # only spatial is updated\n        return (None, None, spatial)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_drive","title":"read_drive","text":"<pre><code>read_drive(head) -&gt; ir.Field\n</code></pre> <p>Read a drive from the builder stream.</p> <p>Parameters:</p> Name Type Description Default <code>head</code> <p>The head of the builder stream.</p> required <p>Returns:</p> Type Description <code>Field</code> <p>ir.Field: The drive field.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_drive(self, head) -&gt; ir.Field:\n    \"\"\"\n    Read a drive from the builder stream.\n\n    Args:\n        head: The head of the builder stream.\n\n    Returns:\n        ir.Field: The drive field.\n    \"\"\"\n    if head is None:\n        return ir.Field({})\n\n    sm = head.node.__bloqade_ir__()\n    wf, _ = self.read_waveform(head.next)\n\n    return ir.Field({sm: wf})\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_pragmas","title":"read_pragmas","text":"<pre><code>read_pragmas() -&gt; None\n</code></pre> <p>Read pragmas from the builder stream.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_pragmas(self) -&gt; None:\n    \"\"\"Read pragmas from the builder stream.\"\"\"\n    pragma_types = (\n        Assign,\n        BatchAssign,\n        ListAssign,\n        Args,\n        Parallelize,\n    )\n\n    stream = self.stream.copy()\n    curr = stream.read_next(pragma_types)\n\n    while curr is not None:\n        node = curr.node\n\n        if isinstance(node, Assign):\n            self.static_params = dict(node._static_params)\n        elif isinstance(node, BatchAssign) or isinstance(node, ListAssign):\n            self.batch_params = node._batch_params\n        elif isinstance(node, Args):\n            order = node._order\n\n            seen = set()\n            dup = []\n            for x in order:\n                if x not in seen:\n                    seen.add(x)\n                else:\n                    dup.append(x)\n\n            if dup:\n                raise ValueError(f\"Cannot have duplicate names {dup}.\")\n\n            self.order = order\n\n        elif isinstance(node, Parallelize):\n            self.register = ir.ParallelRegister(\n                self.register, node._cluster_spacing\n            )\n        else:\n            break\n\n        curr = curr.next\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_register","title":"read_register","text":"<pre><code>read_register() -&gt; ir.AtomArrangement\n</code></pre> <p>Read an atom arrangement register from the builder stream.</p> <p>Returns:</p> Type Description <code>AtomArrangement</code> <p>ir.AtomArrangement: The parsed atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_register(self) -&gt; ir.AtomArrangement:\n    \"\"\"\n    Read an atom arrangement register from the builder stream.\n\n    Returns:\n        ir.AtomArrangement: The parsed atom arrangement.\n    \"\"\"\n    # register is always head of the stream\n    register_node = self.stream.read()\n    self.register = register_node.node\n\n    return self.register\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_sequence","title":"read_sequence","text":"<pre><code>read_sequence() -&gt; ir.Sequence\n</code></pre> <p>Read a sequence from the builder stream.</p> <p>Returns:</p> Type Description <code>Sequence</code> <p>ir.Sequence: The parsed sequence.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_sequence(self) -&gt; ir.Sequence:\n    \"\"\"\n    Read a sequence from the builder stream.\n\n    Returns:\n        ir.Sequence: The parsed sequence.\n    \"\"\"\n    if isinstance(self.stream.curr.node, SequenceBuilder):\n        # case with sequence builder object.\n        self.sequence = self.stream.read().node._sequence\n        return self.sequence\n\n    stream = self.stream.copy()\n    while stream.curr is not None:\n        coupling_builder, field_builder, spatial_head = self.read_address(stream)\n\n        if coupling_builder is not None:\n            # update to new pulse coupling\n            self.coupling_name = coupling_builder.__bloqade_ir__()\n\n        if field_builder is not None:\n            # update to new field coupling\n            self.field_name = field_builder.__bloqade_ir__()\n\n        if spatial_head is None:\n            break\n\n        pulse = self.sequence.pulses.get(self.coupling_name, ir.Pulse({}))\n        field = pulse.fields.get(self.field_name, ir.Field({}))\n\n        drive = self.read_drive(spatial_head)\n        field = field.add(drive)\n\n        pulse = ir.Pulse.create(pulse.fields | {self.field_name: field})\n        self.sequence = ir.Sequence.create(\n            self.sequence.pulses | {self.coupling_name: pulse}\n        )\n\n    return self.sequence\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.read_waveform","title":"read_waveform","text":"<pre><code>read_waveform(\n    head: BuilderNode,\n) -&gt; Tuple[ir.Waveform, BuilderNode]\n</code></pre> <p>Read a waveform from the builder stream.</p> <p>Parameters:</p> Name Type Description Default <code>head</code> <code>BuilderNode</code> <p>The head of the builder stream.</p> required <p>Returns:</p> Type Description <code>Tuple[Waveform, BuilderNode]</code> <p>Tuple[ir.Waveform, BuilderNode]: A tuple containing the waveform and the next builder node.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def read_waveform(self, head: BuilderNode) -&gt; Tuple[ir.Waveform, BuilderNode]:\n    \"\"\"\n    Read a waveform from the builder stream.\n\n    Args:\n        head (BuilderNode): The head of the builder stream.\n\n    Returns:\n        Tuple[ir.Waveform, BuilderNode]: A tuple containing the waveform and the next builder node.\n    \"\"\"\n    curr = head\n    waveform = None\n    while curr is not None:\n        node = curr.node\n\n        if isinstance(node, Slice):\n            waveform = waveform[node._start : node._stop]\n        elif isinstance(node, Record):\n            waveform = waveform.record(node._name)\n        elif isinstance(node, Sample):\n            interpolation = node._interpolation\n            if interpolation is None:\n                if self.field_name == ir.rabi.phase:\n                    interpolation = ir.Interpolation.Constant\n                else:\n                    interpolation = ir.Interpolation.Linear\n            fn_waveform = node.__parent__.__bloqade_ir__()\n            sample_waveform = ir.Sample(fn_waveform, interpolation, node._dt)\n            if waveform is None:\n                waveform = sample_waveform\n            else:\n                waveform = waveform.append(sample_waveform)\n        elif (\n            isinstance(node, Fn)\n            and curr.next is not None\n            and isinstance(curr.next.node, Sample)\n        ):\n            pass\n        elif isinstance(node, WaveformPrimitive):\n            if waveform is None:\n                waveform = node.__bloqade_ir__()\n            else:\n                waveform = waveform.append(node.__bloqade_ir__())\n        else:\n            break\n\n        curr = curr.next\n\n    return waveform, curr\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.builder.Parser.reset","title":"reset","text":"<pre><code>reset(builder: Builder)\n</code></pre> <p>Reset the parser's state.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/builder.py</code> <pre><code>def reset(self, builder: Builder):\n    \"\"\"Reset the parser's state.\"\"\"\n    self.stream = BuilderStream.create(builder)\n    self.vector_node_names = set()\n    self.sequence = ir.Sequence.create()\n    self.register = None\n    self.batch_params = [{}]\n    self.static_params = {}\n    self.order = ()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream","title":"stream","text":"<p>Module for managing a stream of builder nodes.</p> <p>This module provides classes to represent builder nodes and builder streams. A builder node is a single element in the stream, representing a step in a construction process. A builder stream is a sequence of builder nodes, allowing traversal and manipulation of the construction steps.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderNode","title":"BuilderNode  <code>dataclass</code>","text":"<pre><code>BuilderNode(\n    node: Builder, next: Optional[BuilderNode] = None\n)\n</code></pre> <p>A node in the builder stream.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderNode.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Representation of the BuilderNode.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Representation of the BuilderNode.\"\"\"\n    return repr(self.node)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream","title":"BuilderStream  <code>dataclass</code>","text":"<pre><code>BuilderStream(\n    head: BuilderNode, curr: Optional[BuilderNode] = None\n)\n</code></pre> <p>Represents a stream of builder nodes.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre> <p>Iterator method to iterate over the builder stream.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def __iter__(self):\n    \"\"\"Iterator method to iterate over the builder stream.\"\"\"\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.__next__","title":"__next__","text":"<pre><code>__next__()\n</code></pre> <p>Next method to get the next item in the builder stream.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def __next__(self):\n    \"\"\"Next method to get the next item in the builder stream.\"\"\"\n    node = self.read()\n    if node is None:\n        raise StopIteration\n    return node\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.build_nodes","title":"build_nodes  <code>staticmethod</code>","text":"<pre><code>build_nodes(node: Builder) -&gt; BuilderNode\n</code></pre> <p>Build BuilderNode instances from the provided Builder.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Builder</code> <p>The root Builder instance.</p> required <p>Returns:</p> Name Type Description <code>BuilderNode</code> <code>BuilderNode</code> <p>The head of the linked list of BuilderNodes.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>@staticmethod\ndef build_nodes(node: Builder) -&gt; \"BuilderNode\":\n    \"\"\"\n    Build BuilderNode instances from the provided Builder.\n\n    Args:\n        node (Builder): The root Builder instance.\n\n    Returns:\n        BuilderNode: The head of the linked list of BuilderNodes.\n    \"\"\"\n    curr = node\n    node = None\n    while curr is not None:\n        next = curr\n        curr = curr.__parent__ if hasattr(curr, \"__parent__\") else None\n        node = BuilderNode(next, node)\n\n    return node\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.copy","title":"copy","text":"<pre><code>copy() -&gt; BuilderStream\n</code></pre> <p>Create a copy of the builder stream.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def copy(self) -&gt; \"BuilderStream\":\n    \"\"\"Create a copy of the builder stream.\"\"\"\n    return BuilderStream(head=self.head, curr=self.curr)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(builder: Builder) -&gt; BuilderStream\n</code></pre> <p>Create a BuilderStream instance from a Builder.</p> <p>Parameters:</p> Name Type Description Default <code>builder</code> <code>Builder</code> <p>The root Builder instance.</p> required <p>Returns:</p> Name Type Description <code>BuilderStream</code> <code>BuilderStream</code> <p>The created BuilderStream instance.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>@staticmethod\ndef create(builder: Builder) -&gt; \"BuilderStream\":\n    \"\"\"\n    Create a BuilderStream instance from a Builder.\n\n    Args:\n        builder (Builder): The root Builder instance.\n\n    Returns:\n        BuilderStream: The created BuilderStream instance.\n    \"\"\"\n    head = BuilderStream.build_nodes(builder)\n    return BuilderStream(head=head, curr=head)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.eat","title":"eat","text":"<pre><code>eat(\n    types: List[Type[Builder]],\n    skips: Optional[List[Type[Builder]]] = None,\n) -&gt; BuilderNode\n</code></pre> <p>Move the stream pointer until a node of specified types is found.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>List[Type[Builder]]</code> <p>List of types to move the stream pointer to.</p> required <code>skips</code> <code>List[Type[Builder]] | None</code> <p>List of types to end the stream scan.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BuilderNode</code> <code>BuilderNode</code> <p>The beginning of the stream which matches a type in <code>types</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def eat(\n    self, types: List[Type[Builder]], skips: Optional[List[Type[Builder]]] = None\n) -&gt; BuilderNode:\n    \"\"\"\n    Move the stream pointer until a node of specified types is found.\n\n    Args:\n        types (List[Type[Builder]]): List of types to move the stream pointer to.\n        skips (List[Type[Builder]] | None, optional): List of types to end the stream scan.\n\n    Returns:\n        BuilderNode: The beginning of the stream which matches a type in `types`.\n    \"\"\"\n    head = self.read_next(types)\n    curr = head\n    while curr is not None:\n        if type(curr.node) not in types:\n            if skips and type(curr.node) not in skips:\n                break\n        curr = curr.next\n    self.curr = curr\n    return head\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.read","title":"read","text":"<pre><code>read() -&gt; Optional[BuilderNode]\n</code></pre> <p>Read the next builder node from the stream.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def read(self) -&gt; Optional[BuilderNode]:\n    \"\"\"Read the next builder node from the stream.\"\"\"\n    if self.curr is None:\n        return None\n\n    node = self.curr\n    self.curr = self.curr.next\n    return node\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.stream.BuilderStream.read_next","title":"read_next","text":"<pre><code>read_next(\n    builder_types: List[type[Builder]],\n) -&gt; Optional[BuilderNode]\n</code></pre> <p>Read the next builder node of specified types from the stream.</p> <p>Parameters:</p> Name Type Description Default <code>builder_types</code> <code>List[type[Builder]]</code> <p>List of builder types to read from the stream.</p> required <p>Returns:</p> Type Description <code>Optional[BuilderNode]</code> <p>Optional[BuilderNode]: The next builder node matching one of the specified types, or None if not found.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/stream.py</code> <pre><code>def read_next(self, builder_types: List[type[Builder]]) -&gt; Optional[BuilderNode]:\n    \"\"\"\n    Read the next builder node of specified types from the stream.\n\n    Args:\n        builder_types (List[type[Builder]]): List of builder types to read from the stream.\n\n    Returns:\n        Optional[BuilderNode]: The next builder node matching one of the specified types, or None if not found.\n    \"\"\"\n    node = self.read()\n    while node is not None:\n        if type(node.node) in builder_types:\n            return node\n        node = self.read()\n    return None\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait","title":"trait","text":"<p>Module for parsing and displaying quantum computing program components using the bloqade library.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.Parse","title":"Parse","text":"<p>               Bases: <code>ParseRegister</code>, <code>ParseSequence</code>, <code>ParseCircuit</code>, <code>ParseRoutine</code></p> <p>A composite class inheriting from ParseRegister, ParseSequence, ParseCircuit, and ParseRoutine. Provides a unified interface for parsing different components of the program.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.Parse.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>Return the number of atoms in the program.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of atoms in the parsed register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register type is unsupported.</p> Note <p>If the register is of type ParallelRegister, the number of atoms is extracted from its internal register.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Parse):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; n_atoms = builder.n_atoms\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseCircuit","title":"ParseCircuit","text":"<p>A class providing functionality to parse the analog circuit from the program.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(ParseCircuit):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; analog_circuit = builder.parse_circuit()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseCircuit.parse_circuit","title":"parse_circuit","text":"<pre><code>parse_circuit() -&gt; AnalogCircuit\n</code></pre> <p>Parse the analog circuit from the program.</p> <p>Returns:</p> Name Type Description <code>AnalogCircuit</code> <code>AnalogCircuit</code> <p>The parsed analog circuit.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the circuit cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/trait.py</code> <pre><code>def parse_circuit(self: \"Builder\") -&gt; \"AnalogCircuit\":\n    \"\"\"\n    Parse the analog circuit from the program.\n\n    Returns:\n        AnalogCircuit: The parsed analog circuit.\n\n    Raises:\n        ValueError: If the circuit cannot be parsed.\n    \"\"\"\n    from bloqade.analog.builder.parse.builder import Parser\n\n    return Parser().parse_circuit(self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseRegister","title":"ParseRegister","text":"<p>A class providing functionality to parse the arrangement of atoms in the program.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(ParseRegister):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; atom_arrangement = builder.parse_register()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseRegister.parse_register","title":"parse_register","text":"<pre><code>parse_register() -&gt; (\n    Union[AtomArrangement, ParallelRegister]\n)\n</code></pre> <p>Parse the arrangement of atoms in the program.</p> <p>Returns:</p> Type Description <code>Union[AtomArrangement, ParallelRegister]</code> <p>Union[AtomArrangement, ParallelRegister]: The parsed atom arrangement or parallel register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/trait.py</code> <pre><code>def parse_register(self: \"Builder\") -&gt; Union[\"AtomArrangement\", \"ParallelRegister\"]:\n    \"\"\"\n    Parse the arrangement of atoms in the program.\n\n    Returns:\n        Union[AtomArrangement, ParallelRegister]: The parsed atom arrangement or parallel register.\n\n    Raises:\n        ValueError: If the register cannot be parsed.\n    \"\"\"\n    from bloqade.analog.builder.parse.builder import Parser\n\n    return Parser().parse_register(self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseRoutine","title":"ParseRoutine","text":"<p>A class providing functionality to parse the program and return a Routine object.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(ParseRoutine):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; routine = builder.parse()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseRoutine.parse","title":"parse","text":"<pre><code>parse() -&gt; Routine\n</code></pre> <p>Parse the program to return a Routine object.</p> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>The parsed routine object.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the routine cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/trait.py</code> <pre><code>def parse(self: \"Builder\") -&gt; \"Routine\":\n    \"\"\"\n    Parse the program to return a Routine object.\n\n    Returns:\n        Routine: The parsed routine object.\n\n    Raises:\n        ValueError: If the routine cannot be parsed.\n    \"\"\"\n    from bloqade.analog.builder.parse.builder import Parser\n\n    return Parser().parse(self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseSequence","title":"ParseSequence","text":"<p>A class providing functionality to parse the pulse sequence part of the program.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(ParseSequence):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; sequence = builder.parse_sequence()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.ParseSequence.parse_sequence","title":"parse_sequence","text":"<pre><code>parse_sequence() -&gt; Sequence\n</code></pre> <p>Parse the pulse sequence part of the program.</p> <p>Returns:</p> Name Type Description <code>Sequence</code> <code>Sequence</code> <p>The parsed pulse sequence.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/trait.py</code> <pre><code>def parse_sequence(self: \"Builder\") -&gt; \"Sequence\":\n    \"\"\"\n    Parse the pulse sequence part of the program.\n\n    Returns:\n        Sequence: The parsed pulse sequence.\n\n    Raises:\n        ValueError: If the sequence cannot be parsed.\n    \"\"\"\n    from bloqade.analog.builder.parse.builder import Parser\n\n    return Parser().parse_sequence(self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.Show","title":"Show","text":"<p>A mixin class providing functionality to display the builder with given arguments and batch ID.</p>"},{"location":"reference/analog/#bloqade.analog.builder.parse.trait.Show.show","title":"show","text":"<pre><code>show(*args, batch_id: int = 0)\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/parse/trait.py</code> <pre><code>def show(self, *args, batch_id: int = 0):\n    \"\"\"\n    Display the current program being defined with the given arguments and batch ID.\n\n    Args:\n        *args: Additional arguments for display.\n        batch_id (int, optional): The batch ID to be displayed. Defaults to 0.\n\n    Note:\n        This method uses the `display_builder` function to render the builder's state.\n\n    Example:\n\n    ```python\n    &gt;&gt;&gt; class MyBuilder(Show):\n    ...     pass\n    &gt;&gt;&gt; builder = MyBuilder()\n    &gt;&gt;&gt; builder.show()\n    &gt;&gt;&gt; builder.show(batch_id=1)\n    &gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n    ```\n    \"\"\"\n    display_builder(self, batch_id, *args)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas","title":"pragmas","text":"<p>This module provides classes for building and managing quantum programs using the Bloqade library.</p>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.AddArgs","title":"AddArgs","text":""},{"location":"reference/analog/#bloqade.analog.builder.pragmas.AddArgs.args","title":"args","text":"<pre><code>args(args_list: List[Union[str, Variable]]) -&gt; Args\n</code></pre> <p>Add arguments to the current program.</p> <p>Parameters:</p> Name Type Description Default <code>args_list</code> <code>List[Union[str, Variable]]</code> <p>List of argument names or Variable objects to be added.</p> required <p>Returns:</p> Name Type Description <code>Args</code> <code>Args</code> <p>A new instance of the Args class with the specified arguments.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If args_list contains invalid types.</p> Note <p>This method is useful for deferring the value assignment of certain variables to runtime.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/pragmas.py</code> <pre><code>def args(self, args_list: List[Union[str, Variable]]) -&gt; \"Args\":\n    \"\"\"\n    Add arguments to the current program.\n\n    Args:\n        args_list (List[Union[str, Variable]]): List of argument names or Variable\n            objects to be added.\n\n    Returns:\n        Args: A new instance of the Args class with the specified arguments.\n\n    Raises:\n        TypeError: If args_list contains invalid types.\n\n    Note:\n        This method is useful for deferring the value assignment of certain\n        variables to runtime.\n    \"\"\"\n    from bloqade.analog.builder.args import Args\n\n    return Args(args_list, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Assignable","title":"Assignable","text":""},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Assignable.assign","title":"assign","text":"<pre><code>assign(**assignments) -&gt; Assign\n</code></pre> <p>Assign values to variables declared previously in the program.</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>Key-value pairs where the key is the variable name and the value is the value to assign.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Assign</code> <code>Assign</code> <p>A new instance of the Assign class with the specified assignments.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid assignment is provided.</p> Note <p>This is reserved for variables that should take single values or for spatial modulations created with <code>.scale(str)</code>. After assigning values, you can choose a backend for emulation or execution.</p>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Assignable.assign--usage-examples","title":"Usage Examples:","text":"<pre><code># define geometry\n&gt;&gt;&gt; reg = bloqade.start\n...       .add_position([(0,0),(1,1),(2,2),(3,3)])\n# define variables in program\n&gt;&gt;&gt; seq = reg.rydberg.detuning.uniform\n...       .linear(start=\"ival\", stop=1, duration=\"span_time\")\n# assign values to variables\n&gt;&gt;&gt; seq = seq.assign(span_time=0.5, ival=0.0)\n</code></pre> <ul> <li>Next steps:<ul> <li><code>...assign(assignments).bloqade</code>: select the bloqade local emulator backend</li> <li><code>...assign(assignments).braket</code>: select braket local emulator or QuEra hardware</li> <li><code>...assign(assignments).device(specifier_string)</code>: select backend by specifying a string</li> <li><code>...assign(assignments).batch_assign(assignments)</code>: assign multiple values for a parameter sweep</li> <li><code>...assign(assignments).parallelize(cluster_spacing)</code>: parallelize the program register</li> <li><code>...assign(assignments).args([previously_defined_vars])</code>: defer value assignment to runtime</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/pragmas.py</code> <pre><code>def assign(self, **assignments) -&gt; \"Assign\":\n    \"\"\"\n    Assign values to variables declared previously in the program.\n\n    Args:\n        **assignments: Key-value pairs where the key is the variable name and\n            the value is the value to assign.\n\n    Returns:\n        Assign: A new instance of the Assign class with the specified\n            assignments.\n\n    Raises:\n        ValueError: If an invalid assignment is provided.\n\n    Note:\n        This is reserved for variables that should take single values or for\n        spatial modulations created with `.scale(str)`. After assigning values,\n        you can choose a backend for emulation or execution.\n\n    ### Usage Examples:\n    ```\n    # define geometry\n    &gt;&gt;&gt; reg = bloqade.start\n    ...       .add_position([(0,0),(1,1),(2,2),(3,3)])\n    # define variables in program\n    &gt;&gt;&gt; seq = reg.rydberg.detuning.uniform\n    ...       .linear(start=\"ival\", stop=1, duration=\"span_time\")\n    # assign values to variables\n    &gt;&gt;&gt; seq = seq.assign(span_time=0.5, ival=0.0)\n    ```\n\n    - Next steps:\n        - `...assign(assignments).bloqade`: select the bloqade local emulator backend\n        - `...assign(assignments).braket`: select braket local emulator or QuEra hardware\n        - `...assign(assignments).device(specifier_string)`: select backend by specifying a\n        string\n        - `...assign(assignments).batch_assign(assignments)`: assign multiple values for a\n        parameter sweep\n        - `...assign(assignments).parallelize(cluster_spacing)`: parallelize the program\n        register\n        - `...assign(assignments).args([previously_defined_vars])`: defer value assignment to\n        runtime\n    \"\"\"\n    from bloqade.analog.builder.assign import Assign\n\n    return Assign(assignments, parent=self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.BatchAssignable","title":"BatchAssignable","text":""},{"location":"reference/analog/#bloqade.analog.builder.pragmas.BatchAssignable.batch_assign","title":"batch_assign","text":"<pre><code>batch_assign(\n    __batch_params: List[Dict[str, ParamType]] = [],\n    **assignments: List[ParamType]\n) -&gt; Union[BatchAssign, ListAssign]\n</code></pre> <p>Assign multiple values to variables for creating a parameter sweep.</p> <p>Parameters:</p> Name Type Description Default <code>__batch_params</code> <code>List[Dict[str, ParamType]]</code> <p>List of dictionaries where each dictionary contains variable assignments for one set of parameters.</p> <code>[]</code> <code>**assignments</code> <code>List[ParamType]</code> <p>Key-value pairs where the key is the variable name and the value is a list of values to assign.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[BatchAssign, ListAssign]</code> <p>Union[BatchAssign, ListAssign]: A new instance of BatchAssign or ListAssign class with the specified assignments.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both __batch_params and assignments are provided.</p> Note <p>Bloqade handles the multiple programs generated by this method and treats them as a unified object for easy post-processing. Ensure all lists of values are of the same length as Bloqade will not perform a Cartesian product.</p>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.BatchAssignable.batch_assign--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (0, \"atom_distance\")])\n&gt;&gt;&gt; prog = reg.rydberg.rabi.amplitude.uniform.constant(\"value\", 5.0)\n&gt;&gt;&gt; var_assigned_prog = prog.batch_assign(value=[1.0, 2.0, 3.0],\natom_distance=[1.0, 2.0, 3.0])\n</code></pre> <ul> <li>Next steps:<ul> <li><code>...batch_assign(assignments).bloqade</code>: select the bloqade local emulator backend</li> <li><code>...batch_assign(assignments).braket</code>: select braket local emulator or QuEra hardware</li> <li><code>...batch_assign(assignments).device(specifier_string)</code>: select backend by specifying a string</li> <li><code>...batch_assign(assignments).parallelize(cluster_spacing)</code>: parallelize the program register</li> <li><code>...batch_assign(assignments).args([previously_defined_vars])</code>: defer value assignment to runtime</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/pragmas.py</code> <pre><code>def batch_assign(\n    self,\n    __batch_params: List[Dict[str, ParamType]] = [],\n    **assignments: List[ParamType],\n) -&gt; Union[\"BatchAssign\", \"ListAssign\"]:\n    \"\"\"\n    Assign multiple values to variables for creating a parameter sweep.\n\n    Args:\n        __batch_params (List[Dict[str, ParamType]], optional): List of dictionaries\n            where each dictionary contains variable assignments for one set of parameters.\n        **assignments (List[ParamType]): Key-value pairs where the key is the variable\n            name and the value is a list of values to assign.\n\n    Returns:\n        Union[BatchAssign, ListAssign]: A new instance of BatchAssign or ListAssign\n            class with the specified assignments.\n\n    Raises:\n        ValueError: If both __batch_params and assignments are provided.\n\n    Note:\n        Bloqade handles the multiple programs generated by this method and treats them\n        as a unified object for easy post-processing. Ensure all lists of values are of\n        the same length as Bloqade will not perform a Cartesian product.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (0, \"atom_distance\")])\n    &gt;&gt;&gt; prog = reg.rydberg.rabi.amplitude.uniform.constant(\"value\", 5.0)\n    &gt;&gt;&gt; var_assigned_prog = prog.batch_assign(value=[1.0, 2.0, 3.0],\n    atom_distance=[1.0, 2.0, 3.0])\n    ```\n\n    - Next steps:\n        - `...batch_assign(assignments).bloqade`: select the bloqade local emulator backend\n        - `...batch_assign(assignments).braket`: select braket local emulator or QuEra hardware\n        - `...batch_assign(assignments).device(specifier_string)`: select backend by specifying\n        a string\n        - `...batch_assign(assignments).parallelize(cluster_spacing)`: parallelize the program\n        register\n        - `...batch_assign(assignments).args([previously_defined_vars])`: defer value assignment\n        to runtime\n    \"\"\"\n    from bloqade.analog.builder.assign import ListAssign, BatchAssign\n\n    if len(__batch_params) &gt; 0 and assignments:\n        raise ValueError(\"batch_params and assignments cannot be used together.\")\n\n    if len(__batch_params) &gt; 0:\n        return ListAssign(__batch_params, parent=self)\n    else:\n        return BatchAssign(assignments, parent=self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Parallelizable","title":"Parallelizable","text":""},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Parallelizable.parallelize","title":"parallelize","text":"<pre><code>parallelize(cluster_spacing: LiteralType) -&gt; Parallelize\n</code></pre> <p>Parallelize the current problem by duplicating the geometry to utilize all available space/qubits on hardware.</p> <p>Parameters:</p> Name Type Description Default <code>cluster_spacing</code> <code>LiteralType</code> <p>Specifies the spacing between clusters in micrometers.</p> required <p>Returns:</p> Name Type Description <code>Parallelize</code> <code>Parallelize</code> <p>A new instance of the Parallelize class with the specified cluster spacing.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the cluster_spacing is not a valid value.</p> Note <p>After calling this method, you can choose a backend for emulation or execution. Options include <code>bloqade</code> for a local emulator, <code>braket</code> for a local emulator or QuEra hardware on the cloud, or specifying a device with a string.</p>"},{"location":"reference/analog/#bloqade.analog.builder.pragmas.Parallelizable.parallelize--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position((0,0)).rydberg.rabi.uniform.amplitude.constant(1.0, 1.0)\n# copy-paste the geometry and waveforms\n&gt;&gt;&gt; parallelized_prog = reg.parallelize(24)\n</code></pre> <ul> <li>Next steps:<ul> <li><code>...parallelize(cluster_spacing).bloqade</code>: select the bloqade local emulator backend</li> <li><code>...parallelize(cluster_spacing).braket</code>: select braket local emulator or QuEra hardware on the cloud</li> <li><code>...parallelize(cluster_spacing).device(specifier_string)</code>: select backend by specifying a string</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/pragmas.py</code> <pre><code>def parallelize(self, cluster_spacing: LiteralType) -&gt; \"Parallelize\":\n    \"\"\"\n    Parallelize the current problem by duplicating the geometry to utilize\n    all available space/qubits on hardware.\n\n    Args:\n        cluster_spacing (LiteralType): Specifies the spacing between clusters\n            in micrometers.\n\n    Returns:\n        Parallelize: A new instance of the Parallelize class with the specified\n            cluster spacing.\n\n    Raises:\n        ValueError: If the cluster_spacing is not a valid value.\n\n    Note:\n        After calling this method, you can choose a backend for emulation or\n        execution. Options include `bloqade` for a local emulator, `braket` for\n        a local emulator or QuEra hardware on the cloud, or specifying a device\n        with a string.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position((0,0)).rydberg.rabi.uniform.amplitude.constant(1.0, 1.0)\n    # copy-paste the geometry and waveforms\n    &gt;&gt;&gt; parallelized_prog = reg.parallelize(24)\n    ```\n\n    - Next steps:\n        - `...parallelize(cluster_spacing).bloqade`: select the bloqade local emulator backend\n        - `...parallelize(cluster_spacing).braket`: select braket local emulator or QuEra\n        hardware on the cloud\n        - `...parallelize(cluster_spacing).device(specifier_string)`: select backend by\n        specifying a string\n    \"\"\"\n    from bloqade.analog.builder.parallelize import Parallelize\n\n    return Parallelize(cluster_spacing, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.spatial","title":"spatial","text":""},{"location":"reference/analog/#bloqade.analog.builder.spatial.Uniform","title":"Uniform","text":"<pre><code>Uniform(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>SpatialModulation</code></p> <p>The node specify a uniform spacial modulation. Which is ready to apply waveform (See [<code>Waveform</code>][bloqade.builder.waveform] for available waveform options)</p> <p>Examples:</p> <pre><code>- To hit this node from the start node:\n\n&gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n&gt;&gt;&gt; loc = reg.rydberg.detuning.uniform\n\n- Apply Linear waveform:\n\n&gt;&gt;&gt; wv = bloqade.ir.Linear(start=0,stop=1,duration=0.5)\n&gt;&gt;&gt; reg = bloqade.start.add_position([(0,0),(1,1),(2,2),(3,3)])\n&gt;&gt;&gt; loc = reg.rydberg.detuning.uniform.apply(wv)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.start","title":"start","text":""},{"location":"reference/analog/#bloqade.analog.builder.start.ProgramStart","title":"ProgramStart","text":"<pre><code>ProgramStart(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Drive</code>, <code>Builder</code></p> <p>ProgramStart is the base class for a starting/entry node for building a program.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.start.ProgramStart.apply","title":"apply","text":"<pre><code>apply(sequence: SequenceExpr) -&gt; SequenceBuilder\n</code></pre> <p>Apply a pre-built sequence to a program.</p> <p>This allows you to build a program independent of any geometry and then <code>apply</code> the program to said geometry. Or, if you have a program you would like to try on multiple geometries you can trivially do so with this.</p> <p>Example Usage: <pre><code>&gt;&gt;&gt; from numpy import pi\n&gt;&gt;&gt; seq = start.rydberg.rabi.amplitude.constant(2.0 * pi, 4.5)\n# choose a geometry of interest to apply the program on\n&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain, Kagome\n&gt;&gt;&gt; complete_program = Chain(10).apply(seq)\n# you can .apply to as many geometries as you like\n&gt;&gt;&gt; another_complete_program = Kagome(3).apply(seq)\n</code></pre></p> <ul> <li>From here you can now do:<ul> <li><code>...assign(assignments).bloqade</code>: select the bloqade     local emulator backend</li> <li><code>...assign(assignments).braket</code>: select braket     local emulator or QuEra hardware</li> <li><code>...assign(assignments).device(specifier_string)</code>: select     backend by specifying a string</li> </ul> </li> <li>Assign multiple values to a single variable for a parameter sweep:<ul> <li><code>...assign(assignments).batch_assign(assignments)</code>:</li> </ul> </li> <li>Parallelize the program register, duplicating the geometry and waveform     sequence to take advantage of all available   space/qubits on the QPU:<ul> <li><code>...assign(assignments).parallelize(cluster_spacing)</code></li> </ul> </li> <li>Defer value assignment of certain variables to runtime:<ul> <li><code>...assign(assignments).args([previously_defined_vars])</code></li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/start.py</code> <pre><code>@beartype\ndef apply(self, sequence: SequenceExpr) -&gt; SequenceBuilder:\n    \"\"\"\n    Apply a pre-built sequence to a program.\n\n    This allows you to build a program independent of any geometry\n    and then `apply` the program to said geometry. Or, if you have a\n    program you would like to try on multiple geometries you can\n    trivially do so with this.\n\n    Example Usage:\n    ```\n    &gt;&gt;&gt; from numpy import pi\n    &gt;&gt;&gt; seq = start.rydberg.rabi.amplitude.constant(2.0 * pi, 4.5)\n    # choose a geometry of interest to apply the program on\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain, Kagome\n    &gt;&gt;&gt; complete_program = Chain(10).apply(seq)\n    # you can .apply to as many geometries as you like\n    &gt;&gt;&gt; another_complete_program = Kagome(3).apply(seq)\n    ```\n\n    - From here you can now do:\n        - `...assign(assignments).bloqade`: select the bloqade\n            local emulator backend\n        - `...assign(assignments).braket`: select braket\n            local emulator or QuEra hardware\n        - `...assign(assignments).device(specifier_string)`: select\n            backend by specifying a string\n    - Assign multiple values to a single variable for a parameter sweep:\n        - `...assign(assignments).batch_assign(assignments)`:\n    - Parallelize the program register, duplicating the geometry and waveform\n        sequence to take advantage of all available\n      space/qubits on the QPU:\n        - `...assign(assignments).parallelize(cluster_spacing)`\n    - Defer value assignment of certain variables to runtime:\n        - `...assign(assignments).args([previously_defined_vars])`\n\n    \"\"\"\n    return SequenceBuilder(sequence, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform","title":"waveform","text":""},{"location":"reference/analog/#bloqade.analog.builder.waveform.Recordable","title":"Recordable","text":""},{"location":"reference/analog/#bloqade.analog.builder.waveform.Recordable.record","title":"record","text":"<pre><code>record(name: str) -&gt; Record\n</code></pre> <p>Copy or \"record\" the value at the end of the waveform into a variable so that it can be used in another place.</p> <p>A common design pattern is to couple this with <code>.slice()</code> considering you may not know exactly what the end value of a <code>.slice()</code> is, especially in parameter sweeps where it becomes cumbersome to handle.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.Recordable.record--usage-example","title":"Usage Example:","text":"<pre><code># define program of interest\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.uniform\n&gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n# We now slice the piecewise_linear from above and record the\n# value at the end of that slice. We then use that value\n# to construct a new waveform that can be appended to the previous\n# one without introducing discontinuity (refer to the\n# \"Quantum Scar Dynamics\" tutorial for how this could be handy)\n&gt;&gt;&gt; prog_with_record = prog_with_wf.slice(0.0, 1.0).record(\"end_of_wf\")\n&gt;&gt;&gt; record_applied_prog = prog_with_record.linear(start=\"end_of_wf\"\n, stop=0.0, duration=0.3)\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...slice(start, stop).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...slice(start, stop).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...slice(start, stop).piecewise_linear()</code>:     to append a piecewise linear waveform</li> <li><code>...slice(start, stop).piecewise_constant()</code>:     to append a piecewise constant waveform</li> <li><code>...slice(start, stop).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...slice(start, stop).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li><code>...slilce(start, stop).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li><code>...slice(start, stop).uniform</code>:     To address all atoms in the field</li> <li><code>...slice(start, stop).location(int)</code>:     To address an atom at a specific location via index</li> <li><code>...slice(start, stop).scale(str)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...slice(start, stop).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...slice(start, stop)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...slice(start, stop).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...slice(start, stop).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...slice(start, stop).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...slice(start, stop).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...slice(start, stop).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...slice(start, stop).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...slice(start, stop).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...slice(start, stop).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...slice(start, stop).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...slice(start, stop).detuning</code>:     to target the Detuning field</li> <li><code>...slice(start, stop).rabi</code>:     to target the complex-valued Rabi field ```</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef record(self, name: str) -&gt; \"Record\":\n    \"\"\"\n    Copy or \"record\" the value at the end of the waveform into a variable\n    so that it can be used in another place.\n\n    A common design pattern is to couple this with `.slice()` considering\n    you may not know exactly what the end value of a `.slice()` is,\n    especially in parameter sweeps where it becomes cumbersome to handle.\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    # define program of interest\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; prog = start.rydberg.rabi.amplitude.uniform\n    &gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    # We now slice the piecewise_linear from above and record the\n    # value at the end of that slice. We then use that value\n    # to construct a new waveform that can be appended to the previous\n    # one without introducing discontinuity (refer to the\n    # \"Quantum Scar Dynamics\" tutorial for how this could be handy)\n    &gt;&gt;&gt; prog_with_record = prog_with_wf.slice(0.0, 1.0).record(\"end_of_wf\")\n    &gt;&gt;&gt; record_applied_prog = prog_with_record.linear(start=\"end_of_wf\"\n    , stop=0.0, duration=0.3)\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...slice(start, stop).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...slice(start, stop).constant(value, duration)`:\n            to append a constant waveform\n        - `...slice(start, stop).piecewise_linear()`:\n            to append a piecewise linear waveform\n        - `...slice(start, stop).piecewise_constant()`:\n            to append a piecewise constant waveform\n        - `...slice(start, stop).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...slice(start, stop).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - `...slilce(start, stop).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - `...slice(start, stop).uniform`:\n            To address all atoms in the field\n        - `...slice(start, stop).location(int)`:\n            To address an atom at a specific location via index\n        - `...slice(start, stop).scale(str)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...slice(start, stop).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...slice(start, stop)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...slice(start, stop).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...slice(start, stop).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...slice(start, stop).bloqade`:\n            to run on the Bloqade local emulator\n        - `...slice(start, stop).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...slice(start, stop).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...slice(start, stop).rydberg`:\n            to target the Rydberg level coupling\n        - `...slice(start, stop).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...slice(start, stop).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...slice(start, stop).phase`:\n            to target the real-valued Rabi Phase field\n        - `...slice(start, stop).detuning`:\n            to target the Detuning field\n        - `...slice(start, stop).rabi`:\n            to target the complex-valued Rabi field\n    ```\n    \"\"\"\n    return Record(name, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.Sliceable","title":"Sliceable","text":""},{"location":"reference/analog/#bloqade.analog.builder.waveform.Sliceable.slice","title":"slice","text":"<pre><code>slice(\n    start: Optional[ScalarType] = None,\n    stop: Optional[ScalarType] = None,\n) -&gt; Slice\n</code></pre> <p>Indicate that you only want a portion of your waveform to be used in the program.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.Sliceable.slice--usage-example","title":"Usage Example:","text":"<pre><code># define a program with a waveform of interest\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.amplitude.uniform\n&gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n# instead of using the full waveform we opt to only take the first 1 us\n&gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(0.0, 1.0)\n# you may use variables as well\n&gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(\"start\", \"end\")\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...slice(start, stop).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...slice(start, stop).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...slice(start, stop).piecewise_linear()</code>:     to append a piecewise linear waveform</li> <li><code>...slice(start, stop).piecewise_constant()</code>:     to append a piecewise constant waveform</li> <li><code>...slice(start, stop).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...slice(start, stop).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li><code>...slilce(start, stop).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li><code>...slice(start, stop).uniform</code>:     To address all atoms in the field</li> <li><code>...slice(start, stop).location(int)</code>:     To address an atom at a specific location via index</li> <li><code>...slice(start, stop).scale(...)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...slice(start, stop).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...slice(start, stop)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...slice(start, stop).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...slice(start, stop).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...slice(start, stop).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...slice(start, stop).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...slice(start, stop).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...slice(start, stop).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...slice(start, stop).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...slice(start, stop).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...slice(start, stop).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...slice(start, stop).detuning</code>:     to target the Detuning field</li> <li><code>...slice(start, stop).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef slice(\n    self,\n    start: Optional[ScalarType] = None,\n    stop: Optional[ScalarType] = None,\n) -&gt; \"Slice\":\n    \"\"\"\n    Indicate that you only want a portion of your waveform to be used in\n    the program.\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n\n    ### Usage Example:\n    ```\n    # define a program with a waveform of interest\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.amplitude.uniform\n    &gt;&gt;&gt; prog_with_wf = prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    # instead of using the full waveform we opt to only take the first 1 us\n    &gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(0.0, 1.0)\n    # you may use variables as well\n    &gt;&gt;&gt; prog_with_slice = prog_with_wf.slice(\"start\", \"end\")\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...slice(start, stop).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...slice(start, stop).constant(value, duration)`:\n            to append a constant waveform\n        - `...slice(start, stop).piecewise_linear()`:\n            to append a piecewise linear waveform\n        - `...slice(start, stop).piecewise_constant()`:\n            to append a piecewise constant waveform\n        - `...slice(start, stop).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...slice(start, stop).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - `...slilce(start, stop).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - `...slice(start, stop).uniform`:\n            To address all atoms in the field\n        - `...slice(start, stop).location(int)`:\n            To address an atom at a specific location via index\n        - `...slice(start, stop).scale(...)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...slice(start, stop).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...slice(start, stop)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...slice(start, stop).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...slice(start, stop).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...slice(start, stop).bloqade`:\n            to run on the Bloqade local emulator\n        - `...slice(start, stop).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...slice(start, stop).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...slice(start, stop).rydberg`:\n            to target the Rydberg level coupling\n        - `...slice(start, stop).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...slice(start, stop).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...slice(start, stop).phase`:\n            to target the real-valued Rabi Phase field\n        - `...slice(start, stop).detuning`:\n            to target the Detuning field\n        - `...slice(start, stop).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\n    return Slice(start, stop, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable","title":"WaveformAttachable","text":"<pre><code>WaveformAttachable(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>Builder</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.apply","title":"apply","text":"<pre><code>apply(wf: Waveform) -&gt; Apply\n</code></pre> <p>Apply a [<code>Waveform</code>][bloqade.ir.control.Waveform] built previously to current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.apply--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# build our waveform independently of the main program\n&gt;&gt;&gt; from bloqade import piecewise_linear\n&gt;&gt;&gt; wf = piecewise_linear(durations=[0.3, 2.5, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n&gt;&gt;&gt; prog.apply(wf)\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...apply(waveform).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...apply(waveform).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...apply(waveform).piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li><code>...apply(waveform).piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li><code>...apply(waveform).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...apply(waveform).apply(waveform)</code>:     to append a pre-defined waveform</li> <li><code>...apply(waveform).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...apply(waveform).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...apply(waveform).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):<ul> <li><code>...apply(waveform).uniform</code>: To address all atoms in the field</li> <li><code>...apply(waveform).location(int)</code>:     To address an atom at a specific location via index</li> <li><code>...apply(waveform).scale(...)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by specifying a     single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...apply(waveform).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...apply(waveform).batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...apply(waveform).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...apply(waveform).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...apply(waveform).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...apply(waveform).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...apply(waveform).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...apply(waveform).rydberg</code>: to target the Rydberg level coupling</li> <li><code>...apply(waveform).hyperfine</code>: to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...apply(waveform).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...apply(waveform).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...apply(waveform).detuning</code>:     to target the Detuning field</li> <li><code>...apply(waveform).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef apply(self, wf: ir.Waveform) -&gt; \"Apply\":\n    \"\"\"\n    Apply a [`Waveform`][bloqade.ir.control.Waveform] built previously to\n    current location(s).\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # build our waveform independently of the main program\n    &gt;&gt;&gt; from bloqade import piecewise_linear\n    &gt;&gt;&gt; wf = piecewise_linear(durations=[0.3, 2.5, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    &gt;&gt;&gt; prog.apply(wf)\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...apply(waveform).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...apply(waveform).constant(value, duration)`:\n            to append a constant waveform\n        - `...apply(waveform).piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - `...apply(waveform).piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - `...apply(waveform).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...apply(waveform).apply(waveform)`:\n            to append a pre-defined waveform\n        - `...apply(waveform).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...apply(waveform).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...apply(waveform).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        - `...apply(waveform).uniform`: To address all atoms in the field\n        - `...apply(waveform).location(int)`:\n            To address an atom at a specific location via index\n        - `...apply(waveform).scale(...)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by specifying a\n                single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...apply(waveform).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...apply(waveform).batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...apply(waveform).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...apply(waveform).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...apply(waveform).bloqade`:\n            to run on the Bloqade local emulator\n        - `...apply(waveform).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...apply(waveform).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...apply(waveform).rydberg`: to target the Rydberg level coupling\n        - `...apply(waveform).hyperfine`: to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...apply(waveform).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...apply(waveform).phase`:\n            to target the real-valued Rabi Phase field\n        - `...apply(waveform).detuning`:\n            to target the Detuning field\n        - `...apply(waveform).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\n    return Apply(wf, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.constant","title":"constant","text":"<pre><code>constant(\n    value: ScalarType, duration: ScalarType\n) -&gt; Constant\n</code></pre> <p>Append or assign a constant waveform to the current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.constant--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# apply a constant waveform of 1.9 radians/us for 0.5 us\n&gt;&gt;&gt; prog.constant(value=1.9,duration=0.5)\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...constant(value, duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...constant(value, duration).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...constant(value, duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li><code>...constant(value, duration)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li><code>...constant(value, duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...constant(value, duration).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li><code>...constant(value, duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...constant(value, duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...constant(value, duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li><code>...constant(value, duration).uniform</code>:     To address all atoms in the field</li> <li><code>...constant(value, duration).scale(...)</code>:     To address an atom at a specific location via index</li> <li><code>...constant(value, duration).location(int)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...constant(value, duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...constant(value, duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...constant(value, duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...constant(value, duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...constant(value, duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...constant(value, duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...constant(start, stop, duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...constant(value, duration).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...constant(value, duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current   level coupling (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...constant(value, duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...constant(value, duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...constant(value, duration).detuning</code>:     to target the Detuning field</li> <li><code>...constant(value, duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef constant(self, value: ScalarType, duration: ScalarType) -&gt; \"Constant\":\n    \"\"\"\n    Append or assign a constant waveform to the current location(s).\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # apply a constant waveform of 1.9 radians/us for 0.5 us\n    &gt;&gt;&gt; prog.constant(value=1.9,duration=0.5)\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...constant(value, duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...constant(value, duration).constant(value, duration)`:\n            to append a constant waveform\n        - `...constant(value, duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - `...constant(value, duration)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - `...constant(value, duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...constant(value, duration).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - `...constant(value, duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...constant(value, duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...constant(value, duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - `...constant(value, duration).uniform`:\n            To address all atoms in the field\n        - `...constant(value, duration).scale(...)`:\n            To address an atom at a specific location via index\n        - `...constant(value, duration).location(int)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...constant(value, duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...constant(value, duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...constant(value, duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...constant(value, duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...constant(value, duration).bloqade`:\n            to run on the Bloqade local emulator\n        - `...constant(value, duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...constant(start, stop, duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...constant(value, duration).rydberg`:\n            to target the Rydberg level coupling\n        - `...constant(value, duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current\n      level coupling (previously selected as `rydberg` or `hyperfine`):\n        - `...constant(value, duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...constant(value, duration).phase`:\n            to target the real-valued Rabi Phase field\n        - `...constant(value, duration).detuning`:\n            to target the Detuning field\n        - `...constant(value, duration).rabi`:\n            to target the complex-valued Rabi field\n\n    \"\"\"\n    return Constant(value, duration, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.fn","title":"fn","text":"<pre><code>fn(fn: Callable, duration: ScalarType) -&gt; Fn\n</code></pre> <p>Append or assign a custom function as a waveform.</p> <p>The function must have its first argument be that of time but can also have other arguments which are treated as variables. You can assign values to later in the program via <code>.assign</code> or <code>.batch_assign</code>.</p> <p>The function must also return a singular float value.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.fn--usage-examples","title":"### Usage Examples:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# define our custom waveform. It must have one argument\n# be time followed by any other number of arguments that can\n# be assigned a value later in the program via `.assign` or `.batch_assign`\n&gt;&gt;&gt; def custom_waveform_function(t, arg1, arg2):\n        return arg1*t + arg2\n&gt;&gt;&gt; prog = prog.fn(custom_waveform_function, duration = 0.5)\n# assign values\n&gt;&gt;&gt; assigned_vars_prog = prog.assign(arg1 = 1.0, arg2 = 2.0)\n# or go for batching!\n&gt;&gt;&gt; assigned_vars_batch_prog = prog.assign(arg1 = 1.0, arg2 = [1.0, 2.0, 3.0])\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...fn(f(t,...))     .linear(start, stop, duration)</code>: to append another linear waveform</li> <li><code>...fn(f(t,...))     .constant(value, duration)</code>: to append a constant waveform</li> <li><code>...fn(f(t,...))     .piecewise_linear(durations, values)</code>:     to append a piecewise linear waveform</li> <li><code>...fn(f(t,...))     .piecewise_constant(durations, values)</code>:     to append a piecewise constant waveform</li> <li><code>...fn(f(t,...))     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li><code>...fn(f(t,...))     .apply(waveform)</code>: to append a pre-defined waveform</li> <li><code>...fn(f(t,...))     .fn(f(t,...))</code>: to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...fn(f(t,...)).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...fn(f(t,...)).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):<ul> <li><code>...fn(f(t,...)).uniform</code>:     To address all atoms in the field</li> <li><code>...fn(f(t,...)).scale(...)</code>:     To address an atom at a specific location via index</li> <li>...fn(f(t,...)).location(int)`<ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by     specifying a single variable and then assigning it a     list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...fn(f(t,...))     .assign(variable_name = value)</code>: to assign a single value to a variable</li> <li><code>...fn(f(t,...))     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...fn(f(t,...))     .args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...fn(f(t,...)).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...fn(f(t,...)).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...fn(f(t,...)).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...fn(f(t,...)).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...fn(f(t,...)).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...fn(f(t,...)).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...fn(f(t,...)).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...fn(f(t,...)).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...fn(f(t,...)).detuning</code>:     to target the Detuning field</li> <li><code>...fn(f(t,...)).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef fn(self, fn: Callable, duration: ScalarType) -&gt; \"Fn\":\n    \"\"\"\n    Append or assign a custom function as a waveform.\n\n    The function must have its first argument be that of time but\n    can also have other arguments which are treated as variables.\n    You can assign values to later in the program via `.assign` or `.batch_assign`.\n\n    The function must also return a singular float value.\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### ### Usage Examples:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # define our custom waveform. It must have one argument\n    # be time followed by any other number of arguments that can\n    # be assigned a value later in the program via `.assign` or `.batch_assign`\n    &gt;&gt;&gt; def custom_waveform_function(t, arg1, arg2):\n            return arg1*t + arg2\n    &gt;&gt;&gt; prog = prog.fn(custom_waveform_function, duration = 0.5)\n    # assign values\n    &gt;&gt;&gt; assigned_vars_prog = prog.assign(arg1 = 1.0, arg2 = 2.0)\n    # or go for batching!\n    &gt;&gt;&gt; assigned_vars_batch_prog = prog.assign(arg1 = 1.0, arg2 = [1.0, 2.0, 3.0])\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...fn(f(t,...))\n            .linear(start, stop, duration)`: to append another linear waveform\n        - `...fn(f(t,...))\n            .constant(value, duration)`: to append a constant waveform\n        - `...fn(f(t,...))\n            .piecewise_linear(durations, values)`:\n            to append a piecewise linear waveform\n        - `...fn(f(t,...))\n            .piecewise_constant(durations, values)`:\n            to append a piecewise constant waveform\n        - `...fn(f(t,...))\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - `...fn(f(t,...))\n            .apply(waveform)`: to append a pre-defined waveform\n        - `...fn(f(t,...))\n            .fn(f(t,...))`: to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...fn(f(t,...)).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...fn(f(t,...)).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        - `...fn(f(t,...)).uniform`:\n            To address all atoms in the field\n        - `...fn(f(t,...)).scale(...)`:\n            To address an atom at a specific location via index\n        - ...fn(f(t,...)).location(int)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...fn(f(t,...))\n            .assign(variable_name = value)`: to assign a single value to a variable\n        - `...fn(f(t,...))\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...fn(f(t,...))\n            .args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...fn(f(t,...)).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...fn(f(t,...)).bloqade`:\n            to run on the Bloqade local emulator\n        - `...fn(f(t,...)).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...fn(f(t,...)).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...fn(f(t,...)).rydberg`:\n            to target the Rydberg level coupling\n        - `...fn(f(t,...)).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...fn(f(t,...)).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...fn(f(t,...)).phase`:\n            to target the real-valued Rabi Phase field\n        - `...fn(f(t,...)).detuning`:\n            to target the Detuning field\n        - `...fn(f(t,...)).rabi`:\n            to target the complex-valued Rabi field\n\n    \"\"\"\n    return Fn(fn, duration, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.linear","title":"linear","text":"<pre><code>linear(\n    start: ScalarType,\n    stop: ScalarType,\n    duration: ScalarType,\n) -&gt; Linear\n</code></pre> <p>Append or assign a linear waveform to the current location(s).</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.linear--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# apply a linear waveform that goes from 0 to 1 radians/us in 0.5 us\n&gt;&gt;&gt; prog.linear(start=0,stop=1,duration=0.5)\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...linear(start, stop, duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...linear(start, stop, duration).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...linear(start, stop, duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li><code>...linear(start, stop, duration)     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li><code>...linear(start, stop, duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...linear(start, stop, duration).apply(wf:bloqade.ir.Waveform)</code>:     to append a pre-defined waveform</li> <li><code>...linear(start, stop, duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...linear(start, stop, duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...linear(start, stop, duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation     (this drive will be summed to the one you just created):<ul> <li><code>...linear(start, stop, duration).uniform</code>:     To address all atoms in the field</li> <li><code>...linear(start, stop, duration).location(int)</code>:     To address atoms at specific location with scaling</li> <li><code>...linear(start, stop, duration).scale(...)</code><ul> <li>To address atoms at specific location with scaling</li> <li>To address multiple atoms at specific locations by specifying     a single variable and then assigning it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...linear(start, stop, duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...linear(start, stop, duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...linear(start, stop, duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...linear(start, stop, duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...linear(start, stop, duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...linear(start, stop, duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...linear(start, stop, duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...linear(start, stop, duration).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...linear(start, stop, duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...linear(start, stop, duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...linear(start, stop, duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...linear(start, stop, duration).detuning</code>:     to target the Detuning field</li> <li><code>...linear(start, stop, duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef linear(\n    self, start: ScalarType, stop: ScalarType, duration: ScalarType\n) -&gt; \"Linear\":\n    \"\"\"\n\n    Append or assign a linear waveform to the current location(s).\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # apply a linear waveform that goes from 0 to 1 radians/us in 0.5 us\n    &gt;&gt;&gt; prog.linear(start=0,stop=1,duration=0.5)\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...linear(start, stop, duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...linear(start, stop, duration).constant(value, duration)`:\n            to append a constant waveform\n        - `...linear(start, stop, duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - `...linear(start, stop, duration)\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - `...linear(start, stop, duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...linear(start, stop, duration).apply(wf:bloqade.ir.Waveform)`:\n            to append a pre-defined waveform\n        - `...linear(start, stop, duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...linear(start, stop, duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...linear(start, stop, duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n        (this drive will be summed to the one you just created):\n        - `...linear(start, stop, duration).uniform`:\n            To address all atoms in the field\n        - `...linear(start, stop, duration).location(int)`:\n            To address atoms at specific location with scaling\n        - `...linear(start, stop, duration).scale(...)`\n            - To address atoms at specific location with scaling\n            - To address multiple atoms at specific locations by specifying\n                a single variable and then assigning it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...linear(start, stop, duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...linear(start, stop, duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...linear(start, stop, duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...linear(start, stop, duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...linear(start, stop, duration).bloqade`:\n            to run on the Bloqade local emulator\n        - `...linear(start, stop, duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...linear(start, stop, duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...linear(start, stop, duration).rydberg`:\n            to target the Rydberg level coupling\n        - `...linear(start, stop, duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...linear(start, stop, duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...linear(start, stop, duration).phase`:\n            to target the real-valued Rabi Phase field\n        - `...linear(start, stop, duration).detuning`:\n            to target the Detuning field\n        - `...linear(start, stop, duration).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\n\n    return Linear(start, stop, duration, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; PiecewiseConstant\n</code></pre> <p>Append or assign a piecewise constant waveform to current location(s).</p> <p>The <code>durations</code> argument should have number of elements = len(values). <code>durations</code> should be the duration PER section of the waveform, NON-CUMULATIVE.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.piecewise_constant--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.phase.uniform\n# create a staircase, we hold 0.0 rad/us for 1.0 us, then\n# to 1.0 rad/us for 0.5 us before stopping at 0.8 rad/us for 0.9 us.\n&gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3], values=[1.0, 0.5, 0.9])\n</code></pre> <ul> <li>Your next steps including:</li> <li>Continue building your waveform via:<ul> <li><code>...piecewise_constant([durations], [values])     .linear(start, stop, duration)</code>: to append another linear waveform</li> <li><code>...piecewise_constant([durations], [values])     .constant(value, duration)</code>: to append a constant waveform</li> <li><code>...piecewise_constant([durations], [values])     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li><code>...piecewise_constant([durations], [values])     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li><code>...piecewise_constant([durations], [values])     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li><code>...piecewise_constant([durations], [values])     .apply(waveform)</code>: to append a pre-defined waveform</li> <li><code>...piecewise_constant([durations], [values]).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...piecewise_constant([durations], [values])     .slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...piecewise_constant([durations], [values])     .record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):<ul> <li><code>...piecewise_constant([durations], [values]).uniform</code>:     To address all atoms in the field</li> <li><code>...piecewise_constant([durations], [values]).location(int)</code>:     To address an atom at a specific location via index</li> <li><code>...piecewise_constant([durations], [values]).scale(...)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by     specifying a single variable and then assigning it a     list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...piecewise_constant([durations], [values])     .assign(variable_name = value)</code>: to assign a single value to a variable</li> <li><code>...piecewise_constant([durations], [values])     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...piecewise_constant([durations], [values])     .args([\"previously_defined_var\"])</code>: to defer assignment     of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...piecewise_constant([durations], [values]).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...piecewise_constant([durations], [values]).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...piecewise_constant([durations], [values]).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...piecewise_constat([durations], [values]).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...piecewise_constant([durations], [values]).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...piecewise_constant([durations], [values]).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...piecewise_constant(durations, values).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...piecewise_constant([durations], [values]).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...piecewise_constant([durations], [values]).detuning</code>:     to target the Detuning field</li> <li><code>...piecewise_constant([durations], [values]).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef piecewise_constant(\n    self, durations: List[ScalarType], values: List[ScalarType]\n) -&gt; \"PiecewiseConstant\":\n    \"\"\"\n    Append or assign a piecewise constant waveform to current location(s).\n\n    The `durations` argument should have number of elements = len(values).\n    `durations` should be the duration PER section of the waveform,\n    NON-CUMULATIVE.\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.rabi.phase.uniform\n    # create a staircase, we hold 0.0 rad/us for 1.0 us, then\n    # to 1.0 rad/us for 0.5 us before stopping at 0.8 rad/us for 0.9 us.\n    &gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3], values=[1.0, 0.5, 0.9])\n    ```\n\n    - Your next steps including:\n    - Continue building your waveform via:\n        - `...piecewise_constant([durations], [values])\n            .linear(start, stop, duration)`: to append another linear waveform\n        - `...piecewise_constant([durations], [values])\n            .constant(value, duration)`: to append a constant waveform\n        - `...piecewise_constant([durations], [values])\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - `...piecewise_constant([durations], [values])\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - `...piecewise_constant([durations], [values])\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - `...piecewise_constant([durations], [values])\n            .apply(waveform)`: to append a pre-defined waveform\n        - `...piecewise_constant([durations], [values]).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...piecewise_constant([durations], [values])\n            .slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...piecewise_constant([durations], [values])\n            .record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        - `...piecewise_constant([durations], [values]).uniform`:\n            To address all atoms in the field\n        - `...piecewise_constant([durations], [values]).location(int)`:\n            To address an atom at a specific location via index\n        - `...piecewise_constant([durations], [values]).scale(...)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...piecewise_constant([durations], [values])\n            .assign(variable_name = value)`: to assign a single value to a variable\n        - `...piecewise_constant([durations], [values])\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...piecewise_constant([durations], [values])\n            .args([\"previously_defined_var\"])`: to defer assignment\n            of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...piecewise_constant([durations], [values]).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...piecewise_constant([durations], [values]).bloqade`:\n            to run on the Bloqade local emulator\n        - `...piecewise_constant([durations], [values]).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...piecewise_constat([durations], [values]).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...piecewise_constant([durations], [values]).rydberg`:\n            to target the Rydberg level coupling\n        - `...piecewise_constant([durations], [values]).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...piecewise_constant(durations, values).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...piecewise_constant([durations], [values]).phase`:\n            to target the real-valued Rabi Phase field\n        - `...piecewise_constant([durations], [values]).detuning`:\n            to target the Detuning field\n        - `...piecewise_constant([durations], [values]).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\n    return PiecewiseConstant(durations, values, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; PiecewiseLinear\n</code></pre> <p>Append or assign a piecewise linear waveform to current location(s), where the waveform is formed by connecting <code>values[i], values[i+1]</code> with linear segments.</p> <p>The <code>durations</code> argument should have # of elements = len(values) - 1. <code>durations</code> should be the duration PER section of the waveform, NON-CUMULATIVE.</p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.piecewise_linear--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n# ramp our waveform up to a certain value, hold it\n# then ramp down. In this case, we ramp up to 2.0 rad/us in 0.3 us,\n# then hold it for 1.5 us before ramping down in 0.3 us back to 0.0 rad/us.\n&gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\nvalues=[0.0, 2.0, 2.0, 0.0])\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...piecewise_linear([durations], [values])     .linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...piecewise_linear([durations], [values]).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...piecewise_linear([durations], [values])     .piecewise_linear(durations, values)</code>:     to append a piecewise linear waveform</li> <li><code>...piecewise_linear([durations], [values])     .piecewise_constant([durations], [values])</code>:     to append a piecewise constant waveform</li> <li><code>...piecewise_linear([durations], [values])     .poly([coefficients], duration)</code>: to append a polynomial waveform</li> <li><code>...piecewise_linear([durations], [values]).apply(waveform)</code>:     to append a pre-defined waveform</li> <li><code>...piecewise_linear([durations], [values]).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...piecewise_linear([durations], [values])     .slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...piecewise_linear([durations], [values])     .record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):<ul> <li><code>...piecewise_linear([durations], [values]).uniform</code>:     To address all atoms in the field</li> <li><code>...piecewise_linear([durations], [values]).scale(...)</code>:     To address an atom at a specific location via index</li> <li><code>...piecewise_linear([durations], [values]).location(int)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by     specifying a single variable and then assigning it a     list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...piecewise_linear([durations], [values])     .assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...piecewise_linear([durations], [values])     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...piecewise_linear([durations], [values])     .args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...piecewise_linear([durations], [values]).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...piecewise_linear([durations], [values]).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...piecewise_linear([durations], [values]).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...piecewise_linear([durations], [values]).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...piecewise_linear([durations], [values]).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...piecewise_linear([durations], [values]).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level coupling   (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...piecewise_linear([durations], [values]).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...piecewise_linear([durations], [values]).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...piecewise_linear([durations], [values]).detuning</code>:     to target the Detuning field</li> <li><code>....rabi</code>: to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef piecewise_linear(\n    self, durations: List[ScalarType], values: List[ScalarType]\n) -&gt; \"PiecewiseLinear\":\n    \"\"\"\n    Append or assign a piecewise linear waveform to current location(s),\n    where the waveform is formed by connecting `values[i], values[i+1]`\n    with linear segments.\n\n    The `durations` argument should have # of elements = len(values) - 1.\n    `durations` should be the duration PER section of the waveform, NON-CUMULATIVE.\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    # ramp our waveform up to a certain value, hold it\n    # then ramp down. In this case, we ramp up to 2.0 rad/us in 0.3 us,\n    # then hold it for 1.5 us before ramping down in 0.3 us back to 0.0 rad/us.\n    &gt;&gt;&gt; prog.piecewise_linear(durations=[0.3, 2.0, 0.3],\n    values=[0.0, 2.0, 2.0, 0.0])\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...piecewise_linear([durations], [values])\n            .linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...piecewise_linear([durations], [values]).constant(value, duration)`:\n            to append a constant waveform\n        - `...piecewise_linear([durations], [values])\n            .piecewise_linear(durations, values)`:\n            to append a piecewise linear waveform\n        - `...piecewise_linear([durations], [values])\n            .piecewise_constant([durations], [values])`:\n            to append a piecewise constant waveform\n        - `...piecewise_linear([durations], [values])\n            .poly([coefficients], duration)`: to append a polynomial waveform\n        - `...piecewise_linear([durations], [values]).apply(waveform)`:\n            to append a pre-defined waveform\n        - `...piecewise_linear([durations], [values]).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...piecewise_linear([durations], [values])\n            .slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...piecewise_linear([durations], [values])\n            .record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        - `...piecewise_linear([durations], [values]).uniform`:\n            To address all atoms in the field\n        - `...piecewise_linear([durations], [values]).scale(...)`:\n            To address an atom at a specific location via index\n        - `...piecewise_linear([durations], [values]).location(int)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by\n                specifying a single variable and then assigning it a\n                list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...piecewise_linear([durations], [values])\n            .assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...piecewise_linear([durations], [values])\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...piecewise_linear([durations], [values])\n            .args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...piecewise_linear([durations], [values]).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...piecewise_linear([durations], [values]).bloqade`:\n            to run on the Bloqade local emulator\n        - `...piecewise_linear([durations], [values]).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...piecewise_linear([durations], [values]).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...piecewise_linear([durations], [values]).rydberg`:\n            to target the Rydberg level coupling\n        - `...piecewise_linear([durations], [values]).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level coupling\n      (previously selected as `rydberg` or `hyperfine`):\n        - `...piecewise_linear([durations], [values]).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...piecewise_linear([durations], [values]).phase`:\n            to target the real-valued Rabi Phase field\n        - `...piecewise_linear([durations], [values]).detuning`:\n            to target the Detuning field\n        - `....rabi`: to target the complex-valued Rabi field\n    \"\"\"\n    return PiecewiseLinear(durations, values, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.poly","title":"poly","text":"<pre><code>poly(\n    coeffs: List[ScalarType], duration: ScalarType\n) -&gt; Poly\n</code></pre> <p>Append or assign a waveform with a polynomial profile to current location(s).</p> <p>You pass in a list of coefficients and a duration to this method which obeys the following expression:</p> <p><code>wv(t) = coeffs[0] + coeffs[1]*t + coeffs[2]*t^2 + ... + coeffs[n]*t^n</code></p> <p>If you specified a spatial modulation (e.g. <code>uniform</code>, <code>location</code>,<code>scale</code>) previously without a waveform you will now have completed the construction of a \"drive\", one or a sum of drives creating a \"field\" (e.g. Real-valued Rabi Amplitude/Phase).</p> <p>If you have already specified a waveform previously you will now be appending this waveform to that previous waveform.</p>"},{"location":"reference/analog/#bloqade.analog.builder.waveform.WaveformAttachable.poly--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n&gt;&gt;&gt; coeffs = [-1, 0.5, 1.2]\n# resulting polynomial is:\n# f(t) = -1 + 0.5*t + 1.2*t^2 with duration of\n# 0.5 us\n&gt;&gt;&gt; prog.poly(coeffs, duration=0.5)\n</code></pre> <ul> <li>Your next steps include:</li> <li>Continue building your waveform via:<ul> <li><code>...poly([coeffs], duration).linear(start, stop, duration)</code>:     to append another linear waveform</li> <li><code>...poly([coeffs], duration).constant(value, duration)</code>:     to append a constant waveform</li> <li><code>...poly([coeffs], duration)     .piecewise_linear([durations], [values])</code>:     to append a piecewise linear waveform</li> <li><code>...poly([coeffs], duration)     .piecewise_constant([durations],[values])</code>:     to append a piecewise constant waveform</li> <li><code>...poly([coeffs], duration).poly([coefficients], duration)</code>:     to append a polynomial waveform</li> <li><code>...poly([coeffs], duration).apply(waveform)</code>:     to append a pre-defined waveform</li> <li><code>...poly([coeffs], duration).fn(f(t,...))</code>:     to append a waveform defined by a python function</li> </ul> </li> <li>Slice a portion of the waveform to be used:<ul> <li><code>...poly([coeffs], duration).slice(start, stop, duration)</code></li> </ul> </li> <li>Save the ending value of your waveform to be reused elsewhere<ul> <li><code>...poly([coeffs], duration).record(\"you_variable_here\")</code></li> </ul> </li> <li>Begin constructing another drive by starting a new spatial modulation   (this drive will be summed to the one you just created):<ul> <li><code>...poly([coeffs], duration).uniform</code>:     To address all atoms in the field</li> <li><code>...poly([coeffs], duration).location(int)</code>:     To address an atom at a specific location via index</li> <li><code>...poly([coeffs], duration).scale(...)</code><ul> <li>To address an atom at a specific location via variable</li> <li>To address multiple atoms at specific locations by     specifying a single variable and then assigning     it a list of coordinates</li> </ul> </li> </ul> </li> <li>Assign values to pre-existing variables via:<ul> <li><code>...poly([coeffs], duration).assign(variable_name = value)</code>:     to assign a single value to a variable</li> <li><code>...poly([coeffs], duration)     .batch_assign(variable_name = [value1, ...])</code>:     to assign multiple values to a variable</li> <li><code>...poly([coeffs], duration).args([\"previously_defined_var\"])</code>:     to defer assignment of a variable to execution time</li> </ul> </li> <li>Select the backend you want your program to run on via:<ul> <li><code>...poly([coeffs], duration).braket</code>:     to run on Braket local emulator or QuEra hardware remotely</li> <li><code>...poly([coeffs], duration).bloqade</code>:     to run on the Bloqade local emulator</li> <li><code>...poly([coeffs], duration).device</code>:     to specify the backend via string</li> </ul> </li> <li>Choose to parallelize your atom geometry,   duplicating it to fill the whole space:<ul> <li><code>...poly([coeffs], duration).parallelize(spacing)</code></li> </ul> </li> <li>Start targeting another level coupling<ul> <li><code>...poly([coeffs], duration).rydberg</code>:     to target the Rydberg level coupling</li> <li><code>...poly([coeffs], duration).hyperfine</code>:     to target the Hyperfine level coupling</li> </ul> </li> <li>Start targeting other fields within your current level   coupling (previously selected as <code>rydberg</code> or <code>hyperfine</code>):<ul> <li><code>...poly([coeffs], duration).amplitude</code>:     to target the real-valued Rabi Amplitude field</li> <li><code>...poly([coeffs], duration).phase</code>:     to target the real-valued Rabi Phase field</li> <li><code>...poly([coeffs], duration).detuning</code>:     to target the Detuning field</li> <li><code>...poly([coeffs], duration).rabi</code>:     to target the complex-valued Rabi field</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/waveform.py</code> <pre><code>@beartype\ndef poly(self, coeffs: List[ScalarType], duration: ScalarType) -&gt; \"Poly\":\n    \"\"\"\n    Append or assign a waveform with a polynomial profile to current location(s).\n\n    You pass in a list of coefficients and a duration to this method which obeys\n    the following expression:\n\n    `\n    wv(t) = coeffs[0] + coeffs[1]*t + coeffs[2]*t^2 + ... + coeffs[n]*t^n\n    `\n\n    If you specified a spatial modulation (e.g. `uniform`, `location`,`scale`)\n    previously without a waveform you will now have completed the construction\n    of a \"drive\", one or a sum of drives creating a \"field\"\n    (e.g. Real-valued Rabi Amplitude/Phase).\n\n    If you have already specified a waveform previously you will now be appending\n    this waveform to that previous waveform.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; prog = start.add_position((0,0)).rydberg.detuning.uniform\n    &gt;&gt;&gt; coeffs = [-1, 0.5, 1.2]\n    # resulting polynomial is:\n    # f(t) = -1 + 0.5*t + 1.2*t^2 with duration of\n    # 0.5 us\n    &gt;&gt;&gt; prog.poly(coeffs, duration=0.5)\n    ```\n\n    - Your next steps include:\n    - Continue building your waveform via:\n        - `...poly([coeffs], duration).linear(start, stop, duration)`:\n            to append another linear waveform\n        - `...poly([coeffs], duration).constant(value, duration)`:\n            to append a constant waveform\n        - `...poly([coeffs], duration)\n            .piecewise_linear([durations], [values])`:\n            to append a piecewise linear waveform\n        - `...poly([coeffs], duration)\n            .piecewise_constant([durations],[values])`:\n            to append a piecewise constant waveform\n        - `...poly([coeffs], duration).poly([coefficients], duration)`:\n            to append a polynomial waveform\n        - `...poly([coeffs], duration).apply(waveform)`:\n            to append a pre-defined waveform\n        - `...poly([coeffs], duration).fn(f(t,...))`:\n            to append a waveform defined by a python function\n    - Slice a portion of the waveform to be used:\n        - `...poly([coeffs], duration).slice(start, stop, duration)`\n    - Save the ending value of your waveform to be reused elsewhere\n        - `...poly([coeffs], duration).record(\"you_variable_here\")`\n    - Begin constructing another drive by starting a new spatial modulation\n      (this drive will be summed to the one you just created):\n        - `...poly([coeffs], duration).uniform`:\n            To address all atoms in the field\n        - `...poly([coeffs], duration).location(int)`:\n            To address an atom at a specific location via index\n        - `...poly([coeffs], duration).scale(...)`\n            - To address an atom at a specific location via variable\n            - To address multiple atoms at specific locations by\n                specifying a single variable and then assigning\n                it a list of coordinates\n    - Assign values to pre-existing variables via:\n        - `...poly([coeffs], duration).assign(variable_name = value)`:\n            to assign a single value to a variable\n        - `...poly([coeffs], duration)\n            .batch_assign(variable_name = [value1, ...])`:\n            to assign multiple values to a variable\n        - `...poly([coeffs], duration).args([\"previously_defined_var\"])`:\n            to defer assignment of a variable to execution time\n    - Select the backend you want your program to run on via:\n        - `...poly([coeffs], duration).braket`:\n            to run on Braket local emulator or QuEra hardware remotely\n        - `...poly([coeffs], duration).bloqade`:\n            to run on the Bloqade local emulator\n        - `...poly([coeffs], duration).device`:\n            to specify the backend via string\n    - Choose to parallelize your atom geometry,\n      duplicating it to fill the whole space:\n        - `...poly([coeffs], duration).parallelize(spacing)`\n    - Start targeting another level coupling\n        - `...poly([coeffs], duration).rydberg`:\n            to target the Rydberg level coupling\n        - `...poly([coeffs], duration).hyperfine`:\n            to target the Hyperfine level coupling\n    - Start targeting other fields within your current level\n      coupling (previously selected as `rydberg` or `hyperfine`):\n        - `...poly([coeffs], duration).amplitude`:\n            to target the real-valued Rabi Amplitude field\n        - `...poly([coeffs], duration).phase`:\n            to target the real-valued Rabi Phase field\n        - `...poly([coeffs], duration).detuning`:\n            to target the Detuning field\n        - `...poly([coeffs], duration).rabi`:\n            to target the complex-valued Rabi field\n    \"\"\"\n    return Poly(coeffs, duration, self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler","title":"compiler","text":""},{"location":"reference/analog/#bloqade.analog.compiler.analysis","title":"analysis","text":""},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware","title":"hardware","text":""},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.BasicLatticeValidation","title":"BasicLatticeValidation","text":"<pre><code>BasicLatticeValidation(capabilities: QuEraCapabilities)\n</code></pre> <p>               Bases: <code>BloqadeIRVisitor</code></p> <p>This visitor checks that the AtomArrangement is within the bounds of the lattice and that the number of sites is within the maximum number of sites.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/analysis/hardware/lattice.py</code> <pre><code>def __init__(self, capabilities: QuEraCapabilities):\n    self.capabilities = capabilities\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.ValidateChannels","title":"ValidateChannels","text":"<pre><code>ValidateChannels()\n</code></pre> <p>               Bases: <code>BloqadeIRVisitor</code></p> <p>Checks to make sure the given sequence can be compiled to hardware.</p> <p>This check looks at the spatial modulations and the level coupling to determine if the sequence can be compiled to hardware.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/analysis/hardware/channels.py</code> <pre><code>def __init__(self):\n    self.field_name = None\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.channels","title":"channels","text":""},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.channels.ValidateChannels","title":"ValidateChannels","text":"<pre><code>ValidateChannels()\n</code></pre> <p>               Bases: <code>BloqadeIRVisitor</code></p> <p>Checks to make sure the given sequence can be compiled to hardware.</p> <p>This check looks at the spatial modulations and the level coupling to determine if the sequence can be compiled to hardware.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/analysis/hardware/channels.py</code> <pre><code>def __init__(self):\n    self.field_name = None\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.lattice","title":"lattice","text":""},{"location":"reference/analog/#bloqade.analog.compiler.analysis.hardware.lattice.BasicLatticeValidation","title":"BasicLatticeValidation","text":"<pre><code>BasicLatticeValidation(capabilities: QuEraCapabilities)\n</code></pre> <p>               Bases: <code>BloqadeIRVisitor</code></p> <p>This visitor checks that the AtomArrangement is within the bounds of the lattice and that the number of sites is within the maximum number of sites.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/analysis/hardware/lattice.py</code> <pre><code>def __init__(self, capabilities: QuEraCapabilities):\n    self.capabilities = capabilities\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.codegen","title":"codegen","text":""},{"location":"reference/analog/#bloqade.analog.compiler.codegen.hardware","title":"hardware","text":""},{"location":"reference/analog/#bloqade.analog.compiler.codegen.hardware.PiecewiseLinear","title":"PiecewiseLinear","text":"<p>PiecewiseLinear represents a piecewise linear function.</p> <p>Contains methods for evaluating the function at a given time and slicing since these are common operations in the code generation process.</p>"},{"location":"reference/analog/#bloqade.analog.compiler.codegen.hardware.piecewise_linear","title":"piecewise_linear","text":""},{"location":"reference/analog/#bloqade.analog.compiler.codegen.hardware.piecewise_linear.PiecewiseLinear","title":"PiecewiseLinear","text":"<p>PiecewiseLinear represents a piecewise linear function.</p> <p>Contains methods for evaluating the function at a given time and slicing since these are common operations in the code generation process.</p>"},{"location":"reference/analog/#bloqade.analog.compiler.passes","title":"passes","text":""},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware","title":"hardware","text":""},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.analyze_channels","title":"analyze_channels","text":"<pre><code>analyze_channels(circuit: AnalogCircuit) -&gt; Dict\n</code></pre> <ol> <li>Scan channels</li> </ol> <p>This pass checks to make sure that: * There is no hyperfine coupling in the sequence * There are no non-uniform spatial modulation for rabi phase and amplitude * there is no more than one non-uniform spatial modulation for detuning</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to analyze</p> required <p>Returns:</p> Name Type Description <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the required channels for the sequence. Note that this will insert a uniform field for any missing channels.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there is hyperfine coupling in the sequence.</p> <code>ValueError</code> <p>If there is more than one non-uniform spatial modulation for detuning.</p> <code>ValueError</code> <p>If there are non-uniform spatial modulations for rabi phase and amplitude.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def analyze_channels(circuit: analog_circuit.AnalogCircuit) -&gt; Dict:\n    \"\"\"1. Scan channels\n\n    This pass checks to make sure that:\n    * There is no hyperfine coupling in the sequence\n    * There are no non-uniform spatial modulation for rabi phase and amplitude\n    * there is no more than one non-uniform spatial modulation for detuning\n\n    Args:\n        circuit: AnalogCircuit to analyze\n\n    Returns:\n        level_couplings: Dictionary containing the required channels for the\n            sequence. Note that this will insert a uniform field for any missing\n            channels.\n\n    Raises:\n        ValueError: If there is hyperfine coupling in the sequence.\n        ValueError: If there is more than one non-uniform spatial modulation for\n            detuning.\n        ValueError: If there are non-uniform spatial modulations for rabi phase\n            and amplitude.\n\n    \"\"\"\n    from bloqade.analog.compiler.analysis.common import ScanChannels\n    from bloqade.analog.compiler.analysis.hardware import ValidateChannels\n\n    ValidateChannels().scan(circuit)\n    level_couplings = ScanChannels().scan(circuit)\n\n    # add missing channels\n    fields = level_couplings[sequence.rydberg]\n    # detuning, phase and amplitude are required\n    # to have at least a uniform field\n    updated_fields = {\n        field_name: fields.get(field_name, {field.Uniform}).union({field.Uniform})\n        for field_name in [pulse.detuning, pulse.rabi.amplitude, pulse.rabi.phase]\n    }\n\n    return {sequence.rydberg: updated_fields}\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.assign_circuit","title":"assign_circuit","text":"<pre><code>assign_circuit(\n    circuit: AnalogCircuit,\n    assignments: Dict[str, ParamType],\n) -&gt; Tuple[analog_circuit.AnalogCircuit, Dict]\n</code></pre> <ol> <li>Assign variables and validate assignment</li> </ol> <p>This pass assigns variables to the circuit and validates that all variables have been assigned.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to assign variables to</p> required <code>assignments</code> <code>Dict[str, ParamType]</code> <p>Dictionary containing the assignments for the variables in the circuit.</p> required <p>Returns:</p> Name Type Description <code>assigned_circuit</code> <code>Tuple[AnalogCircuit, Dict]</code> <p>AnalogCircuit with variables assigned.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there are any variables that have not been assigned.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def assign_circuit(\n    circuit: analog_circuit.AnalogCircuit, assignments: Dict[str, ParamType]\n) -&gt; Tuple[analog_circuit.AnalogCircuit, Dict]:\n    \"\"\"3. Assign variables and validate assignment\n\n    This pass assigns variables to the circuit and validates that all variables\n    have been assigned.\n\n    Args:\n        circuit: AnalogCircuit to assign variables to\n        assignments: Dictionary containing the assignments for the variables in\n            the circuit.\n\n    Returns:\n        assigned_circuit: AnalogCircuit with variables assigned.\n\n    Raises:\n        ValueError: If there are any variables that have not been assigned.\n\n    \"\"\"\n    from bloqade.analog.compiler.rewrite.common import AssignBloqadeIR\n    from bloqade.analog.compiler.analysis.common import ScanVariables, AssignmentScan\n\n    final_assignments = AssignmentScan(assignments).scan(circuit)\n\n    assigned_circuit = AssignBloqadeIR(final_assignments).visit(circuit)\n\n    assignment_analysis = ScanVariables().scan(assigned_circuit)\n\n    if not assignment_analysis.is_assigned:\n        missing_vars = assignment_analysis.scalar_vars.union(\n            assignment_analysis.vector_vars\n        )\n        raise ValueError(\n            \"Missing assignments for variables:\\n\"\n            + (\"\\n\".join(f\"{var}\" for var in missing_vars))\n            + \"\\n\"\n        )\n\n    return assigned_circuit, final_assignments\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.canonicalize_circuit","title":"canonicalize_circuit","text":"<pre><code>canonicalize_circuit(\n    circuit: AnalogCircuit, level_couplings: Dict\n) -&gt; analog_circuit.AnalogCircuit\n</code></pre> <ol> <li>Insert zero waveform in the explicit time intervals missing a waveform</li> </ol> <p>This pass inserts a zero waveform in the explicit time intervals missing a waveform. This is required for later analysis passes to check that the waveforms are compatible with the hardware.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to add padding to</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <p>Return     circuit: AnalogCircuit with zero waveforms inserted in the explicit time         intervals missing a waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def canonicalize_circuit(\n    circuit: analog_circuit.AnalogCircuit, level_couplings: Dict\n) -&gt; analog_circuit.AnalogCircuit:\n    \"\"\"2. Insert zero waveform in the explicit time intervals missing a waveform\n\n    This pass inserts a zero waveform in the explicit time intervals missing a\n    waveform. This is required for later analysis passes to check that the\n    waveforms are compatible with the hardware.\n\n    Args:\n        circuit: AnalogCircuit to add padding to\n        level_couplings: Dictionary containing the given channels for the\n            sequence.\n\n    Return\n        circuit: AnalogCircuit with zero waveforms inserted in the explicit time\n            intervals missing a waveform.\n\n    \"\"\"\n    from bloqade.analog.compiler.rewrite.common import (\n        AddPadding,\n        Canonicalizer,\n        AssignToLiteral,\n    )\n\n    circuit = AddPadding(level_couplings).visit(circuit)\n    # these two passes are equivalent to a constant propagation pass\n    circuit = AssignToLiteral().visit(circuit)\n    circuit = Canonicalizer().visit(circuit)\n\n    return circuit\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.generate_ahs_code","title":"generate_ahs_code","text":"<pre><code>generate_ahs_code(\n    capabilities: Optional[QuEraCapabilities],\n    level_couplings: Dict,\n    circuit: AnalogCircuit,\n) -&gt; AHSComponents\n</code></pre> <ol> <li>generate ahs code</li> </ol> <p>Generates the AHS code for the given circuit. This includes generating the lattice data, global detuning, global amplitude, global phase, local detuning and lattice site coefficients (if applicable).</p> <p>Parameters:</p> Name Type Description Default <code>capabilities</code> <code>QuEraCapabilities | None</code> <p>Capabilities of the hardware.</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to generate AHS code for.</p> required <p>Returns:</p> Name Type Description <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit. Can be used to generate the QuEra and Braket IR.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the capabilities are not provided but the circuit has a ParallelRegister. This is because the ParallelRegister requires the capabilities to generate the lattice data.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_ahs_code(\n    capabilities: Optional[QuEraCapabilities],\n    level_couplings: Dict,\n    circuit: analog_circuit.AnalogCircuit,\n) -&gt; AHSComponents:\n    \"\"\"5. generate ahs code\n\n    Generates the AHS code for the given circuit. This includes generating the\n    lattice data, global detuning, global amplitude, global phase, local\n    detuning and lattice site coefficients (if applicable).\n\n    Args:\n        capabilities (QuEraCapabilities | None): Capabilities of the hardware.\n        level_couplings (Dict): Dictionary containing the given channels for the\n            sequence.\n        circuit (AnalogCircuit): AnalogCircuit to generate AHS code for.\n\n    Returns:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit. Can be used to generate the QuEra\n            and Braket IR.\n\n    Raises:\n        ValueError: If the capabilities are not provided but the circuit has\n            a ParallelRegister. This is because the ParallelRegister requires\n            the capabilities to generate the lattice data.\n\n    \"\"\"\n    from bloqade.analog.compiler.codegen.hardware import (\n        GenerateLattice,\n        GeneratePiecewiseLinearChannel,\n        GenerateLatticeSiteCoefficients,\n        GeneratePiecewiseConstantChannel,\n    )\n    from bloqade.analog.compiler.analysis.hardware import BasicLatticeValidation\n\n    if capabilities is not None:\n        # only validate the lattice if capabilities are provided\n        BasicLatticeValidation(capabilities).visit(circuit)\n\n    ahs_lattice_data = GenerateLattice(capabilities).emit(circuit)\n\n    global_detuning = GeneratePiecewiseLinearChannel(\n        sequence.rydberg, pulse.detuning, field.Uniform\n    ).visit(circuit)\n\n    global_amplitude = GeneratePiecewiseLinearChannel(\n        sequence.rydberg, pulse.rabi.amplitude, field.Uniform\n    ).visit(circuit)\n\n    global_phase = GeneratePiecewiseConstantChannel(\n        sequence.rydberg, pulse.rabi.phase, field.Uniform\n    ).visit(circuit)\n\n    local_detuning = None\n    lattice_site_coefficients = None\n\n    extra_sm = set(level_couplings[sequence.rydberg][pulse.detuning]) - {field.Uniform}\n\n    if extra_sm:\n        if capabilities is not None and capabilities.capabilities.rydberg.local is None:\n            raise ValueError(\n                \"Device does not support local detuning, but the program has a \"\n                \"non-uniform spatial modulation for detuning.\"\n            )\n\n        sm = extra_sm.pop()\n\n        lattice_site_coefficients = GenerateLatticeSiteCoefficients(\n            parallel_decoder=ahs_lattice_data.parallel_decoder\n        ).emit(circuit)\n\n        local_detuning = GeneratePiecewiseLinearChannel(\n            sequence.rydberg, pulse.detuning, sm\n        ).visit(circuit)\n\n    return AHSComponents(\n        lattice_data=ahs_lattice_data,\n        global_detuning=global_detuning,\n        global_amplitude=global_amplitude,\n        global_phase=global_phase,\n        local_detuning=local_detuning,\n        lattice_site_coefficients=lattice_site_coefficients,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.generate_braket_ir","title":"generate_braket_ir","text":"<pre><code>generate_braket_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; BraketTaskSpecification\n</code></pre> <ol> <li>generate braket ir</li> </ol> <p>This pass takes the AHS components and generates the Braket IR.</p> <p>Parameters:</p> Name Type Description Default <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit.</p> required <code>shots</code> <code>int</code> <p>Number of shots to run the circuit for.</p> required <p>Returns:</p> Name Type Description <code>task_specification</code> <code>BraketTaskSpecification</code> <p>Braket IR for the given circuit.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_braket_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; BraketTaskSpecification:\n    \"\"\"7. generate braket ir\n\n    This pass takes the AHS components and generates the Braket IR.\n\n    Args:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit.\n        shots (int): Number of shots to run the circuit for.\n\n    Returns:\n        task_specification (BraketTaskSpecification): Braket IR for the given\n            circuit.\n\n    \"\"\"\n    import braket.ir.ahs as ahs\n\n    from bloqade.analog.compiler.passes.hardware.units import (\n        convert_time_units,\n        convert_energy_units,\n        convert_coordinate_units,\n    )\n\n    ahs_register = ahs.AtomArrangement(\n        sites=list(map(convert_coordinate_units, ahs_components.lattice_data.sites)),\n        filling=ahs_components.lattice_data.filling,\n    )\n\n    global_detuning_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_detuning.times)),\n        values=list(map(convert_energy_units, ahs_components.global_detuning.values)),\n    )\n\n    local_detuning_time_series = None\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning_time_series = ahs.TimeSeries(\n            times=list(map(convert_time_units, ahs_components.local_detuning.times)),\n            values=list(\n                map(convert_energy_units, ahs_components.local_detuning.values)\n            ),\n        )\n\n    amplitude_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_amplitude.times)),\n        values=list(map(convert_energy_units, ahs_components.global_amplitude.values)),\n    )\n\n    phase_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_phase.times)),\n        values=ahs_components.global_phase.values,\n    )\n\n    detuning = ahs.PhysicalField(\n        time_series=global_detuning_time_series,\n        pattern=\"uniform\",\n    )\n\n    amplitude = ahs.PhysicalField(\n        time_series=amplitude_time_series,\n        pattern=\"uniform\",\n    )\n\n    phase = ahs.PhysicalField(\n        time_series=phase_time_series,\n        pattern=\"uniform\",\n    )\n\n    local_detuning = None\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning = ahs.PhysicalField(\n            time_series=local_detuning_time_series,\n            pattern=ahs_components.lattice_site_coefficients,\n        )\n\n    driving_field = ahs.DrivingField(\n        detuning=detuning,\n        amplitude=amplitude,\n        phase=phase,\n    )\n\n    shiftingFields = []\n    if ahs_components.lattice_site_coefficients is not None:\n        shiftingFields = [ahs.ShiftingField(magnitude=local_detuning)]\n\n    program = ahs.Program(\n        setup=ahs.Setup(ahs_register=ahs_register),\n        hamiltonian=ahs.Hamiltonian(\n            drivingFields=[driving_field],\n            shiftingFields=shiftingFields,\n        ),\n    )\n\n    return BraketTaskSpecification(nshots=shots, program=program)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.generate_quera_ir","title":"generate_quera_ir","text":"<pre><code>generate_quera_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; QuEraTaskSpecification\n</code></pre> <ol> <li>generate quera ir</li> </ol> <p>This pass takes the AHS components and generates the QuEra IR.</p> <p>Parameters:</p> Name Type Description Default <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit.</p> required <code>shots</code> <code>int</code> <p>Number of shots to run the circuit for.</p> required <p>Returns:</p> Name Type Description <code>task_specification</code> <code>QuEraTaskSpecification</code> <p>QuEra IR for the given circuit.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_quera_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; QuEraTaskSpecification:\n    \"\"\"7. generate quera ir\n\n    This pass takes the AHS components and generates the QuEra IR.\n\n    Args:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit.\n        shots (int): Number of shots to run the circuit for.\n\n    Returns:\n        task_specification (QuEraTaskSpecification): QuEra IR for the given\n            circuit.\n\n    \"\"\"\n    import bloqade.analog.submission.ir.task_specification as task_spec\n    from bloqade.analog.compiler.passes.hardware.units import (\n        convert_time_units,\n        convert_energy_units,\n        convert_coordinate_units,\n    )\n\n    lattice = task_spec.Lattice(\n        sites=list(\n            map(\n                convert_coordinate_units,\n                ahs_components.lattice_data.sites,\n            )\n        ),\n        filling=ahs_components.lattice_data.filling,\n    )\n\n    global_detuning = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_detuning.times)),\n        values=list(map(convert_energy_units, ahs_components.global_detuning.values)),\n    )\n\n    local_detuning = None\n\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning = task_spec.LocalField(\n            times=list(map(convert_time_units, ahs_components.local_detuning.times)),\n            values=list(\n                map(convert_energy_units, ahs_components.local_detuning.values)\n            ),\n            lattice_site_coefficients=ahs_components.lattice_site_coefficients,\n        )\n\n    rabi_frequency_amplitude_field = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_amplitude.times)),\n        values=list(map(convert_energy_units, ahs_components.global_amplitude.values)),\n    )\n\n    rabi_frequency_phase_field = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_phase.times)),\n        values=ahs_components.global_phase.values,\n    )\n\n    detuning = task_spec.Detuning(\n        global_=global_detuning,\n        local=local_detuning,\n    )\n\n    rabi_frequency_amplitude = task_spec.RabiFrequencyAmplitude(\n        global_=rabi_frequency_amplitude_field,\n    )\n\n    rabi_frequency_phase = task_spec.RabiFrequencyPhase(\n        global_=rabi_frequency_phase_field,\n    )\n\n    rydberg = task_spec.RydbergHamiltonian(\n        rabi_frequency_amplitude=rabi_frequency_amplitude,\n        rabi_frequency_phase=rabi_frequency_phase,\n        detuning=detuning,\n    )\n\n    effective_hamiltonian = task_spec.EffectiveHamiltonian(\n        rydberg=rydberg,\n    )\n\n    return task_spec.QuEraTaskSpecification(\n        nshots=shots,\n        lattice=lattice,\n        effective_hamiltonian=effective_hamiltonian,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.validate_waveforms","title":"validate_waveforms","text":"<pre><code>validate_waveforms(\n    level_couplings: Dict, circuit: AnalogCircuit\n) -&gt; None\n</code></pre> <ol> <li>validate piecewise linear and piecewise constant pieces of pulses</li> </ol> <p>This pass check to make sure that the waveforms are compatible with the hardware. This includes checking that the waveforms are piecewise linear or piecewise constant. It also checks that the waveforms are compatible with the given channels.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to validate waveforms for</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the waveforms are not piecewise linear or piecewise constant, e.g. the waveform is not continuous.</p> <code>ValueError</code> <p>If a waveform segment is not compatible with the given channels.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def validate_waveforms(\n    level_couplings: Dict, circuit: analog_circuit.AnalogCircuit\n) -&gt; None:\n    \"\"\"4. validate piecewise linear and piecewise constant pieces of pulses\n\n    This pass check to make sure that the waveforms are compatible with the\n    hardware. This includes checking that the waveforms are piecewise linear or\n    piecewise constant. It also checks that the waveforms are compatible with\n    the given channels.\n\n    Args:\n        circuit: AnalogCircuit to validate waveforms for\n        level_couplings: Dictionary containing the given channels for the\n            sequence.\n\n    Raises:\n        ValueError: If the waveforms are not piecewise linear or piecewise\n            constant, e.g. the waveform is not continuous.\n        ValueError: If a waveform segment is not compatible with the given\n            channels.\n\n    \"\"\"\n    from bloqade.analog.compiler.analysis.common import CheckSlices\n    from bloqade.analog.compiler.analysis.hardware import (\n        ValidatePiecewiseLinearChannel,\n        ValidatePiecewiseConstantChannel,\n    )\n\n    channel_iter = (\n        (level_coupling, field_name, sm)\n        for level_coupling, fields in level_couplings.items()\n        for field_name, spatial_modulations in fields.items()\n        for sm in spatial_modulations\n    )\n    for channel in channel_iter:\n        if channel[1] in [pulse.detuning, pulse.rabi.amplitude]:\n            ValidatePiecewiseLinearChannel(*channel).visit(circuit)\n        else:\n            ValidatePiecewiseConstantChannel(*channel).visit(circuit)\n\n    CheckSlices().visit(circuit)\n\n    if circuit.sequence.duration() == 0:\n        raise ValueError(\"Circuit Duration must be be non-zero\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define","title":"define","text":""},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.analyze_channels","title":"analyze_channels","text":"<pre><code>analyze_channels(circuit: AnalogCircuit) -&gt; Dict\n</code></pre> <ol> <li>Scan channels</li> </ol> <p>This pass checks to make sure that: * There is no hyperfine coupling in the sequence * There are no non-uniform spatial modulation for rabi phase and amplitude * there is no more than one non-uniform spatial modulation for detuning</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to analyze</p> required <p>Returns:</p> Name Type Description <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the required channels for the sequence. Note that this will insert a uniform field for any missing channels.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there is hyperfine coupling in the sequence.</p> <code>ValueError</code> <p>If there is more than one non-uniform spatial modulation for detuning.</p> <code>ValueError</code> <p>If there are non-uniform spatial modulations for rabi phase and amplitude.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def analyze_channels(circuit: analog_circuit.AnalogCircuit) -&gt; Dict:\n    \"\"\"1. Scan channels\n\n    This pass checks to make sure that:\n    * There is no hyperfine coupling in the sequence\n    * There are no non-uniform spatial modulation for rabi phase and amplitude\n    * there is no more than one non-uniform spatial modulation for detuning\n\n    Args:\n        circuit: AnalogCircuit to analyze\n\n    Returns:\n        level_couplings: Dictionary containing the required channels for the\n            sequence. Note that this will insert a uniform field for any missing\n            channels.\n\n    Raises:\n        ValueError: If there is hyperfine coupling in the sequence.\n        ValueError: If there is more than one non-uniform spatial modulation for\n            detuning.\n        ValueError: If there are non-uniform spatial modulations for rabi phase\n            and amplitude.\n\n    \"\"\"\n    from bloqade.analog.compiler.analysis.common import ScanChannels\n    from bloqade.analog.compiler.analysis.hardware import ValidateChannels\n\n    ValidateChannels().scan(circuit)\n    level_couplings = ScanChannels().scan(circuit)\n\n    # add missing channels\n    fields = level_couplings[sequence.rydberg]\n    # detuning, phase and amplitude are required\n    # to have at least a uniform field\n    updated_fields = {\n        field_name: fields.get(field_name, {field.Uniform}).union({field.Uniform})\n        for field_name in [pulse.detuning, pulse.rabi.amplitude, pulse.rabi.phase]\n    }\n\n    return {sequence.rydberg: updated_fields}\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.assign_circuit","title":"assign_circuit","text":"<pre><code>assign_circuit(\n    circuit: AnalogCircuit,\n    assignments: Dict[str, ParamType],\n) -&gt; Tuple[analog_circuit.AnalogCircuit, Dict]\n</code></pre> <ol> <li>Assign variables and validate assignment</li> </ol> <p>This pass assigns variables to the circuit and validates that all variables have been assigned.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to assign variables to</p> required <code>assignments</code> <code>Dict[str, ParamType]</code> <p>Dictionary containing the assignments for the variables in the circuit.</p> required <p>Returns:</p> Name Type Description <code>assigned_circuit</code> <code>Tuple[AnalogCircuit, Dict]</code> <p>AnalogCircuit with variables assigned.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there are any variables that have not been assigned.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def assign_circuit(\n    circuit: analog_circuit.AnalogCircuit, assignments: Dict[str, ParamType]\n) -&gt; Tuple[analog_circuit.AnalogCircuit, Dict]:\n    \"\"\"3. Assign variables and validate assignment\n\n    This pass assigns variables to the circuit and validates that all variables\n    have been assigned.\n\n    Args:\n        circuit: AnalogCircuit to assign variables to\n        assignments: Dictionary containing the assignments for the variables in\n            the circuit.\n\n    Returns:\n        assigned_circuit: AnalogCircuit with variables assigned.\n\n    Raises:\n        ValueError: If there are any variables that have not been assigned.\n\n    \"\"\"\n    from bloqade.analog.compiler.rewrite.common import AssignBloqadeIR\n    from bloqade.analog.compiler.analysis.common import ScanVariables, AssignmentScan\n\n    final_assignments = AssignmentScan(assignments).scan(circuit)\n\n    assigned_circuit = AssignBloqadeIR(final_assignments).visit(circuit)\n\n    assignment_analysis = ScanVariables().scan(assigned_circuit)\n\n    if not assignment_analysis.is_assigned:\n        missing_vars = assignment_analysis.scalar_vars.union(\n            assignment_analysis.vector_vars\n        )\n        raise ValueError(\n            \"Missing assignments for variables:\\n\"\n            + (\"\\n\".join(f\"{var}\" for var in missing_vars))\n            + \"\\n\"\n        )\n\n    return assigned_circuit, final_assignments\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.canonicalize_circuit","title":"canonicalize_circuit","text":"<pre><code>canonicalize_circuit(\n    circuit: AnalogCircuit, level_couplings: Dict\n) -&gt; analog_circuit.AnalogCircuit\n</code></pre> <ol> <li>Insert zero waveform in the explicit time intervals missing a waveform</li> </ol> <p>This pass inserts a zero waveform in the explicit time intervals missing a waveform. This is required for later analysis passes to check that the waveforms are compatible with the hardware.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to add padding to</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <p>Return     circuit: AnalogCircuit with zero waveforms inserted in the explicit time         intervals missing a waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def canonicalize_circuit(\n    circuit: analog_circuit.AnalogCircuit, level_couplings: Dict\n) -&gt; analog_circuit.AnalogCircuit:\n    \"\"\"2. Insert zero waveform in the explicit time intervals missing a waveform\n\n    This pass inserts a zero waveform in the explicit time intervals missing a\n    waveform. This is required for later analysis passes to check that the\n    waveforms are compatible with the hardware.\n\n    Args:\n        circuit: AnalogCircuit to add padding to\n        level_couplings: Dictionary containing the given channels for the\n            sequence.\n\n    Return\n        circuit: AnalogCircuit with zero waveforms inserted in the explicit time\n            intervals missing a waveform.\n\n    \"\"\"\n    from bloqade.analog.compiler.rewrite.common import (\n        AddPadding,\n        Canonicalizer,\n        AssignToLiteral,\n    )\n\n    circuit = AddPadding(level_couplings).visit(circuit)\n    # these two passes are equivalent to a constant propagation pass\n    circuit = AssignToLiteral().visit(circuit)\n    circuit = Canonicalizer().visit(circuit)\n\n    return circuit\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.generate_ahs_code","title":"generate_ahs_code","text":"<pre><code>generate_ahs_code(\n    capabilities: Optional[QuEraCapabilities],\n    level_couplings: Dict,\n    circuit: AnalogCircuit,\n) -&gt; AHSComponents\n</code></pre> <ol> <li>generate ahs code</li> </ol> <p>Generates the AHS code for the given circuit. This includes generating the lattice data, global detuning, global amplitude, global phase, local detuning and lattice site coefficients (if applicable).</p> <p>Parameters:</p> Name Type Description Default <code>capabilities</code> <code>QuEraCapabilities | None</code> <p>Capabilities of the hardware.</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to generate AHS code for.</p> required <p>Returns:</p> Name Type Description <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit. Can be used to generate the QuEra and Braket IR.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the capabilities are not provided but the circuit has a ParallelRegister. This is because the ParallelRegister requires the capabilities to generate the lattice data.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_ahs_code(\n    capabilities: Optional[QuEraCapabilities],\n    level_couplings: Dict,\n    circuit: analog_circuit.AnalogCircuit,\n) -&gt; AHSComponents:\n    \"\"\"5. generate ahs code\n\n    Generates the AHS code for the given circuit. This includes generating the\n    lattice data, global detuning, global amplitude, global phase, local\n    detuning and lattice site coefficients (if applicable).\n\n    Args:\n        capabilities (QuEraCapabilities | None): Capabilities of the hardware.\n        level_couplings (Dict): Dictionary containing the given channels for the\n            sequence.\n        circuit (AnalogCircuit): AnalogCircuit to generate AHS code for.\n\n    Returns:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit. Can be used to generate the QuEra\n            and Braket IR.\n\n    Raises:\n        ValueError: If the capabilities are not provided but the circuit has\n            a ParallelRegister. This is because the ParallelRegister requires\n            the capabilities to generate the lattice data.\n\n    \"\"\"\n    from bloqade.analog.compiler.codegen.hardware import (\n        GenerateLattice,\n        GeneratePiecewiseLinearChannel,\n        GenerateLatticeSiteCoefficients,\n        GeneratePiecewiseConstantChannel,\n    )\n    from bloqade.analog.compiler.analysis.hardware import BasicLatticeValidation\n\n    if capabilities is not None:\n        # only validate the lattice if capabilities are provided\n        BasicLatticeValidation(capabilities).visit(circuit)\n\n    ahs_lattice_data = GenerateLattice(capabilities).emit(circuit)\n\n    global_detuning = GeneratePiecewiseLinearChannel(\n        sequence.rydberg, pulse.detuning, field.Uniform\n    ).visit(circuit)\n\n    global_amplitude = GeneratePiecewiseLinearChannel(\n        sequence.rydberg, pulse.rabi.amplitude, field.Uniform\n    ).visit(circuit)\n\n    global_phase = GeneratePiecewiseConstantChannel(\n        sequence.rydberg, pulse.rabi.phase, field.Uniform\n    ).visit(circuit)\n\n    local_detuning = None\n    lattice_site_coefficients = None\n\n    extra_sm = set(level_couplings[sequence.rydberg][pulse.detuning]) - {field.Uniform}\n\n    if extra_sm:\n        if capabilities is not None and capabilities.capabilities.rydberg.local is None:\n            raise ValueError(\n                \"Device does not support local detuning, but the program has a \"\n                \"non-uniform spatial modulation for detuning.\"\n            )\n\n        sm = extra_sm.pop()\n\n        lattice_site_coefficients = GenerateLatticeSiteCoefficients(\n            parallel_decoder=ahs_lattice_data.parallel_decoder\n        ).emit(circuit)\n\n        local_detuning = GeneratePiecewiseLinearChannel(\n            sequence.rydberg, pulse.detuning, sm\n        ).visit(circuit)\n\n    return AHSComponents(\n        lattice_data=ahs_lattice_data,\n        global_detuning=global_detuning,\n        global_amplitude=global_amplitude,\n        global_phase=global_phase,\n        local_detuning=local_detuning,\n        lattice_site_coefficients=lattice_site_coefficients,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.generate_braket_ir","title":"generate_braket_ir","text":"<pre><code>generate_braket_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; BraketTaskSpecification\n</code></pre> <ol> <li>generate braket ir</li> </ol> <p>This pass takes the AHS components and generates the Braket IR.</p> <p>Parameters:</p> Name Type Description Default <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit.</p> required <code>shots</code> <code>int</code> <p>Number of shots to run the circuit for.</p> required <p>Returns:</p> Name Type Description <code>task_specification</code> <code>BraketTaskSpecification</code> <p>Braket IR for the given circuit.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_braket_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; BraketTaskSpecification:\n    \"\"\"7. generate braket ir\n\n    This pass takes the AHS components and generates the Braket IR.\n\n    Args:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit.\n        shots (int): Number of shots to run the circuit for.\n\n    Returns:\n        task_specification (BraketTaskSpecification): Braket IR for the given\n            circuit.\n\n    \"\"\"\n    import braket.ir.ahs as ahs\n\n    from bloqade.analog.compiler.passes.hardware.units import (\n        convert_time_units,\n        convert_energy_units,\n        convert_coordinate_units,\n    )\n\n    ahs_register = ahs.AtomArrangement(\n        sites=list(map(convert_coordinate_units, ahs_components.lattice_data.sites)),\n        filling=ahs_components.lattice_data.filling,\n    )\n\n    global_detuning_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_detuning.times)),\n        values=list(map(convert_energy_units, ahs_components.global_detuning.values)),\n    )\n\n    local_detuning_time_series = None\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning_time_series = ahs.TimeSeries(\n            times=list(map(convert_time_units, ahs_components.local_detuning.times)),\n            values=list(\n                map(convert_energy_units, ahs_components.local_detuning.values)\n            ),\n        )\n\n    amplitude_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_amplitude.times)),\n        values=list(map(convert_energy_units, ahs_components.global_amplitude.values)),\n    )\n\n    phase_time_series = ahs.TimeSeries(\n        times=list(map(convert_time_units, ahs_components.global_phase.times)),\n        values=ahs_components.global_phase.values,\n    )\n\n    detuning = ahs.PhysicalField(\n        time_series=global_detuning_time_series,\n        pattern=\"uniform\",\n    )\n\n    amplitude = ahs.PhysicalField(\n        time_series=amplitude_time_series,\n        pattern=\"uniform\",\n    )\n\n    phase = ahs.PhysicalField(\n        time_series=phase_time_series,\n        pattern=\"uniform\",\n    )\n\n    local_detuning = None\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning = ahs.PhysicalField(\n            time_series=local_detuning_time_series,\n            pattern=ahs_components.lattice_site_coefficients,\n        )\n\n    driving_field = ahs.DrivingField(\n        detuning=detuning,\n        amplitude=amplitude,\n        phase=phase,\n    )\n\n    shiftingFields = []\n    if ahs_components.lattice_site_coefficients is not None:\n        shiftingFields = [ahs.ShiftingField(magnitude=local_detuning)]\n\n    program = ahs.Program(\n        setup=ahs.Setup(ahs_register=ahs_register),\n        hamiltonian=ahs.Hamiltonian(\n            drivingFields=[driving_field],\n            shiftingFields=shiftingFields,\n        ),\n    )\n\n    return BraketTaskSpecification(nshots=shots, program=program)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.generate_quera_ir","title":"generate_quera_ir","text":"<pre><code>generate_quera_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; QuEraTaskSpecification\n</code></pre> <ol> <li>generate quera ir</li> </ol> <p>This pass takes the AHS components and generates the QuEra IR.</p> <p>Parameters:</p> Name Type Description Default <code>ahs_components</code> <code>AHSComponents</code> <p>A collection of the AHS components generated for the given circuit.</p> required <code>shots</code> <code>int</code> <p>Number of shots to run the circuit for.</p> required <p>Returns:</p> Name Type Description <code>task_specification</code> <code>QuEraTaskSpecification</code> <p>QuEra IR for the given circuit.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def generate_quera_ir(\n    ahs_components: AHSComponents, shots: int\n) -&gt; QuEraTaskSpecification:\n    \"\"\"7. generate quera ir\n\n    This pass takes the AHS components and generates the QuEra IR.\n\n    Args:\n        ahs_components (AHSComponents): A collection of the AHS components\n            generated for the given circuit.\n        shots (int): Number of shots to run the circuit for.\n\n    Returns:\n        task_specification (QuEraTaskSpecification): QuEra IR for the given\n            circuit.\n\n    \"\"\"\n    import bloqade.analog.submission.ir.task_specification as task_spec\n    from bloqade.analog.compiler.passes.hardware.units import (\n        convert_time_units,\n        convert_energy_units,\n        convert_coordinate_units,\n    )\n\n    lattice = task_spec.Lattice(\n        sites=list(\n            map(\n                convert_coordinate_units,\n                ahs_components.lattice_data.sites,\n            )\n        ),\n        filling=ahs_components.lattice_data.filling,\n    )\n\n    global_detuning = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_detuning.times)),\n        values=list(map(convert_energy_units, ahs_components.global_detuning.values)),\n    )\n\n    local_detuning = None\n\n    if ahs_components.lattice_site_coefficients is not None:\n        local_detuning = task_spec.LocalField(\n            times=list(map(convert_time_units, ahs_components.local_detuning.times)),\n            values=list(\n                map(convert_energy_units, ahs_components.local_detuning.values)\n            ),\n            lattice_site_coefficients=ahs_components.lattice_site_coefficients,\n        )\n\n    rabi_frequency_amplitude_field = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_amplitude.times)),\n        values=list(map(convert_energy_units, ahs_components.global_amplitude.values)),\n    )\n\n    rabi_frequency_phase_field = task_spec.GlobalField(\n        times=list(map(convert_time_units, ahs_components.global_phase.times)),\n        values=ahs_components.global_phase.values,\n    )\n\n    detuning = task_spec.Detuning(\n        global_=global_detuning,\n        local=local_detuning,\n    )\n\n    rabi_frequency_amplitude = task_spec.RabiFrequencyAmplitude(\n        global_=rabi_frequency_amplitude_field,\n    )\n\n    rabi_frequency_phase = task_spec.RabiFrequencyPhase(\n        global_=rabi_frequency_phase_field,\n    )\n\n    rydberg = task_spec.RydbergHamiltonian(\n        rabi_frequency_amplitude=rabi_frequency_amplitude,\n        rabi_frequency_phase=rabi_frequency_phase,\n        detuning=detuning,\n    )\n\n    effective_hamiltonian = task_spec.EffectiveHamiltonian(\n        rydberg=rydberg,\n    )\n\n    return task_spec.QuEraTaskSpecification(\n        nshots=shots,\n        lattice=lattice,\n        effective_hamiltonian=effective_hamiltonian,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.passes.hardware.define.validate_waveforms","title":"validate_waveforms","text":"<pre><code>validate_waveforms(\n    level_couplings: Dict, circuit: AnalogCircuit\n) -&gt; None\n</code></pre> <ol> <li>validate piecewise linear and piecewise constant pieces of pulses</li> </ol> <p>This pass check to make sure that the waveforms are compatible with the hardware. This includes checking that the waveforms are piecewise linear or piecewise constant. It also checks that the waveforms are compatible with the given channels.</p> <p>Parameters:</p> Name Type Description Default <code>circuit</code> <code>AnalogCircuit</code> <p>AnalogCircuit to validate waveforms for</p> required <code>level_couplings</code> <code>Dict</code> <p>Dictionary containing the given channels for the sequence.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the waveforms are not piecewise linear or piecewise constant, e.g. the waveform is not continuous.</p> <code>ValueError</code> <p>If a waveform segment is not compatible with the given channels.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/compiler/passes/hardware/define.py</code> <pre><code>def validate_waveforms(\n    level_couplings: Dict, circuit: analog_circuit.AnalogCircuit\n) -&gt; None:\n    \"\"\"4. validate piecewise linear and piecewise constant pieces of pulses\n\n    This pass check to make sure that the waveforms are compatible with the\n    hardware. This includes checking that the waveforms are piecewise linear or\n    piecewise constant. It also checks that the waveforms are compatible with\n    the given channels.\n\n    Args:\n        circuit: AnalogCircuit to validate waveforms for\n        level_couplings: Dictionary containing the given channels for the\n            sequence.\n\n    Raises:\n        ValueError: If the waveforms are not piecewise linear or piecewise\n            constant, e.g. the waveform is not continuous.\n        ValueError: If a waveform segment is not compatible with the given\n            channels.\n\n    \"\"\"\n    from bloqade.analog.compiler.analysis.common import CheckSlices\n    from bloqade.analog.compiler.analysis.hardware import (\n        ValidatePiecewiseLinearChannel,\n        ValidatePiecewiseConstantChannel,\n    )\n\n    channel_iter = (\n        (level_coupling, field_name, sm)\n        for level_coupling, fields in level_couplings.items()\n        for field_name, spatial_modulations in fields.items()\n        for sm in spatial_modulations\n    )\n    for channel in channel_iter:\n        if channel[1] in [pulse.detuning, pulse.rabi.amplitude]:\n            ValidatePiecewiseLinearChannel(*channel).visit(circuit)\n        else:\n            ValidatePiecewiseConstantChannel(*channel).visit(circuit)\n\n    CheckSlices().visit(circuit)\n\n    if circuit.sequence.duration() == 0:\n        raise ValueError(\"Circuit Duration must be be non-zero\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.compiler.rewrite","title":"rewrite","text":""},{"location":"reference/analog/#bloqade.analog.compiler.rewrite.common","title":"common","text":""},{"location":"reference/analog/#bloqade.analog.compiler.rewrite.common.AssignToLiteral","title":"AssignToLiteral","text":"<p>               Bases: <code>BloqadeIRTransformer</code></p> <p>Transform all assigned variables to literals.</p>"},{"location":"reference/analog/#bloqade.analog.compiler.rewrite.common.assign_to_literal","title":"assign_to_literal","text":""},{"location":"reference/analog/#bloqade.analog.compiler.rewrite.common.assign_to_literal.AssignToLiteral","title":"AssignToLiteral","text":"<p>               Bases: <code>BloqadeIRTransformer</code></p> <p>Transform all assigned variables to literals.</p>"},{"location":"reference/analog/#bloqade.analog.constants","title":"constants","text":""},{"location":"reference/analog/#bloqade.analog.constants.RB_C6","title":"RB_C6  <code>module-attribute</code>","text":"<pre><code>RB_C6 = 2 * pi * 862690\n</code></pre> <p>The C6 constant for the Rydberg Interaction of two Rubidium atoms in units of: rad \u03bcm^6/\u03bcs</p>"},{"location":"reference/analog/#bloqade.analog.emulate","title":"emulate","text":""},{"location":"reference/analog/#bloqade.analog.emulate.codegen","title":"codegen","text":""},{"location":"reference/analog/#bloqade.analog.emulate.codegen.hamiltonian","title":"hamiltonian","text":""},{"location":"reference/analog/#bloqade.analog.emulate.codegen.hamiltonian.CompileCache","title":"CompileCache  <code>dataclass</code>","text":"<pre><code>CompileCache(\n    operator_cache: Dict[\n        Tuple[Register, LevelCoupling, OperatorData],\n        MatrixTypes,\n    ] = dict(),\n    space_cache: Dict[\n        Register, Tuple[Space, NDArray]\n    ] = dict(),\n)\n</code></pre> <p>This class is used to cache the results of the code generation.</p>"},{"location":"reference/analog/#bloqade.analog.emulate.ir","title":"ir","text":""},{"location":"reference/analog/#bloqade.analog.emulate.ir.emulator","title":"emulator","text":""},{"location":"reference/analog/#bloqade.analog.emulate.ir.emulator.Register","title":"Register  <code>dataclass</code>","text":"<pre><code>Register(\n    atom_type: AtomType,\n    sites: List[Tuple[Decimal, Decimal]],\n    blockade_radius: Decimal,\n    geometry: Optional[Geometry] = None,\n)\n</code></pre> <p>This class represents the of the atoms in the system.</p>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector","title":"state_vector","text":""},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.AnalogGate","title":"AnalogGate  <code>dataclass</code>","text":"<pre><code>AnalogGate(hamiltonian: RydbergHamiltonian)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.AnalogGate.run","title":"run","text":"<pre><code>run(\n    shots: int = 1,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-14,\n    rtol: float = 1e-07,\n    nsteps: int = 2147483647,\n    interaction_picture: bool = False,\n    project_hyperfine: bool = True,\n) -&gt; NDArray[np.uint8]\n</code></pre> <p>Run the emulation with all atoms in the ground state, sampling the final state vector.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>@beartype\ndef run(\n    self,\n    shots: int = 1,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-14,\n    rtol: float = 1e-7,\n    nsteps: int = 2_147_483_647,\n    interaction_picture: bool = False,\n    project_hyperfine: bool = True,\n) -&gt; NDArray[np.uint8]:\n    \"\"\"Run the emulation with all atoms in the ground state,\n    sampling the final state vector.\"\"\"\n\n    options = dict(\n        solver_name=solver_name,\n        atol=atol,\n        rtol=rtol,\n        nsteps=nsteps,\n        interaction_picture=interaction_picture,\n    )\n\n    state = self.hamiltonian.space.zero_state()\n    (result,) = self.apply(state, **options)\n    result.normalize()\n\n    return result.sample(shots, project_hyperfine=project_hyperfine)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.RydbergHamiltonian","title":"RydbergHamiltonian  <code>dataclass</code>","text":"<pre><code>RydbergHamiltonian(\n    emulator_ir: EmulatorProgram,\n    space: Space,\n    rydberg: NDArray,\n    detuning_ops: List[DetuningOperator] = list(),\n    rabi_ops: List[RabiOperator] = list(),\n)\n</code></pre> <p>Hamiltonian for a given task. With the <code>RydbergHamiltonian</code> you can convert the Hamiltonian to CSR matrix form as well as obtaining the average energy/variance of a register.</p> <p>Attributes:</p> Name Type Description <code>emulator_ir</code> <code>EmulatorProgram</code> <p>A copy of the original program used to generate the RydbergHamiltonian</p> <code>space</code> <code>Space</code> <p>The Hilbert space of the Hamiltonian, should align with the register the Hamiltonian is being applied on for average energy/variance</p> <code>rydberg</code> <code>NDArray</code> <p>Rydberg interaction operator</p> <code>detuning_ops</code> <code>List[DetuningOperator]</code> <p>Detuning Operators of the Hamiltonian</p> <code>rabi_ops</code> <code>List[RabiOperator]</code> <p>Rabi Operators of the Hamiltonian</p>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.RydbergHamiltonian.average","title":"average","text":"<pre><code>average(\n    register: StateVector, time: Optional[float] = None\n) -&gt; float\n</code></pre> <p>Get energy average from RydbergHamiltonian object at time <code>time</code> with register <code>register</code></p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>StateVector</code> <p>The state vector to take average with</p> required <code>time</code> <code>Optional[float]</code> <p>Time value to evaluate average at.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>average energy at time <code>time</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>@beartype\ndef average(\n    self,\n    register: StateVector,\n    time: Optional[float] = None,\n) -&gt; float:\n    \"\"\"Get energy average from RydbergHamiltonian object at time `time` with\n    register `register`\n\n    Args:\n        register (StateVector): The state vector to take average with\n        time (Optional[float], optional): Time value to evaluate average at.\n        Defaults to duration of RydbergHamiltonian.\n\n    Returns:\n        float: average energy at time `time`\n    \"\"\"\n    return np.vdot(register.data, self._apply(register.data, time)).real\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.RydbergHamiltonian.average_and_variance","title":"average_and_variance","text":"<pre><code>average_and_variance(\n    register: StateVector, time: Optional[float] = None\n) -&gt; Tuple[float, float]\n</code></pre> <p>Get energy average and variance from RydbergHamiltonian object at time <code>time</code> with register <code>register</code></p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>StateVector</code> <p>The state vector to take average and variance with</p> required <code>time</code> <code>Optional[float]</code> <p>Time value to evaluate average at.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>Tuple[float, float]: average and variance of energy at time <code>time</code></p> <code>float</code> <p>respectively.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>@beartype\ndef average_and_variance(\n    self,\n    register: StateVector,\n    time: Optional[float] = None,\n) -&gt; Tuple[float, float]:\n    \"\"\"Get energy average and variance from RydbergHamiltonian object at time `time`\n    with register `register`\n\n    Args:\n        register (StateVector): The state vector to take average and variance with\n        time (Optional[float], optional): Time value to evaluate average at.\n        Defaults to duration of RydbergHamiltonian.\n\n    Returns:\n        Tuple[float, float]: average and variance of energy at time `time`\n        respectively.\n    \"\"\"\n    H_register_data = self._apply(register.data, time)\n\n    average = np.vdot(register.data, H_register_data).real\n    square_average = np.vdot(H_register_data, H_register_data).real\n\n    return average, square_average - average**2\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.RydbergHamiltonian.tocsr","title":"tocsr","text":"<pre><code>tocsr(time: float) -&gt; csr_matrix\n</code></pre> <p>Return the Hamiltonian as a csr matrix at time <code>time</code>.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>time to evaluate the Hamiltonian at.</p> required <p>Returns:</p> Name Type Description <code>csr_matrix</code> <code>csr_matrix</code> <p>The Hamiltonian as a csr matrix.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>def tocsr(self, time: float) -&gt; csr_matrix:\n    \"\"\"Return the Hamiltonian as a csr matrix at time `time`.\n\n    Args:\n        time (float): time to evaluate the Hamiltonian at.\n\n    Returns:\n        csr_matrix: The Hamiltonian as a csr matrix.\n\n    \"\"\"\n    diagonal = sum(\n        (detuning.get_diagonal(time) for detuning in self.detuning_ops),\n        start=self.rydberg,\n    )\n\n    hamiltonian = diags(diagonal).tocsr()\n    for rabi_op in self.rabi_ops:\n        hamiltonian = hamiltonian + rabi_op.tocsr(time)\n\n    return hamiltonian\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.RydbergHamiltonian.variance","title":"variance","text":"<pre><code>variance(\n    register: StateVector, time: Optional[float] = None\n) -&gt; float\n</code></pre> <p>Get the energy variance from RydbergHamiltonian object at time <code>time</code> with register <code>register</code></p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>StateVector</code> <p>The state vector to take variance with</p> required <code>time</code> <code>Optional[float]</code> <p>Time value to evaluate average at.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>complex</code> <code>float</code> <p>variance of energy at time <code>time</code> respectively.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>@beartype\ndef variance(\n    self,\n    register: StateVector,\n    time: Optional[float] = None,\n) -&gt; float:\n    \"\"\"Get the energy variance from RydbergHamiltonian object at\n    time `time` with register `register`\n\n    Args:\n        register (StateVector): The state vector to take variance with\n        time (Optional[float], optional): Time value to evaluate average at.\n        Defaults to duration of RydbergHamiltonian.\n\n    Returns:\n        complex: variance of energy at time `time` respectively.\n    \"\"\"\n\n    _, var = self.average_and_variance(register, time)\n    return var\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.StateVector","title":"StateVector  <code>dataclass</code>","text":"<pre><code>StateVector(data: NDArray, space: Space)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.StateVector.local_trace","title":"local_trace","text":"<pre><code>local_trace(\n    matrix: ndarray, site_index: Union[int, Tuple[int, int]]\n) -&gt; complex\n</code></pre> <p>return trace of an operator over the StateVector.</p> <p>Parameters:</p> Name Type Description Default <code>matrix</code> <code>ndarray</code> <p>Square matrix representing operator in the local hilbert space.</p> required <code>site_index</code> <code>int | Tuple[int, int]</code> <p>sites to apply one body operator to.</p> required <p>Returns:</p> Name Type Description <code>complex</code> <code>complex</code> <p>the trace of the operator over the state-vector.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Error is raised when the dimension of <code>operator</code> is not</p> <code>ValueError</code> <p>Error is raised when the <code>site</code> argument is out of bounds.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>@plum.dispatch\ndef local_trace(  # noqa: F811\n    self, matrix: np.ndarray, site_index: Union[int, Tuple[int, int]]\n) -&gt; complex:  # noqa: F811\n    \"\"\"return trace of an operator over the StateVector.\n\n    Args:\n        matrix (np.ndarray): Square matrix representing operator in the local\n            hilbert space.\n        site_index (int | Tuple[int, int]): sites to apply one body operator to.\n\n    Returns:\n        complex: the trace of the operator over the state-vector.\n\n    Raises:\n        ValueError: Error is raised when the dimension of `operator` is not\n        consistent with `site` argument. The size of the operator must fit\n        the size of the local hilbert space of `site` depending on the number\n        of sites and the number of levels inside each atom, e.g. for two site\n        expectation value with a three level atom the operator must be a 9 by\n        9 array.\n\n        ValueError: Error is raised when the `site` argument is out of bounds.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.StateVector.norm","title":"norm","text":"<pre><code>norm() -&gt; float\n</code></pre> <p>Return the norm of the state vector.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>def norm(self) -&gt; float:\n    \"\"\"Return the norm of the state vector.\"\"\"\n    return np.linalg.norm(self.data)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.StateVector.normalize","title":"normalize","text":"<pre><code>normalize() -&gt; None\n</code></pre> <p>Normalize the state vector.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>def normalize(self) -&gt; None:\n    \"\"\"Normalize the state vector.\"\"\"\n    data = self.data\n    data /= np.linalg.norm(data)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.emulate.ir.state_vector.StateVector.sample","title":"sample","text":"<pre><code>sample(\n    shots: int, project_hyperfine: bool = True\n) -&gt; NDArray\n</code></pre> <p>Sample the state vector and return bitstrings.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/emulate/ir/state_vector.py</code> <pre><code>def sample(self, shots: int, project_hyperfine: bool = True) -&gt; NDArray:\n    \"\"\"Sample the state vector and return bitstrings.\"\"\"\n    return self.space.sample_state_vector(\n        self.data, shots, project_hyperfine=project_hyperfine\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory","title":"factory","text":""},{"location":"reference/analog/#bloqade.analog.factory.constant","title":"constant","text":"<pre><code>constant(\n    duration: ScalarType, value: ScalarType\n) -&gt; Constant\n</code></pre> <p>Create a Constant waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>Duration of the Constant waveform.</p> required <code>value</code> <code>ScalarType</code> <p>Value of the Constant waveform.s</p> required <p>Returns:</p> Name Type Description <code>Constant</code> <code>Constant</code> <p>A Constant waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef constant(duration: ScalarType, value: ScalarType) -&gt; Constant:\n    \"\"\"Create a Constant waveform.\n\n    Args:\n        duration (ScalarType): Duration of the Constant waveform.\n        value (ScalarType): Value of the Constant waveform.s\n\n    Returns:\n        Constant: A Constant waveform.\n    \"\"\"\n    return Constant(value, duration)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory.get_capabilities","title":"get_capabilities","text":"<pre><code>get_capabilities(\n    use_experimental: bool = False,\n) -&gt; QuEraCapabilities\n</code></pre> <p>Get the device capabilities for Aquila</p> <p>Parameters:</p> Name Type Description Default <code>use_experimental</code> <code>bool</code> <p>Get experimental capabilities instead of standard ones. By default value is False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>QuEraCapabilities</code> <code>QuEraCapabilities</code> <p>capabilities object for Aquila device.</p> Note <p>Units of time, distance, and energy are microseconds (us), micrometers (um), and rad / us, respectively.</p> <p>For a comprehensive list of capabilities, see the Hardware Reference page</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>def get_capabilities(use_experimental: bool = False) -&gt; \"QuEraCapabilities\":\n    \"\"\"Get the device capabilities for Aquila\n\n    Args:\n        use_experimental (bool): Get experimental capabilities instead of\n            standard ones. By default value is False.\n\n    Returns:\n        QuEraCapabilities: capabilities object for Aquila device.\n\n\n    Note:\n        Units of time, distance, and energy are microseconds (us),\n        micrometers (um), and rad / us, respectively.\n\n        For a comprehensive list of capabilities,\n        see the [Hardware Reference](../../reference/hardware-capabilities.md)\n        page\n    \"\"\"\n\n    from bloqade.analog.submission.capabilities import get_capabilities\n\n    # manually convert to units\n    return get_capabilities(use_experimental=use_experimental).scale_units(\n        Decimal(\"1e6\"), Decimal(\"1e-6\")\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory.linear","title":"linear","text":"<pre><code>linear(\n    duration: ScalarType,\n    start: ScalarType,\n    stop: ScalarType,\n) -&gt; Linear\n</code></pre> <p>Create a Linear waveform.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>ScalarType</code> <p>Duration of linear waveform</p> required <code>start</code> <code>ScalarType</code> <p>Starting value of linear waveform</p> required <code>stop</code> <code>ScalarType</code> <p>Ending value of linear waveform</p> required <p>Returns:</p> Name Type Description <code>Linear</code> <code>Linear</code> <p>Linear waveform</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef linear(duration: ScalarType, start: ScalarType, stop: ScalarType) -&gt; Linear:\n    \"\"\"Create a Linear waveform.\n\n    Args:\n        duration (ScalarType): Duration of linear waveform\n        start (ScalarType): Starting value of linear waveform\n        stop (ScalarType): Ending value of linear waveform\n\n    Returns:\n        Linear: Linear waveform\n    \"\"\"\n    return Linear(start, stop, duration)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory.piecewise_constant","title":"piecewise_constant","text":"<pre><code>piecewise_constant(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise constant waveform from a list of durations and values. The value <code>duration[i]</code> corresponds to the length of time for the i'th segment with a value of <code>values[i]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not the same as the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef piecewise_constant(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform:\n    \"\"\"Create a piecewise linear waveform.\n\n    Create a piecewise constant waveform from a list of durations and values. The\n    value `duration[i]` corresponds to the length of time for the i'th segment\n    with a value of `values[i]`.\n\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n\n    Raises:\n        ValueError: If the length of `values` is not the same as the length of\n        `durations`.\n\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\n    if len(durations) != len(values):\n        raise ValueError(\n            \"The length of values must be the same as the length of durations\"\n        )\n\n    pwc_wf = None\n    for duration, value in zip(durations, values):\n        if pwc_wf is None:\n            pwc_wf = Constant(value, duration)\n        else:\n            pwc_wf = pwc_wf.append(Constant(value, duration))\n\n    return pwc_wf\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory.piecewise_linear","title":"piecewise_linear","text":"<pre><code>piecewise_linear(\n    durations: List[ScalarType], values: List[ScalarType]\n) -&gt; Waveform\n</code></pre> <p>Create a piecewise linear waveform.</p> <p>Create a piecewise linear waveform from a list of durations and values. The value <code>duration[i]</code> is of the linear segment between <code>values[i]</code> and <code>values[i+1]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>durations</code> <code>List[ScalarType]</code> <p>The duration of each segment</p> required <code>values</code> <code>List[ScalarType]</code> <p>The values for each segment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of <code>values</code> is not one greater than the length of</p> <p>Returns:</p> Name Type Description <code>Waveform</code> <code>Waveform</code> <p>The piecewise linear waveform.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef piecewise_linear(durations: List[ScalarType], values: List[ScalarType]) -&gt; Waveform:\n    \"\"\"Create a piecewise linear waveform.\n\n    Create a piecewise linear waveform from a list of durations and values. The\n    value `duration[i]` is of the linear segment between `values[i]` and `values[i+1]`.\n\n    Args:\n        durations (List[ScalarType]): The duration of each segment\n        values (List[ScalarType]): The values for each segment\n\n    Raises:\n        ValueError: If the length of `values` is not one greater than the length of\n        `durations`.\n\n    Returns:\n        Waveform: The piecewise linear waveform.\n    \"\"\"\n\n    if len(durations) + 1 != len(values):\n        raise ValueError(\n            \"The length of values must be one greater than the length of durations\"\n        )\n\n    pwl_wf = None\n    for duration, start, stop in zip(durations, values[:-1], values[1:]):\n        if pwl_wf is None:\n            pwl_wf = Linear(start, stop, duration)\n        else:\n            pwl_wf = pwl_wf.append(Linear(start, stop, duration))\n\n    return pwl_wf\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.factory.rydberg_h","title":"rydberg_h","text":"<pre><code>rydberg_h(\n    atoms_positions: Any,\n    detuning: Optional[Waveform] = None,\n    amplitude: Optional[Waveform] = None,\n    phase: Optional[Waveform] = None,\n    static_params: Dict[str, Any] = {},\n    batch_params: Union[\n        List[Dict[str, Any]], Dict[str, Any]\n    ] = [],\n    args: List[str] = [],\n) -&gt; Routine\n</code></pre> <p>Create a rydberg program with uniform detuning, amplitude, and phase.</p> <p>Parameters:</p> Name Type Description Default <code>atoms_positions</code> <code>Any</code> <p>Description of geometry of atoms in system.</p> required <code>detuning</code> <code>Optional[Waveform]</code> <p>Waveform for detuning. Defaults to None.</p> <code>None</code> <code>amplitude</code> <code>Optional[Waveform]</code> <p>Waveform describing the amplitude of the rabi term. Defaults to None.</p> <code>None</code> <code>phase</code> <code>Optional[Waveform]</code> <p>Waveform describing the phase of rabi term. Defaults to None.</p> <code>None</code> <code>static_params</code> <code>Dict[str, Any]</code> <p>Define static parameters of your program. Defaults to {}.</p> <code>{}</code> <code>batch_params</code> <code>Union[List[Dict[str, Any]], Dict[str, Any]]</code> <p>Parmaters for a batch of tasks. Defaults to [].</p> <code>[]</code> <code>args</code> <code>List[str]</code> <p>List of arguments to leave till runtime. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>An object that can be used to dispatch a rydberg program to multiple backends.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/factory.py</code> <pre><code>@beartype\ndef rydberg_h(\n    atoms_positions: Any,\n    detuning: Optional[Waveform] = None,\n    amplitude: Optional[Waveform] = None,\n    phase: Optional[Waveform] = None,\n    static_params: Dict[str, Any] = {},\n    batch_params: Union[List[Dict[str, Any]], Dict[str, Any]] = [],\n    args: List[str] = [],\n) -&gt; Routine:\n    \"\"\"Create a rydberg program with uniform detuning, amplitude, and phase.\n\n    Args:\n        atoms_positions (Any): Description of geometry of atoms in system.\n        detuning (Optional[Waveform], optional): Waveform for detuning.\n            Defaults to None.\n        amplitude (Optional[Waveform], optional): Waveform describing the amplitude of\n            the rabi term. Defaults to None.\n        phase (Optional[Waveform], optional): Waveform describing the phase of rabi\n            term. Defaults to None.\n        static_params (Dict[str, Any], optional): Define static parameters of your\n            program. Defaults to {}.\n        batch_params (Union[List[Dict[str, Any]], Dict[str, Any]], optional):\n            Parmaters for a batch of tasks. Defaults to [].\n        args (List[str], optional): List of arguments to leave till runtime.\n            Defaults to [].\n\n    Returns:\n        Routine: An object that can be used to dispatch a rydberg program to\n            multiple backends.\n    \"\"\"\n    from bloqade.analog import start\n    from bloqade.analog.atom_arrangement import AtomArrangement\n\n    if isinstance(atoms_positions, AtomArrangement):\n        prog = atoms_positions\n    else:\n        prog = start.add_position(atoms_positions)\n\n    if detuning is not None:\n        prog = prog.rydberg.detuning.uniform.apply(detuning)\n\n    if amplitude is not None:\n        prog = prog.amplitude.uniform.apply(amplitude)\n\n    if phase is not None:\n        prog = prog.phase.uniform.apply(phase)\n\n    prog = prog.assign(**static_params)\n\n    if isinstance(batch_params, dict):\n        prog = prog.batch_assign(**batch_params)\n    else:\n        prog = prog.batch_assign(batch_params)\n\n    prog = prog.args(args)\n\n    return prog.parse()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir","title":"ir","text":""},{"location":"reference/analog/#bloqade.analog.ir.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty [<code>ListOfLocations</code>][bloqade.ir.location.list.ListOfLocations].</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li><code>start.rydberg</code>: for [<code>Rydberg</code>][bloqade.builder.coupling.Rydberg]     Level coupling</li> <li><code>start.hyperfine</code>: for [<code>Hyperfine</code>][bloqade.builder.coupling.Hyperfine]     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li><code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li>[<code>Scalar</code>][bloqade.ir.scalar.Scalar] objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.ir.AlignedWaveform","title":"AlignedWaveform","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;padded waveform&gt; ::= &lt;waveform&gt; | &lt;waveform&gt; &lt;alignment&gt; &lt;value&gt;\n\n&lt;alignment&gt; ::= 'left aligned' | 'right aligned'\n&lt;value&gt; ::= 'left value' | 'right value' | &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AnalogCircuit","title":"AnalogCircuit","text":"<p>AnalogCircuit is a dummy type that bundle register and sequence together.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AnalogCircuit.register","title":"register  <code>property</code>","text":"<pre><code>register\n</code></pre> <p>Get the register of the program.</p> <p>Returns:</p> Type Description <p>register (Union[\"AtomArrangement\", \"ParallelRegister\"])</p> Note <p>If the program is built with [<code>parallelize()</code>][bloqade.builder.emit.Emit.parallelize], The the register will be a [<code>ParallelRegister</code>][bloqade.ir.location.base.ParallelRegister]. Otherwise it will be a [<code>AtomArrangement</code>][bloqade.ir.location.base.AtomArrangement].</p>"},{"location":"reference/analog/#bloqade.analog.ir.AnalogCircuit.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the program</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the program</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/analog_circuit.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"Interactive visualization of the program\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the program\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement","title":"AtomArrangement","text":"<pre><code>AtomArrangement(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims: int\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.add_position","title":"add_position","text":"<pre><code>add_position(\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[\n        Union[BoolArray, List[bool], bool]\n    ] = None,\n) -&gt; ListOfLocations\n</code></pre> <p>Add a position or multiple positions to a pre-existing geometry.</p> <p><code>add_position</code> is capable of accepting: - A single tuple for one atom coordinate: <code>(1.0, 2.5)</code> - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.] - A numpy array of shape (N, 2) where N is the number of atoms</p> <p>You may also intersperse variables anywhere a value may be present.</p> <p>You can also pass in an optional argument which determines the atom \"filling\" (whether or not at a specified coordinate an atom should be present).</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.add_position--usage-example","title":"Usage Example:","text":"<pre><code># single coordinate\n&gt;&gt;&gt; reg = start.add_position((0,0))\n# you may chain add_position calls\n&gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n# you can add variables anywhere a value may be present\n&gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n# and specify your atom fillings\n&gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n[True, False])\n# alternatively you could use one boolean to specify\n# all coordinates should be empty/filled\n&gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n(5.2, 2.2)], False)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def add_position(\n    self,\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[Union[BoolArray, List[bool], bool]] = None,\n) -&gt; \"ListOfLocations\":\n    \"\"\"\n    Add a position or multiple positions to a pre-existing geometry.\n\n    `add_position` is capable of accepting:\n    - A single tuple for one atom coordinate: `(1.0, 2.5)`\n    - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.]\n    - A numpy array of shape (N, 2) where N is the number of atoms\n\n    You may also intersperse variables anywhere a value may be present.\n\n    You can also pass in an optional argument which determines the atom \"filling\"\n    (whether or not at a specified coordinate an atom should be present).\n\n    ### Usage Example:\n    ```\n    # single coordinate\n    &gt;&gt;&gt; reg = start.add_position((0,0))\n    # you may chain add_position calls\n    &gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n    # you can add variables anywhere a value may be present\n    &gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n    # and specify your atom fillings\n    &gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n    [True, False])\n    # alternatively you could use one boolean to specify\n    # all coordinates should be empty/filled\n    &gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n    (5.2, 2.2)], False)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`: to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`: to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    if is_bearable(position, PositionArray) and is_bearable(\n        filling, Optional[BoolArray]\n    ):\n        return self.add_position_ndarray(position, filling)\n    elif is_bearable(position, List[Tuple[ScalarType, ScalarType]]) and is_bearable(\n        filling, Optional[List[bool]]\n    ):\n        return self.add_position_list_tuples(position, filling)\n    elif is_bearable(position, Tuple[ScalarType, ScalarType]) and is_bearable(\n        filling, Optional[bool]\n    ):\n        return self.add_position_single_tupe(position, filling)\n    else:\n        raise TypeError(\"Invalid input types for add_position provided!\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.apply_defect_count","title":"apply_defect_count","text":"<pre><code>apply_defect_count(\n    n_defects: int, rng: Generator = np.random.default_rng()\n)\n</code></pre> <p>Drop <code>n_defects</code> atoms from the geometry randomly. Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.apply_defect_count--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n# you may also chain apply_defect_count calls\n&gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n# you can also use apply_defect_count on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>:     to add more positions</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_density(defect_probability)</code>:     to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>:     to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify     Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>:     to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>:     shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_count(\n    self, n_defects: int, rng: np.random.Generator = np.random.default_rng()\n):\n    \"\"\"\n    Drop `n_defects` atoms from the geometry randomly. Internally this occurs\n    by setting certain sites to have a SiteFilling set to false indicating\n    no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n    # you may also chain apply_defect_count calls\n    &gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n    # you can also use apply_defect_count on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n            to add more positions\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_count(n_defects)`: to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_density(defect_probability)`:\n            to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n            to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`: to specify\n            Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n            to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n            shows your geometry in your web browser\n    \"\"\"\n\n    location_list = []\n    for location_info in self.enumerate():\n        location_list.append(location_info)\n\n    filled_sites = []\n\n    for index, location_info in enumerate(location_list):\n        if location_info.filling is SiteFilling.filled:\n            filled_sites.append(index)\n\n    if n_defects &gt;= len(filled_sites):\n        raise ValueError(\n            f\"n_defects {n_defects} must be less than the number of filled sites \"\n            f\"({len(filled_sites)})\"\n        )\n\n    for _ in range(n_defects):\n        index = rng.choice(filled_sites)\n        location_list[index] = LocationInfo.create(\n            location_list[index].position,\n            (False if location_list[index].filling is SiteFilling.filled else True),\n        )\n        filled_sites.remove(index)\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.apply_defect_density","title":"apply_defect_density","text":"<pre><code>apply_defect_density(\n    defect_probability: float,\n    rng: Generator = np.random.default_rng(),\n)\n</code></pre> <p>Drop atoms randomly with <code>defect_probability</code> probability (range of 0 to 1). Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.apply_defect_density--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n# you may also chain apply_defect_density calls\n&gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n# you can also use apply_defect_density on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n.apply_defect_density(0.5, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>: to add more positions</li> <li><code>...apply_defect_count(defect_counts).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts) .apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_density(\n    self,\n    defect_probability: float,\n    rng: np.random.Generator = np.random.default_rng(),\n):\n    \"\"\"\n    Drop atoms randomly with `defect_probability` probability (range of 0 to 1).\n    Internally this occurs by setting certain sites to have a SiteFilling\n    set to false indicating no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n    # you may also chain apply_defect_density calls\n    &gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n    # you can also use apply_defect_density on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n    .apply_defect_density(0.5, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n        to add more positions\n        - `...apply_defect_count(defect_counts).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n        .apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n        to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`:\n        to specify Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n        shows your geometry in your web browser\n    \"\"\"\n\n    p = min(1, max(0, defect_probability))\n    location_list = []\n\n    for location_info in self.enumerate():\n        if rng.random() &lt; p:\n            location_list.append(\n                LocationInfo.create(\n                    location_info.position,\n                    (\n                        False\n                        if location_info.filling is SiteFilling.filled\n                        else True\n                    ),\n                )\n            )\n        else:\n            location_list.append(location_info)\n\n    return ListOfLocations(location_list=location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    \"\"\"enumerate all locations in the register.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    return get_atom_arrangement_figure(self, fig_kwargs=fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.rydberg_interaction","title":"rydberg_interaction","text":"<pre><code>rydberg_interaction(**assignments) -&gt; NDArray\n</code></pre> <p>calculate the Rydberg interaction matrix.</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>the values to assign to the variables in the register.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>NDArray</code> <code>NDArray</code> <p>the Rydberg interaction matrix in the lower triangular form.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def rydberg_interaction(self, **assignments) -&gt; NDArray:\n    \"\"\"calculate the Rydberg interaction matrix.\n\n    Args:\n        **assignments: the values to assign to the variables in the register.\n\n    Returns:\n        NDArray: the Rydberg interaction matrix in the lower triangular form.\n\n    \"\"\"\n\n    from bloqade.analog.constants import RB_C6\n\n    # calculate the Interaction matrix\n    V_ij = np.zeros((self.n_sites, self.n_sites))\n    for i, site_i in enumerate(self.enumerate()):\n        pos_i = np.array([float(ele(**assignments)) for ele in site_i.position])\n\n        for j, site_j in enumerate(self.enumerate()):\n            if j &gt;= i:\n                break  # enforce lower triangular form\n\n            pos_j = np.array([float(ele(**assignments)) for ele in site_j.position])\n            r_ij = np.linalg.norm(pos_i - pos_j)\n\n            V_ij[i, j] = RB_C6 / r_ij**6\n\n    return V_ij\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.scale","title":"scale","text":"<pre><code>scale(scale: ScalarType)\n</code></pre> <p>Scale the geometry of your atoms.</p>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.scale--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n# atom positions are now (0,0), (2,2)\n&gt;&gt;&gt; new_reg = reg.scale(2)\n# you may also use scale on pre-defined geometries\n&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n# atoms in the chain will now be 2 um apart versus\n# the default 1 um\n&gt;&gt;&gt; Chain(11).scale(2)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef scale(self, scale: ScalarType):\n    \"\"\"\n    Scale the geometry of your atoms.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n    # atom positions are now (0,0), (2,2)\n    &gt;&gt;&gt; new_reg = reg.scale(2)\n    # you may also use scale on pre-defined geometries\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    # atoms in the chain will now be 2 um apart versus\n    # the default 1 um\n    &gt;&gt;&gt; Chain(11).scale(2)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`:\n        to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    scale = cast(scale)\n    location_list = []\n    for location_info in self.enumerate():\n        x, y = location_info.position\n        new_position = (scale * x, scale * y)\n        location_list.append(\n            LocationInfo.create(new_position, bool(location_info.filling.value))\n        )\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.AtomArrangement.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices [<code>AtomArrangement</code>][bloqade.ir.location.base.AtomArrangement].</p> <ul> <li>[<code>Square</code>][bloqade.ir.location.bravais.Square]</li> <li>[<code>Chain</code>][bloqade.ir.location.bravais.Chain]</li> <li>[<code>Honeycomb</code>][bloqade.ir.location.bravais.Honeycomb]</li> <li>[<code>Triangular</code>][bloqade.ir.location.bravais.Triangular]</li> <li>[<code>Lieb</code>][bloqade.ir.location.bravais.Lieb]</li> <li>[<code>Kagome</code>][bloqade.ir.location.bravais.Kagome]</li> <li>[<code>Rectangular</code>][bloqade.ir.location.bravais.Rectangular]</li> </ul>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.n_atoms","title":"n_atoms  <code>cached</code> <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index: List[int]) -&gt; NDArray\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n    \"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n    # damn! this is like stone age broadcasting\n    vectors = np.array(self.cell_vectors())\n    index = np.array(index)\n    pos = np.sum(vectors.T * index, axis=1)\n    return pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    for index in itertools.product(*[range(n) for n in self.shape]):\n        for pos in self.coordinates(list(index)):\n            position = tuple(self.lattice_spacing * pos)\n            yield LocationInfo.create(position, True)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor: ScalarType) -&gt; BoundedBravais\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n    \"\"\"Scale the current location with a factor.\n\n    (x,y) -&gt; factor*(x,y)\n\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\n    factor = cast(factor)\n    obj = self.__new__(type(self))\n    for f in fields(self):\n        if f.name == \"lattice_spacing\":\n            obj.lattice_spacing = factor * self.lattice_spacing\n        else:\n            setattr(obj, f.name, getattr(self, f.name))\n    return obj\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Chain","title":"Chain","text":"<pre><code>Chain(\n    L: int,\n    *,\n    lattice_spacing: ScalarType = 1.0,\n    vertical_chain: bool = False\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L: int, *, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\n    self.L = L\n    self.lattice_spacing = cast(lattice_spacing)\n    self.vertical_chain = vertical_chain\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Constant","title":"Constant","text":"<pre><code>Constant(value: ScalarType, duration: ScalarType)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;constant&gt; ::= 'constant' &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = value</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>the constant value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the constant waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, value: ScalarType, duration: ScalarType):\n    object.__setattr__(self, \"value\", cast(value))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Field","title":"Field","text":"<p>               Bases: <code>FieldExpr</code></p> <p>Field node in the IR. Which contains collection(s) of [<code>Waveform</code>][bloqade.ir.control.waveform.Waveform]</p> <pre><code>&lt;field&gt; ::= ('field' &lt;spatial modulation&gt;  &lt;padded waveform&gt;)*\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Field.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Field</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Field</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/field.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Field\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Field\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (1/2, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = L1 * L1 * 2.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells in direction a2. n_atoms = L1 * L2 * 2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Kagome","title":"Kagome","text":"<pre><code>Kagome(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = 3 * L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Lieb","title":"Lieb","text":"<pre><code>Lieb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = 3* L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Linear","title":"Linear","text":"<pre><code>Linear(\n    start: ScalarType,\n    stop: ScalarType,\n    duration: ScalarType,\n)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;linear&gt; ::= 'linear' &lt;scalar expr&gt; &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = start + (stop-start)/duration * t</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Scalar</code> <p>start value</p> required <code>stop</code> <code>Scalar</code> <p>stop value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the linear waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, start: ScalarType, stop: ScalarType, duration: ScalarType):\n    object.__setattr__(self, \"start\", cast(start))\n    object.__setattr__(self, \"stop\", cast(stop))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations","title":"ListOfLocations","text":"<pre><code>ListOfLocations(\n    location_list: List[\n        Union[LocationInfo, Tuple[ScalarType, ScalarType]]\n    ] = [],\n)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    location_list: List[Union[LocationInfo, Tuple[ScalarType, ScalarType]]] = [],\n):\n    self.location_list = []\n    for ele in location_list:\n        if isinstance(ele, LocationInfo):\n            self.location_list.append(ele)\n        else:\n            self.location_list.append(LocationInfo.create(ele, True))\n\n    if self.location_list:\n        self.__n_atoms = sum(\n            1 for loc in self.location_list if loc.filling == SiteFilling.filled\n        )\n        self.__n_sites = len(self.location_list)\n        self.__n_vacant = self.__n_sites - self.__n_atoms\n        self.__n_dims = len(self.location_list[0].position)\n    else:\n        self.__n_sites = 0\n        self.__n_atoms = 0\n        self.__n_dims = None\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.ListOfLocations.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self):\n    return iter(self.location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Literal","title":"Literal","text":"<p>               Bases: <code>Real</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Decimal\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/analog/#bloqade.analog.ir.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.ParallelRegister.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>Return the number of atoms in the program.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of atoms in the parsed register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register type is unsupported.</p> Note <p>If the register is of type ParallelRegister, the number of atoms is extracted from its internal register.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Parse):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; n_atoms = builder.n_atoms\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.ParallelRegister.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Poly","title":"Poly","text":"<pre><code>Poly(coeffs: Container[ScalarType], duration: ScalarType)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;poly&gt; ::= &lt;scalar&gt;+\n</code></pre> <p>f(t=0:duration) = c[0] + c[1]t + c[2]t^2 + ... + c[n-1]t^n-1 + c[n]t^n</p> <p>Parameters:</p> Name Type Description Default <code>coeffs</code> <code>Tuple[Scalar]</code> <p>the coefficients c[] of the polynomial.</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, coeffs: Container[ScalarType], duration: ScalarType):\n    object.__setattr__(self, \"coeffs\", tuple(map(cast, coeffs)))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Pulse","title":"Pulse","text":"<p>               Bases: <code>PulseExpr</code></p> <pre><code>&lt;pulse&gt; ::= (&lt;field name&gt; &lt;field&gt;)+\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Pulse.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Pulse</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Pulse</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/pulse.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Pulse\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Pulse\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.PythonFn","title":"PythonFn","text":"<p>               Bases: <code>Instruction</code></p> <pre><code>&lt;python-fn&gt; ::= 'python-fn' &lt;python function def&gt; &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Record","title":"Record","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;record&gt; ::= 'record' &lt;waveform&gt; &lt;var&gt; &lt;side&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0,\n):\n    self.width = width\n    self.height = height\n    self.lattice_spacing_x = cast(lattice_spacing_x)\n    self.lattice_spacing_y = (\n        cast(lattice_spacing_y)\n        if lattice_spacing_y is not None\n        else self.lattice_spacing_x\n    )\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Sample","title":"Sample","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;sample&gt; ::= 'sample' &lt;waveform&gt; &lt;interpolation&gt; &lt;scalar&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Scalar","title":"Scalar","text":"<p>Base class for all scalar expressions.</p> <pre><code>&lt;scalar&gt; ::= &lt;literal&gt;\n| &lt;variable&gt;\n| &lt;default&gt;\n| &lt;negative&gt;\n| &lt;add&gt;\n| &lt;mul&gt;\n| &lt;min&gt;\n| &lt;max&gt;\n| &lt;slice&gt;\n| &lt;inverval&gt;\n\n&lt;mul&gt; ::= &lt;scalar&gt; '*' &lt;scalar&gt;\n&lt;add&gt; ::= &lt;scalar&gt; '+' &lt;scalar&gt;\n&lt;min&gt; ::= 'min' &lt;scalar&gt;+\n&lt;max&gt; ::= 'max' &lt;scalar&gt;+\n&lt;slice&gt; ::= &lt;scalar expr&gt; '[' &lt;interval&gt; ']'\n&lt;interval&gt; ::= &lt;scalar expr&gt; '..' &lt;scalar expr&gt;\n&lt;real&gt; ::= &lt;literal&gt; | &lt;var&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Sequence","title":"Sequence","text":"<p>               Bases: <code>SequenceExpr</code></p> <p>Sequence of a program, which includes pulses informations.</p>"},{"location":"reference/analog/#bloqade.analog.ir.Sequence.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Sequence</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Sequence</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/sequence.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Sequence\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Sequence\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Square","title":"Square","text":"<pre><code>Square(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites in direction a2. n_atoms = L1 * L2, default is L1</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Triangular","title":"Triangular","text":"<pre><code>Triangular(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites along a2 direction, n_atoms = L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Variable","title":"Variable","text":"<p>               Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/analog/#bloqade.analog.ir.Waveform","title":"Waveform","text":"<p>               Bases: <code>HashTrait</code>, <code>CanonicalizeTrait</code></p> <p>Waveform node in the IR.</p> <ul> <li>[<code>&lt;instruction&gt;</code>][bloqade.ir.control.waveform.Instruction]</li> <li>[<code>&lt;smooth&gt;</code>][bloqade.ir.control.waveform.Smooth]</li> <li>[<code>&lt;slice&gt;</code>][bloqade.ir.control.waveform.Slice]</li> <li>[<code>&lt;apppend&gt;</code>][bloqade.ir.control.waveform.Append]</li> <li>[<code>&lt;negative&gt;</code>][bloqade.ir.control.waveform.Negative]</li> <li>[<code>&lt;scale&gt;</code>][bloqade.ir.control.waveform.Scale]</li> <li>[<code>&lt;add&gt;</code>][bloqade.ir.control.waveform.Add]</li> <li>[<code>&lt;record&gt;</code>][bloqade.ir.control.waveform.Record]</li> <li>[<code>&lt;sample&gt;</code>][bloqade.ir.control.waveform.Sample]</li> </ul> <pre><code>&lt;waveform&gt; ::= &lt;instruction&gt;\n    | &lt;smooth&gt;\n    | &lt;slice&gt;\n    | &lt;append&gt;\n    | &lt;negative&gt;\n    | &lt;scale&gt;\n    | &lt;add&gt;\n    | &lt;record&gt;\n    | &lt;sample&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.Waveform.figure","title":"figure","text":"<pre><code>figure(**assignments)\n</code></pre> <p>get figure of the plotting the waveform.</p> <p>Returns:</p> Name Type Description <code>figure</code> <p>a bokeh figure</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>def figure(self, **assignments):\n    \"\"\"get figure of the plotting the waveform.\n\n    Returns:\n        figure: a bokeh figure\n    \"\"\"\n    return get_ir_figure(self, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.cast","title":"cast","text":"<pre><code>cast(py) -&gt; Scalar\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to [<code>Scalar Literal</code>][bloqade.ir.scalar.Literal].</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to [<code>Scalar Variable</code>][bloqade.ir.scalar.Variable].</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n    \"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n\n    Returns:\n        Scalar\n    \"\"\"\n    ret = trycast(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.var","title":"var","text":"<pre><code>var(py: str) -&gt; Variable\n</code></pre> <p>cast string (or list/tuple of strings) to [<code>Variable</code>][bloqade.ir.scalar.Variable].</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n    \"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n\n    Returns:\n       Union[Variable]\n    \"\"\"\n    ret = tryvar(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Variable\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.analog_circuit","title":"analog_circuit","text":""},{"location":"reference/analog/#bloqade.analog.ir.analog_circuit.AnalogCircuit","title":"AnalogCircuit","text":"<p>AnalogCircuit is a dummy type that bundle register and sequence together.</p>"},{"location":"reference/analog/#bloqade.analog.ir.analog_circuit.AnalogCircuit.register","title":"register  <code>property</code>","text":"<pre><code>register\n</code></pre> <p>Get the register of the program.</p> <p>Returns:</p> Type Description <p>register (Union[\"AtomArrangement\", \"ParallelRegister\"])</p> Note <p>If the program is built with [<code>parallelize()</code>][bloqade.builder.emit.Emit.parallelize], The the register will be a [<code>ParallelRegister</code>][bloqade.ir.location.base.ParallelRegister]. Otherwise it will be a [<code>AtomArrangement</code>][bloqade.ir.location.base.AtomArrangement].</p>"},{"location":"reference/analog/#bloqade.analog.ir.analog_circuit.AnalogCircuit.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the program</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the program</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/analog_circuit.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"Interactive visualization of the program\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the program\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control","title":"control","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.field","title":"field","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.field.Field","title":"Field","text":"<p>               Bases: <code>FieldExpr</code></p> <p>Field node in the IR. Which contains collection(s) of [<code>Waveform</code>][bloqade.ir.control.waveform.Waveform]</p> <pre><code>&lt;field&gt; ::= ('field' &lt;spatial modulation&gt;  &lt;padded waveform&gt;)*\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.field.Field.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Field</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Field</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/field.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Field\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Field\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.pulse","title":"pulse","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.pulse.Append","title":"Append","text":"<p>               Bases: <code>AppendTrait</code>, <code>PulseExpr</code></p> <pre><code>&lt;append&gt; ::= &lt;expr&gt;+\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.pulse.Pulse","title":"Pulse","text":"<p>               Bases: <code>PulseExpr</code></p> <pre><code>&lt;pulse&gt; ::= (&lt;field name&gt; &lt;field&gt;)+\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.pulse.Pulse.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Pulse</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Pulse</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/pulse.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Pulse\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Pulse\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.pulse.PulseExpr","title":"PulseExpr","text":"<p>               Bases: <code>HashTrait</code>, <code>CanonicalizeTrait</code></p> <pre><code>&lt;expr&gt; ::= &lt;pulse&gt;\n  | &lt;append&gt;\n  | &lt;slice&gt;\n  | &lt;named&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.sequence","title":"sequence","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.sequence.Sequence","title":"Sequence","text":"<p>               Bases: <code>SequenceExpr</code></p> <p>Sequence of a program, which includes pulses informations.</p>"},{"location":"reference/analog/#bloqade.analog.ir.control.sequence.Sequence.show","title":"show","text":"<pre><code>show(**assignments)\n</code></pre> <p>Interactive visualization of the Sequence</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>assigning the instance value (literal) to the existing variables in the Sequence</p> <code>{}</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/sequence.py</code> <pre><code>def show(self, **assignments):\n    \"\"\"\n    Interactive visualization of the Sequence\n\n    Args:\n        **assignments: assigning the instance value (literal) to the\n            existing variables in the Sequence\n\n    \"\"\"\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.traits","title":"traits","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.traits.SliceTrait","title":"SliceTrait","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.traits.SliceTrait.start","title":"start  <code>cached</code> <code>property</code>","text":"<pre><code>start: Scalar\n</code></pre> <p>Start time of the sliced object</p> <p>Returns:</p> Name Type Description <code>Scalar</code> <code>Scalar</code> <p>The starting time of the sliced object as a</p> <code>Scalar</code> <p>Scalar Expression</p>"},{"location":"reference/analog/#bloqade.analog.ir.control.traits.SliceTrait.stop","title":"stop  <code>cached</code> <code>property</code>","text":"<pre><code>stop: Scalar\n</code></pre> <p>Stop time of the sliced object</p> <p>Returns:</p> Name Type Description <code>Scalar</code> <code>Scalar</code> <p>The stopping time of the sliced object as a</p> <code>Scalar</code> <p>Scalar Expression</p>"},{"location":"reference/analog/#bloqade.analog.ir.control.traits.slice","title":"slice","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.traits.slice.SliceTrait","title":"SliceTrait","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.traits.slice.SliceTrait.start","title":"start  <code>cached</code> <code>property</code>","text":"<pre><code>start: Scalar\n</code></pre> <p>Start time of the sliced object</p> <p>Returns:</p> Name Type Description <code>Scalar</code> <code>Scalar</code> <p>The starting time of the sliced object as a</p> <code>Scalar</code> <p>Scalar Expression</p>"},{"location":"reference/analog/#bloqade.analog.ir.control.traits.slice.SliceTrait.stop","title":"stop  <code>cached</code> <code>property</code>","text":"<pre><code>stop: Scalar\n</code></pre> <p>Stop time of the sliced object</p> <p>Returns:</p> Name Type Description <code>Scalar</code> <code>Scalar</code> <p>The stopping time of the sliced object as a</p> <code>Scalar</code> <p>Scalar Expression</p>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform","title":"waveform","text":""},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Add","title":"Add","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;add&gt; ::= &lt;waveform&gt; '+' &lt;waveform&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.AlignedWaveform","title":"AlignedWaveform","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;padded waveform&gt; ::= &lt;waveform&gt; | &lt;waveform&gt; &lt;alignment&gt; &lt;value&gt;\n\n&lt;alignment&gt; ::= 'left aligned' | 'right aligned'\n&lt;value&gt; ::= 'left value' | 'right value' | &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Append","title":"Append","text":"<p>               Bases: <code>AppendTrait</code>, <code>Waveform</code></p> <pre><code>&lt;append&gt; ::= &lt;waveform&gt;+\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Constant","title":"Constant","text":"<pre><code>Constant(value: ScalarType, duration: ScalarType)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;constant&gt; ::= 'constant' &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = value</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>the constant value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the constant waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, value: ScalarType, duration: ScalarType):\n    object.__setattr__(self, \"value\", cast(value))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Instruction","title":"Instruction","text":"<p>               Bases: <code>Waveform</code></p> <p>Instruction node in the IR.</p> <ul> <li>[<code>&lt;linear&gt;</code>][bloqade.ir.control.waveform.Linear]</li> <li>[<code>&lt;constant&gt;</code>][bloqade.ir.control.waveform.Constant]</li> <li>[<code>&lt;poly&gt;</code>][bloqade.ir.control.waveform.Poly]</li> <li>[<code>&lt;python-fn&gt;</code>][bloqade.ir.control.waveform.PythonFn]</li> </ul> <pre><code>&lt;instruction&gt; ::= &lt;linear&gt;\n    | &lt;constant&gt;\n    | &lt;poly&gt;\n    | &lt;python-fn&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Linear","title":"Linear","text":"<pre><code>Linear(\n    start: ScalarType,\n    stop: ScalarType,\n    duration: ScalarType,\n)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;linear&gt; ::= 'linear' &lt;scalar expr&gt; &lt;scalar expr&gt;\n</code></pre> <p>f(t=0:duration) = start + (stop-start)/duration * t</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Scalar</code> <p>start value</p> required <code>stop</code> <code>Scalar</code> <p>stop value</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the linear waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, start: ScalarType, stop: ScalarType, duration: ScalarType):\n    object.__setattr__(self, \"start\", cast(start))\n    object.__setattr__(self, \"stop\", cast(stop))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Negative","title":"Negative","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;negative&gt; ::= '-' &lt;waveform&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Poly","title":"Poly","text":"<pre><code>Poly(coeffs: Container[ScalarType], duration: ScalarType)\n</code></pre> <p>               Bases: <code>Instruction</code></p> <pre><code>&lt;poly&gt; ::= &lt;scalar&gt;+\n</code></pre> <p>f(t=0:duration) = c[0] + c[1]t + c[2]t^2 + ... + c[n-1]t^n-1 + c[n]t^n</p> <p>Parameters:</p> Name Type Description Default <code>coeffs</code> <code>Tuple[Scalar]</code> <p>the coefficients c[] of the polynomial.</p> required <code>duration</code> <code>Scalar</code> <p>the time span of the waveform.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>@beartype\ndef __init__(self, coeffs: Container[ScalarType], duration: ScalarType):\n    object.__setattr__(self, \"coeffs\", tuple(map(cast, coeffs)))\n    object.__setattr__(self, \"duration\", cast(duration))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.PythonFn","title":"PythonFn","text":"<p>               Bases: <code>Instruction</code></p> <pre><code>&lt;python-fn&gt; ::= 'python-fn' &lt;python function def&gt; &lt;scalar expr&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Record","title":"Record","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;record&gt; ::= 'record' &lt;waveform&gt; &lt;var&gt; &lt;side&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Sample","title":"Sample","text":"<p>               Bases: <code>Waveform</code></p> <pre><code>&lt;sample&gt; ::= 'sample' &lt;waveform&gt; &lt;interpolation&gt; &lt;scalar&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Scale","title":"Scale","text":"<pre><code>Scale(scalar, waveform: Waveform)\n</code></pre> <p>               Bases: <code>Waveform</code></p> <pre><code>&lt;scale&gt; ::= &lt;scalar expr&gt; '*' &lt;waveform&gt;\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>def __init__(self, scalar, waveform: Waveform):\n    object.__setattr__(self, \"scalar\", cast(scalar))\n    object.__setattr__(self, \"waveform\", waveform)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Slice","title":"Slice","text":"<p>               Bases: <code>SliceTrait</code>, <code>Waveform</code></p> <pre><code>&lt;slice&gt; ::= &lt;waveform&gt; &lt;scalar.interval&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Smooth","title":"Smooth","text":"<pre><code>Smooth(radius, kernel, waveform)\n</code></pre> <p>               Bases: <code>Waveform</code></p> <pre><code>&lt;smooth&gt; ::= 'smooth' &lt;kernel&gt; &lt;waveform&gt;\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>def __init__(self, radius, kernel, waveform):\n    if isinstance(kernel, str):\n        if kernel == \"Gaussian\":\n            kernel = GaussianKernel\n        elif kernel == \"Logistic\":\n            kernel = LogisticKernel\n        elif kernel == \"Sigmoid\":\n            kernel = SigmoidKernel\n        elif kernel == \"Triangle\":\n            kernel = TriangleKernel\n        elif kernel == \"Uniform\":\n            kernel = UniformKernel\n        elif kernel == \"Parabolic\":\n            kernel = ParabolicKernel\n        elif kernel == \"Biweight\":\n            kernel = BiweightKernel\n        elif kernel == \"Triweight\":\n            kernel = TriweightKernel\n        elif kernel == \"Tricube\":\n            kernel = TricubeKernel\n        elif kernel == \"Cosine\":\n            kernel = CosineKernel\n        else:\n            raise ValueError(f\"Invalid kernel: {kernel}\")\n\n    object.__setattr__(self, \"radius\", cast(radius))\n    object.__setattr__(self, \"kernel\", kernel)\n    object.__setattr__(self, \"waveform\", waveform)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Waveform","title":"Waveform","text":"<p>               Bases: <code>HashTrait</code>, <code>CanonicalizeTrait</code></p> <p>Waveform node in the IR.</p> <ul> <li>[<code>&lt;instruction&gt;</code>][bloqade.ir.control.waveform.Instruction]</li> <li>[<code>&lt;smooth&gt;</code>][bloqade.ir.control.waveform.Smooth]</li> <li>[<code>&lt;slice&gt;</code>][bloqade.ir.control.waveform.Slice]</li> <li>[<code>&lt;apppend&gt;</code>][bloqade.ir.control.waveform.Append]</li> <li>[<code>&lt;negative&gt;</code>][bloqade.ir.control.waveform.Negative]</li> <li>[<code>&lt;scale&gt;</code>][bloqade.ir.control.waveform.Scale]</li> <li>[<code>&lt;add&gt;</code>][bloqade.ir.control.waveform.Add]</li> <li>[<code>&lt;record&gt;</code>][bloqade.ir.control.waveform.Record]</li> <li>[<code>&lt;sample&gt;</code>][bloqade.ir.control.waveform.Sample]</li> </ul> <pre><code>&lt;waveform&gt; ::= &lt;instruction&gt;\n    | &lt;smooth&gt;\n    | &lt;slice&gt;\n    | &lt;append&gt;\n    | &lt;negative&gt;\n    | &lt;scale&gt;\n    | &lt;add&gt;\n    | &lt;record&gt;\n    | &lt;sample&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.control.waveform.Waveform.figure","title":"figure","text":"<pre><code>figure(**assignments)\n</code></pre> <p>get figure of the plotting the waveform.</p> <p>Returns:</p> Name Type Description <code>figure</code> <p>a bokeh figure</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/control/waveform.py</code> <pre><code>def figure(self, **assignments):\n    \"\"\"get figure of the plotting the waveform.\n\n    Returns:\n        figure: a bokeh figure\n    \"\"\"\n    return get_ir_figure(self, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location","title":"location","text":""},{"location":"reference/analog/#bloqade.analog.ir.location.start","title":"start  <code>module-attribute</code>","text":"<pre><code>start = ListOfLocations()\n</code></pre> <p>A Program starting point, alias of empty [<code>ListOfLocations</code>][bloqade.ir.location.list.ListOfLocations].</p> <ul> <li>Next possible steps to build your program are:</li> <li>Specify which level coupling to address with:<ul> <li><code>start.rydberg</code>: for [<code>Rydberg</code>][bloqade.builder.coupling.Rydberg]     Level coupling</li> <li><code>start.hyperfine</code>: for [<code>Hyperfine</code>][bloqade.builder.coupling.Hyperfine]     Level coupling</li> <li>LOCKOUT: You cannot add atoms to your geometry after specifying level coupling.</li> </ul> </li> <li>continue/start building your geometry with:<ul> <li><code>start.add_position()</code>: to add atom(s) to current register. It will accept:<ul> <li>A single coordinate, represented as a tuple (e.g. <code>(5,6)</code>) with a value that   can either be:<ul> <li>integers: <code>(5,6)</code></li> <li>floats: <code>(5.1, 2.5)</code></li> <li>strings (for later variable assignment): <code>(\"x\", \"y\")</code></li> <li>[<code>Scalar</code>][bloqade.ir.scalar.Scalar] objects: <code>(2*cast(\"x\"), 5+cast(\"y\"))</code></li> </ul> </li> <li>A list of coordinates, represented as a list of types mentioned previously.</li> <li>A numpy array with shape (n, 2) where n is the total number of atoms</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement","title":"AtomArrangement","text":"<pre><code>AtomArrangement(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims: int\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.add_position","title":"add_position","text":"<pre><code>add_position(\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[\n        Union[BoolArray, List[bool], bool]\n    ] = None,\n) -&gt; ListOfLocations\n</code></pre> <p>Add a position or multiple positions to a pre-existing geometry.</p> <p><code>add_position</code> is capable of accepting: - A single tuple for one atom coordinate: <code>(1.0, 2.5)</code> - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.] - A numpy array of shape (N, 2) where N is the number of atoms</p> <p>You may also intersperse variables anywhere a value may be present.</p> <p>You can also pass in an optional argument which determines the atom \"filling\" (whether or not at a specified coordinate an atom should be present).</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.add_position--usage-example","title":"Usage Example:","text":"<pre><code># single coordinate\n&gt;&gt;&gt; reg = start.add_position((0,0))\n# you may chain add_position calls\n&gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n# you can add variables anywhere a value may be present\n&gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n# and specify your atom fillings\n&gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n[True, False])\n# alternatively you could use one boolean to specify\n# all coordinates should be empty/filled\n&gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n(5.2, 2.2)], False)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def add_position(\n    self,\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[Union[BoolArray, List[bool], bool]] = None,\n) -&gt; \"ListOfLocations\":\n    \"\"\"\n    Add a position or multiple positions to a pre-existing geometry.\n\n    `add_position` is capable of accepting:\n    - A single tuple for one atom coordinate: `(1.0, 2.5)`\n    - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.]\n    - A numpy array of shape (N, 2) where N is the number of atoms\n\n    You may also intersperse variables anywhere a value may be present.\n\n    You can also pass in an optional argument which determines the atom \"filling\"\n    (whether or not at a specified coordinate an atom should be present).\n\n    ### Usage Example:\n    ```\n    # single coordinate\n    &gt;&gt;&gt; reg = start.add_position((0,0))\n    # you may chain add_position calls\n    &gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n    # you can add variables anywhere a value may be present\n    &gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n    # and specify your atom fillings\n    &gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n    [True, False])\n    # alternatively you could use one boolean to specify\n    # all coordinates should be empty/filled\n    &gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n    (5.2, 2.2)], False)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`: to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`: to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    if is_bearable(position, PositionArray) and is_bearable(\n        filling, Optional[BoolArray]\n    ):\n        return self.add_position_ndarray(position, filling)\n    elif is_bearable(position, List[Tuple[ScalarType, ScalarType]]) and is_bearable(\n        filling, Optional[List[bool]]\n    ):\n        return self.add_position_list_tuples(position, filling)\n    elif is_bearable(position, Tuple[ScalarType, ScalarType]) and is_bearable(\n        filling, Optional[bool]\n    ):\n        return self.add_position_single_tupe(position, filling)\n    else:\n        raise TypeError(\"Invalid input types for add_position provided!\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.apply_defect_count","title":"apply_defect_count","text":"<pre><code>apply_defect_count(\n    n_defects: int, rng: Generator = np.random.default_rng()\n)\n</code></pre> <p>Drop <code>n_defects</code> atoms from the geometry randomly. Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.apply_defect_count--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n# you may also chain apply_defect_count calls\n&gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n# you can also use apply_defect_count on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>:     to add more positions</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_density(defect_probability)</code>:     to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>:     to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify     Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>:     to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>:     shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_count(\n    self, n_defects: int, rng: np.random.Generator = np.random.default_rng()\n):\n    \"\"\"\n    Drop `n_defects` atoms from the geometry randomly. Internally this occurs\n    by setting certain sites to have a SiteFilling set to false indicating\n    no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n    # you may also chain apply_defect_count calls\n    &gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n    # you can also use apply_defect_count on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n            to add more positions\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_count(n_defects)`: to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_density(defect_probability)`:\n            to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n            to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`: to specify\n            Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n            to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n            shows your geometry in your web browser\n    \"\"\"\n\n    location_list = []\n    for location_info in self.enumerate():\n        location_list.append(location_info)\n\n    filled_sites = []\n\n    for index, location_info in enumerate(location_list):\n        if location_info.filling is SiteFilling.filled:\n            filled_sites.append(index)\n\n    if n_defects &gt;= len(filled_sites):\n        raise ValueError(\n            f\"n_defects {n_defects} must be less than the number of filled sites \"\n            f\"({len(filled_sites)})\"\n        )\n\n    for _ in range(n_defects):\n        index = rng.choice(filled_sites)\n        location_list[index] = LocationInfo.create(\n            location_list[index].position,\n            (False if location_list[index].filling is SiteFilling.filled else True),\n        )\n        filled_sites.remove(index)\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.apply_defect_density","title":"apply_defect_density","text":"<pre><code>apply_defect_density(\n    defect_probability: float,\n    rng: Generator = np.random.default_rng(),\n)\n</code></pre> <p>Drop atoms randomly with <code>defect_probability</code> probability (range of 0 to 1). Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.apply_defect_density--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n# you may also chain apply_defect_density calls\n&gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n# you can also use apply_defect_density on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n.apply_defect_density(0.5, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>: to add more positions</li> <li><code>...apply_defect_count(defect_counts).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts) .apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_density(\n    self,\n    defect_probability: float,\n    rng: np.random.Generator = np.random.default_rng(),\n):\n    \"\"\"\n    Drop atoms randomly with `defect_probability` probability (range of 0 to 1).\n    Internally this occurs by setting certain sites to have a SiteFilling\n    set to false indicating no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n    # you may also chain apply_defect_density calls\n    &gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n    # you can also use apply_defect_density on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n    .apply_defect_density(0.5, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n        to add more positions\n        - `...apply_defect_count(defect_counts).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n        .apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n        to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`:\n        to specify Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n        shows your geometry in your web browser\n    \"\"\"\n\n    p = min(1, max(0, defect_probability))\n    location_list = []\n\n    for location_info in self.enumerate():\n        if rng.random() &lt; p:\n            location_list.append(\n                LocationInfo.create(\n                    location_info.position,\n                    (\n                        False\n                        if location_info.filling is SiteFilling.filled\n                        else True\n                    ),\n                )\n            )\n        else:\n            location_list.append(location_info)\n\n    return ListOfLocations(location_list=location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    \"\"\"enumerate all locations in the register.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    return get_atom_arrangement_figure(self, fig_kwargs=fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.rydberg_interaction","title":"rydberg_interaction","text":"<pre><code>rydberg_interaction(**assignments) -&gt; NDArray\n</code></pre> <p>calculate the Rydberg interaction matrix.</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>the values to assign to the variables in the register.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>NDArray</code> <code>NDArray</code> <p>the Rydberg interaction matrix in the lower triangular form.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def rydberg_interaction(self, **assignments) -&gt; NDArray:\n    \"\"\"calculate the Rydberg interaction matrix.\n\n    Args:\n        **assignments: the values to assign to the variables in the register.\n\n    Returns:\n        NDArray: the Rydberg interaction matrix in the lower triangular form.\n\n    \"\"\"\n\n    from bloqade.analog.constants import RB_C6\n\n    # calculate the Interaction matrix\n    V_ij = np.zeros((self.n_sites, self.n_sites))\n    for i, site_i in enumerate(self.enumerate()):\n        pos_i = np.array([float(ele(**assignments)) for ele in site_i.position])\n\n        for j, site_j in enumerate(self.enumerate()):\n            if j &gt;= i:\n                break  # enforce lower triangular form\n\n            pos_j = np.array([float(ele(**assignments)) for ele in site_j.position])\n            r_ij = np.linalg.norm(pos_i - pos_j)\n\n            V_ij[i, j] = RB_C6 / r_ij**6\n\n    return V_ij\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.scale","title":"scale","text":"<pre><code>scale(scale: ScalarType)\n</code></pre> <p>Scale the geometry of your atoms.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.scale--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n# atom positions are now (0,0), (2,2)\n&gt;&gt;&gt; new_reg = reg.scale(2)\n# you may also use scale on pre-defined geometries\n&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n# atoms in the chain will now be 2 um apart versus\n# the default 1 um\n&gt;&gt;&gt; Chain(11).scale(2)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef scale(self, scale: ScalarType):\n    \"\"\"\n    Scale the geometry of your atoms.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n    # atom positions are now (0,0), (2,2)\n    &gt;&gt;&gt; new_reg = reg.scale(2)\n    # you may also use scale on pre-defined geometries\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    # atoms in the chain will now be 2 um apart versus\n    # the default 1 um\n    &gt;&gt;&gt; Chain(11).scale(2)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`:\n        to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    scale = cast(scale)\n    location_list = []\n    for location_info in self.enumerate():\n        x, y = location_info.position\n        new_position = (scale * x, scale * y)\n        location_list.append(\n            LocationInfo.create(new_position, bool(location_info.filling.value))\n        )\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.AtomArrangement.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices [<code>AtomArrangement</code>][bloqade.ir.location.base.AtomArrangement].</p> <ul> <li>[<code>Square</code>][bloqade.ir.location.bravais.Square]</li> <li>[<code>Chain</code>][bloqade.ir.location.bravais.Chain]</li> <li>[<code>Honeycomb</code>][bloqade.ir.location.bravais.Honeycomb]</li> <li>[<code>Triangular</code>][bloqade.ir.location.bravais.Triangular]</li> <li>[<code>Lieb</code>][bloqade.ir.location.bravais.Lieb]</li> <li>[<code>Kagome</code>][bloqade.ir.location.bravais.Kagome]</li> <li>[<code>Rectangular</code>][bloqade.ir.location.bravais.Rectangular]</li> </ul>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.n_atoms","title":"n_atoms  <code>cached</code> <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index: List[int]) -&gt; NDArray\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n    \"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n    # damn! this is like stone age broadcasting\n    vectors = np.array(self.cell_vectors())\n    index = np.array(index)\n    pos = np.sum(vectors.T * index, axis=1)\n    return pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    for index in itertools.product(*[range(n) for n in self.shape]):\n        for pos in self.coordinates(list(index)):\n            position = tuple(self.lattice_spacing * pos)\n            yield LocationInfo.create(position, True)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor: ScalarType) -&gt; BoundedBravais\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n    \"\"\"Scale the current location with a factor.\n\n    (x,y) -&gt; factor*(x,y)\n\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\n    factor = cast(factor)\n    obj = self.__new__(type(self))\n    for f in fields(self):\n        if f.name == \"lattice_spacing\":\n            obj.lattice_spacing = factor * self.lattice_spacing\n        else:\n            setattr(obj, f.name, getattr(self, f.name))\n    return obj\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Chain","title":"Chain","text":"<pre><code>Chain(\n    L: int,\n    *,\n    lattice_spacing: ScalarType = 1.0,\n    vertical_chain: bool = False\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L: int, *, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\n    self.L = L\n    self.lattice_spacing = cast(lattice_spacing)\n    self.vertical_chain = vertical_chain\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (1/2, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = L1 * L1 * 2.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells in direction a2. n_atoms = L1 * L2 * 2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Kagome","title":"Kagome","text":"<pre><code>Kagome(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = 3 * L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Lieb","title":"Lieb","text":"<pre><code>Lieb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = 3* L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations","title":"ListOfLocations","text":"<pre><code>ListOfLocations(\n    location_list: List[\n        Union[LocationInfo, Tuple[ScalarType, ScalarType]]\n    ] = [],\n)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    location_list: List[Union[LocationInfo, Tuple[ScalarType, ScalarType]]] = [],\n):\n    self.location_list = []\n    for ele in location_list:\n        if isinstance(ele, LocationInfo):\n            self.location_list.append(ele)\n        else:\n            self.location_list.append(LocationInfo.create(ele, True))\n\n    if self.location_list:\n        self.__n_atoms = sum(\n            1 for loc in self.location_list if loc.filling == SiteFilling.filled\n        )\n        self.__n_sites = len(self.location_list)\n        self.__n_vacant = self.__n_sites - self.__n_atoms\n        self.__n_dims = len(self.location_list[0].position)\n    else:\n        self.__n_sites = 0\n        self.__n_atoms = 0\n        self.__n_dims = None\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.ListOfLocations.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self):\n    return iter(self.location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.ParallelRegister.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>Return the number of atoms in the program.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of atoms in the parsed register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register type is unsupported.</p> Note <p>If the register is of type ParallelRegister, the number of atoms is extracted from its internal register.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Parse):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; n_atoms = builder.n_atoms\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.ParallelRegister.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0,\n):\n    self.width = width\n    self.height = height\n    self.lattice_spacing_x = cast(lattice_spacing_x)\n    self.lattice_spacing_y = (\n        cast(lattice_spacing_y)\n        if lattice_spacing_y is not None\n        else self.lattice_spacing_x\n    )\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Square","title":"Square","text":"<pre><code>Square(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites in direction a2. n_atoms = L1 * L2, default is L1</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.Triangular","title":"Triangular","text":"<pre><code>Triangular(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites along a2 direction, n_atoms = L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais","title":"bravais","text":""},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais","title":"BoundedBravais","text":"<pre><code>BoundedBravais(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.__match_args__","title":"__match_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__match_args__ = ('shape', 'lattice_spacing')\n</code></pre> <p>Base classe for Bravais lattices [<code>AtomArrangement</code>][bloqade.ir.location.base.AtomArrangement].</p> <ul> <li>[<code>Square</code>][bloqade.ir.location.bravais.Square]</li> <li>[<code>Chain</code>][bloqade.ir.location.bravais.Chain]</li> <li>[<code>Honeycomb</code>][bloqade.ir.location.bravais.Honeycomb]</li> <li>[<code>Triangular</code>][bloqade.ir.location.bravais.Triangular]</li> <li>[<code>Lieb</code>][bloqade.ir.location.bravais.Lieb]</li> <li>[<code>Kagome</code>][bloqade.ir.location.bravais.Kagome]</li> <li>[<code>Rectangular</code>][bloqade.ir.location.bravais.Rectangular]</li> </ul>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.n_atoms","title":"n_atoms  <code>cached</code> <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>dimension of the lattice</p> <p>Returns:</p> Name Type Description <code>int</code> <p>dimension of the lattice</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.coordinates","title":"coordinates","text":"<pre><code>coordinates(index: List[int]) -&gt; NDArray\n</code></pre> <p>calculate the coordinates of a cell in the lattice given the cell index.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef coordinates(self, index: List[int]) -&gt; NDArray:\n    \"\"\"calculate the coordinates of a cell in the lattice\n    given the cell index.\n    \"\"\"\n    # damn! this is like stone age broadcasting\n    vectors = np.array(self.cell_vectors())\n    index = np.array(index)\n    pos = np.sum(vectors.T * index, axis=1)\n    return pos + np.array(self.cell_atoms())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    for index in itertools.product(*[range(n) for n in self.shape]):\n        for pos in self.coordinates(list(index)):\n            position = tuple(self.lattice_spacing * pos)\n            yield LocationInfo.create(position, True)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.BoundedBravais.scale","title":"scale","text":"<pre><code>scale(factor: ScalarType) -&gt; BoundedBravais\n</code></pre> <p>Scale the current location with a factor.</p> <p>(x,y) -&gt; factor*(x,y)</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>str | Real | Decimal | Scalar</code> <p>scale factor</p> required <p>Returns:</p> Name Type Description <code>BoundedBravais</code> <code>BoundedBravais</code> <p>The lattice with the scaled locations</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef scale(self, factor: ScalarType) -&gt; \"BoundedBravais\":\n    \"\"\"Scale the current location with a factor.\n\n    (x,y) -&gt; factor*(x,y)\n\n    Args:\n        factor (str | Real | Decimal | Scalar): scale factor\n\n    Returns:\n        BoundedBravais: The lattice with the scaled locations\n    \"\"\"\n    factor = cast(factor)\n    obj = self.__new__(type(self))\n    for f in fields(self):\n        if f.name == \"lattice_spacing\":\n            obj.lattice_spacing = factor * self.lattice_spacing\n        else:\n            setattr(obj, f.name, getattr(self, f.name))\n    return obj\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Chain","title":"Chain","text":"<pre><code>Chain(\n    L: int,\n    *,\n    lattice_spacing: ScalarType = 1.0,\n    vertical_chain: bool = False\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Chain lattice.</p> <ul> <li>1D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0).</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in the chain</p> required <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L: int, *, lattice_spacing: ScalarType = 1.0, vertical_chain: bool = False\n):\n    self.L = L\n    self.lattice_spacing = cast(lattice_spacing)\n    self.vertical_chain = vertical_chain\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Honeycomb","title":"Honeycomb","text":"<pre><code>Honeycomb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Honeycomb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (2 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (1/2, 1/(2*sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = L1 * L1 * 2.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells in direction a2. n_atoms = L1 * L2 * 2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Kagome","title":"Kagome","text":"<pre><code>Kagome(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Kagome lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0.25 ,0.25sqrt(3))</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = 3 * L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Lieb","title":"Lieb","text":"<pre><code>Lieb(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Lieb lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (0, 1)</li> </ul> </li> <li>unit cell (3 atom(s))<ul> <li>loc1 (0, 0)</li> <li>loc2 (0.5, 0)</li> <li>loc3 (0 ,0.5)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of unit cells in linear direction. n_atoms = 3* L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of unit cells along a2 direction, n_atoms = 3 * L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Rectangular","title":"Rectangular","text":"<pre><code>Rectangular(\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Rectangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>number of sites in x direction.</p> required <code>height</code> <code>int</code> <p>number of sites in y direction.</p> required <code>lattice_spacing_x</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <code>lattice_spacing_y</code> <code>(Scalar, Real)</code> <p>lattice spacing in y direction. optional.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    width: int,\n    height: int,\n    *,\n    lattice_spacing_x: ScalarType = 1.0,\n    lattice_spacing_y: ScalarType = 1.0,\n):\n    self.width = width\n    self.height = height\n    self.lattice_spacing_x = cast(lattice_spacing_x)\n    self.lattice_spacing_y = (\n        cast(lattice_spacing_y)\n        if lattice_spacing_y is not None\n        else self.lattice_spacing_x\n    )\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Square","title":"Square","text":"<pre><code>Square(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Square lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1,0)</li> <li>a2 = (0,1)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0,0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L1</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L1 * L1.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites in direction a2. n_atoms = L1 * L2, default is L1</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.bravais.Triangular","title":"Triangular","text":"<pre><code>Triangular(\n    L1: int,\n    L2: Optional[int] = None,\n    *,\n    lattice_spacing: ScalarType = 1.0\n)\n</code></pre> <p>               Bases: <code>BoundedBravais</code></p> <p>Triangular lattice.</p> <ul> <li>2D lattice</li> <li>primitive (cell) vector(s)<ul> <li>a1 = (1, 0)</li> <li>a2 = (1/2, sqrt(3)/2)</li> </ul> </li> <li>unit cell (1 atom(s))<ul> <li>loc (0, 0)</li> </ul> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>L</code> <code>int</code> <p>number of sites in linear direction. n_atoms = L * L.</p> required <code>L2</code> <code>Optional[int]</code> <p>number of sites along a2 direction, n_atoms = L1 * L2, default is L1.</p> <code>None</code> <code>lattice_spacing</code> <code>(Scalar, Real)</code> <p>lattice spacing. Defaults to 1.0.</p> <code>1.0</code> <ul> <li>Possible Next:     continue with <code>.</code> to see possible next step in auto-prompt     supported setting (IPython, IDE ...)</li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/bravais.py</code> <pre><code>@beartype\ndef __init__(\n    self, L1: int, L2: Optional[int] = None, *, lattice_spacing: ScalarType = 1.0\n):\n    if L2 is None:\n        L2 = L1\n    self.L1 = L1\n    self.L2 = L2\n    self.lattice_spacing = cast(lattice_spacing)\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location","title":"location","text":""},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement","title":"AtomArrangement","text":"<pre><code>AtomArrangement(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms: int\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims: int\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites: int\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant: int\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.add_position","title":"add_position","text":"<pre><code>add_position(\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[\n        Union[BoolArray, List[bool], bool]\n    ] = None,\n) -&gt; ListOfLocations\n</code></pre> <p>Add a position or multiple positions to a pre-existing geometry.</p> <p><code>add_position</code> is capable of accepting: - A single tuple for one atom coordinate: <code>(1.0, 2.5)</code> - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.] - A numpy array of shape (N, 2) where N is the number of atoms</p> <p>You may also intersperse variables anywhere a value may be present.</p> <p>You can also pass in an optional argument which determines the atom \"filling\" (whether or not at a specified coordinate an atom should be present).</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.add_position--usage-example","title":"Usage Example:","text":"<pre><code># single coordinate\n&gt;&gt;&gt; reg = start.add_position((0,0))\n# you may chain add_position calls\n&gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n# you can add variables anywhere a value may be present\n&gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n# and specify your atom fillings\n&gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n[True, False])\n# alternatively you could use one boolean to specify\n# all coordinates should be empty/filled\n&gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n(5.2, 2.2)], False)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def add_position(\n    self,\n    position: Union[\n        PositionArray,\n        List[Tuple[ScalarType, ScalarType]],\n        Tuple[ScalarType, ScalarType],\n    ],\n    filling: Optional[Union[BoolArray, List[bool], bool]] = None,\n) -&gt; \"ListOfLocations\":\n    \"\"\"\n    Add a position or multiple positions to a pre-existing geometry.\n\n    `add_position` is capable of accepting:\n    - A single tuple for one atom coordinate: `(1.0, 2.5)`\n    - A list of tuples: `[(0.0, 1.0), (2.0,1.5), etc.]\n    - A numpy array of shape (N, 2) where N is the number of atoms\n\n    You may also intersperse variables anywhere a value may be present.\n\n    You can also pass in an optional argument which determines the atom \"filling\"\n    (whether or not at a specified coordinate an atom should be present).\n\n    ### Usage Example:\n    ```\n    # single coordinate\n    &gt;&gt;&gt; reg = start.add_position((0,0))\n    # you may chain add_position calls\n    &gt;&gt;&gt; reg_plus_two = reg.add_position([(2,2),(5.0, 2.1)])\n    # you can add variables anywhere a value may be present\n    &gt;&gt;&gt; reg_with_var = reg_plus_two.add_position((\"x\", \"y\"))\n    # and specify your atom fillings\n    &gt;&gt;&gt; reg_with_filling = reg_with_var.add_position([(3.1, 0.0), (4.1, 2.2)],\n    [True, False])\n    # alternatively you could use one boolean to specify\n    # all coordinates should be empty/filled\n    &gt;&gt;&gt; reg_with_more_filling = reg_with_filling.add_positions([(3.1, 2.9),\n    (5.2, 2.2)], False)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`: to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`: to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    if is_bearable(position, PositionArray) and is_bearable(\n        filling, Optional[BoolArray]\n    ):\n        return self.add_position_ndarray(position, filling)\n    elif is_bearable(position, List[Tuple[ScalarType, ScalarType]]) and is_bearable(\n        filling, Optional[List[bool]]\n    ):\n        return self.add_position_list_tuples(position, filling)\n    elif is_bearable(position, Tuple[ScalarType, ScalarType]) and is_bearable(\n        filling, Optional[bool]\n    ):\n        return self.add_position_single_tupe(position, filling)\n    else:\n        raise TypeError(\"Invalid input types for add_position provided!\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.apply_defect_count","title":"apply_defect_count","text":"<pre><code>apply_defect_count(\n    n_defects: int, rng: Generator = np.random.default_rng()\n)\n</code></pre> <p>Drop <code>n_defects</code> atoms from the geometry randomly. Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.apply_defect_count--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n# you may also chain apply_defect_count calls\n&gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n# you can also use apply_defect_count on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>:     to add more positions</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts)     .apply_defect_density(defect_probability)</code>:     to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>:     to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify     Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>:     to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>:     shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_count(\n    self, n_defects: int, rng: np.random.Generator = np.random.default_rng()\n):\n    \"\"\"\n    Drop `n_defects` atoms from the geometry randomly. Internally this occurs\n    by setting certain sites to have a SiteFilling set to false indicating\n    no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_count(2, custom_rng)\n    # you may also chain apply_defect_count calls\n    &gt;&gt;&gt; reg.apply_defect_count(2, custom_rng)\n    # you can also use apply_defect_count on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)]).apply_defect_count(1, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n            to add more positions\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_count(n_defects)`: to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n            .apply_defect_density(defect_probability)`:\n            to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n            to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`: to specify\n            Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n            to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n            shows your geometry in your web browser\n    \"\"\"\n\n    location_list = []\n    for location_info in self.enumerate():\n        location_list.append(location_info)\n\n    filled_sites = []\n\n    for index, location_info in enumerate(location_list):\n        if location_info.filling is SiteFilling.filled:\n            filled_sites.append(index)\n\n    if n_defects &gt;= len(filled_sites):\n        raise ValueError(\n            f\"n_defects {n_defects} must be less than the number of filled sites \"\n            f\"({len(filled_sites)})\"\n        )\n\n    for _ in range(n_defects):\n        index = rng.choice(filled_sites)\n        location_list[index] = LocationInfo.create(\n            location_list[index].position,\n            (False if location_list[index].filling is SiteFilling.filled else True),\n        )\n        filled_sites.remove(index)\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.apply_defect_density","title":"apply_defect_density","text":"<pre><code>apply_defect_density(\n    defect_probability: float,\n    rng: Generator = np.random.default_rng(),\n)\n</code></pre> <p>Drop atoms randomly with <code>defect_probability</code> probability (range of 0 to 1). Internally this occurs by setting certain sites to have a SiteFilling set to false indicating no atom is present at the coordinate.</p> <p>A default numpy-based Random Number Generator is used but you can explicitly override this by passing in your own.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.apply_defect_density--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n&gt;&gt;&gt; import numpy as np\n# set a custom seed for a numpy-based RNG\n&gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n# randomly remove two atoms from the geometry\n&gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n# you may also chain apply_defect_density calls\n&gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n# you can also use apply_defect_density on custom geometries\n&gt;&gt;&gt; from bloqade import start\n&gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n.apply_defect_density(0.5, custom_rng)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...apply_defect_count(defect_counts).add_position(positions)</code>: to add more positions</li> <li><code>...apply_defect_count(defect_counts).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...apply_defect_count(defect_counts) .apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...apply_defect_count(defect_counts).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).rydberg</code>: to specify Rydberg coupling</li> <li><code>...apply_defect_count(defect_counts).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...apply_defect_count(defect_counts).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef apply_defect_density(\n    self,\n    defect_probability: float,\n    rng: np.random.Generator = np.random.default_rng(),\n):\n    \"\"\"\n    Drop atoms randomly with `defect_probability` probability (range of 0 to 1).\n    Internally this occurs by setting certain sites to have a SiteFilling\n    set to false indicating no atom is present at the coordinate.\n\n    A default numpy-based Random Number Generator is used but you can\n    explicitly override this by passing in your own.\n\n    ### Usage Example:\n\n    ```\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    &gt;&gt;&gt; import numpy as np\n    # set a custom seed for a numpy-based RNG\n    &gt;&gt;&gt; custom_rng = np.random.default_rng(888)\n    # randomly remove two atoms from the geometry\n    &gt;&gt;&gt; reg = Chain(11).apply_defect_density(0.2, custom_rng)\n    # you may also chain apply_defect_density calls\n    &gt;&gt;&gt; reg.apply_defect_count(0.1, custom_rng)\n    # you can also use apply_defect_density on custom geometries\n    &gt;&gt;&gt; from bloqade import start\n    &gt;&gt;&gt; start.add_position([(0,0), (1,1)])\n    .apply_defect_density(0.5, custom_rng)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...apply_defect_count(defect_counts).add_position(positions)`:\n        to add more positions\n        - `...apply_defect_count(defect_counts).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...apply_defect_count(defect_counts)\n        .apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...apply_defect_count(defect_counts).scale(scale)`:\n        to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...apply_defect_count(defect_counts).rydberg`:\n        to specify Rydberg coupling\n        - `...apply_defect_count(defect_counts).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...apply_defect_count(defect_counts).show()`:\n        shows your geometry in your web browser\n    \"\"\"\n\n    p = min(1, max(0, defect_probability))\n    location_list = []\n\n    for location_info in self.enumerate():\n        if rng.random() &lt; p:\n            location_list.append(\n                LocationInfo.create(\n                    location_info.position,\n                    (\n                        False\n                        if location_info.filling is SiteFilling.filled\n                        else True\n                    ),\n                )\n            )\n        else:\n            location_list.append(location_info)\n\n    return ListOfLocations(location_list=location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.enumerate","title":"enumerate","text":"<pre><code>enumerate() -&gt; Generator[LocationInfo, None, None]\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self) -&gt; Generator[LocationInfo, None, None]:\n    \"\"\"enumerate all locations in the register.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.figure","title":"figure","text":"<pre><code>figure(fig_kwargs=None, **assignments)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def figure(self, fig_kwargs=None, **assignments):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    return get_atom_arrangement_figure(self, fig_kwargs=fig_kwargs, **assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.rydberg_interaction","title":"rydberg_interaction","text":"<pre><code>rydberg_interaction(**assignments) -&gt; NDArray\n</code></pre> <p>calculate the Rydberg interaction matrix.</p> <p>Parameters:</p> Name Type Description Default <code>**assignments</code> <p>the values to assign to the variables in the register.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>NDArray</code> <code>NDArray</code> <p>the Rydberg interaction matrix in the lower triangular form.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def rydberg_interaction(self, **assignments) -&gt; NDArray:\n    \"\"\"calculate the Rydberg interaction matrix.\n\n    Args:\n        **assignments: the values to assign to the variables in the register.\n\n    Returns:\n        NDArray: the Rydberg interaction matrix in the lower triangular form.\n\n    \"\"\"\n\n    from bloqade.analog.constants import RB_C6\n\n    # calculate the Interaction matrix\n    V_ij = np.zeros((self.n_sites, self.n_sites))\n    for i, site_i in enumerate(self.enumerate()):\n        pos_i = np.array([float(ele(**assignments)) for ele in site_i.position])\n\n        for j, site_j in enumerate(self.enumerate()):\n            if j &gt;= i:\n                break  # enforce lower triangular form\n\n            pos_j = np.array([float(ele(**assignments)) for ele in site_j.position])\n            r_ij = np.linalg.norm(pos_i - pos_j)\n\n            V_ij[i, j] = RB_C6 / r_ij**6\n\n    return V_ij\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.scale","title":"scale","text":"<pre><code>scale(scale: ScalarType)\n</code></pre> <p>Scale the geometry of your atoms.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.scale--usage-example","title":"Usage Example:","text":"<pre><code>&gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n# atom positions are now (0,0), (2,2)\n&gt;&gt;&gt; new_reg = reg.scale(2)\n# you may also use scale on pre-defined geometries\n&gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n# atoms in the chain will now be 2 um apart versus\n# the default 1 um\n&gt;&gt;&gt; Chain(11).scale(2)\n</code></pre> <ul> <li>Next possible steps are:</li> <li>Continuing to build your geometry via:<ul> <li><code>...add_position(positions).add_position(positions)</code>:     to add more positions</li> <li><code>...add_position(positions).apply_defect_count(n_defects)</code>: to randomly drop out n_atoms</li> <li><code>...add_position(positions).apply_defect_density(defect_probability)</code>: to drop out atoms with a certain probability</li> <li><code>...add_position(positions).scale(scale)</code>: to scale the geometry</li> </ul> </li> <li>Targeting a level coupling once you're done with the atom geometry:<ul> <li><code>...add_position(positions).rydberg</code>: to specify Rydberg coupling</li> <li><code>...add_position(positions).hyperfine</code>: to specify Hyperfine coupling</li> </ul> </li> <li>Visualizing your atom geometry:<ul> <li><code>...add_position(positions).show()</code>: shows your geometry in your web browser</li> </ul> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef scale(self, scale: ScalarType):\n    \"\"\"\n    Scale the geometry of your atoms.\n\n    ### Usage Example:\n    ```\n    &gt;&gt;&gt; reg = start.add_position([(0,0), (1,1)])\n    # atom positions are now (0,0), (2,2)\n    &gt;&gt;&gt; new_reg = reg.scale(2)\n    # you may also use scale on pre-defined geometries\n    &gt;&gt;&gt; from bloqade.analog.atom_arrangement import Chain\n    # atoms in the chain will now be 2 um apart versus\n    # the default 1 um\n    &gt;&gt;&gt; Chain(11).scale(2)\n    ```\n\n    - Next possible steps are:\n    - Continuing to build your geometry via:\n        - `...add_position(positions).add_position(positions)`:\n            to add more positions\n        - `...add_position(positions).apply_defect_count(n_defects)`:\n        to randomly drop out n_atoms\n        - `...add_position(positions).apply_defect_density(defect_probability)`:\n        to drop out atoms with a certain probability\n        - `...add_position(positions).scale(scale)`: to scale the geometry\n    - Targeting a level coupling once you're done with the atom geometry:\n        - `...add_position(positions).rydberg`:\n        to specify Rydberg coupling\n        - `...add_position(positions).hyperfine`:\n        to specify Hyperfine coupling\n    - Visualizing your atom geometry:\n        - `...add_position(positions).show()`:\n        shows your geometry in your web browser\n\n    \"\"\"\n\n    scale = cast(scale)\n    location_list = []\n    for location_info in self.enumerate():\n        x, y = location_info.position\n        new_position = (scale * x, scale * y)\n        location_list.append(\n            LocationInfo.create(new_position, bool(location_info.filling.value))\n        )\n\n    return ListOfLocations(location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.AtomArrangement.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations","title":"ListOfLocations","text":"<pre><code>ListOfLocations(\n    location_list: List[\n        Union[LocationInfo, Tuple[ScalarType, ScalarType]]\n    ] = [],\n)\n</code></pre> <p>               Bases: <code>AtomArrangement</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>@beartype\ndef __init__(\n    self,\n    location_list: List[Union[LocationInfo, Tuple[ScalarType, ScalarType]]] = [],\n):\n    self.location_list = []\n    for ele in location_list:\n        if isinstance(ele, LocationInfo):\n            self.location_list.append(ele)\n        else:\n            self.location_list.append(LocationInfo.create(ele, True))\n\n    if self.location_list:\n        self.__n_atoms = sum(\n            1 for loc in self.location_list if loc.filling == SiteFilling.filled\n        )\n        self.__n_sites = len(self.location_list)\n        self.__n_vacant = self.__n_sites - self.__n_atoms\n        self.__n_dims = len(self.location_list[0].position)\n    else:\n        self.__n_sites = 0\n        self.__n_atoms = 0\n        self.__n_dims = None\n\n    super().__init__()\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>number of atoms (filled sites) in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations.n_dims","title":"n_dims  <code>property</code>","text":"<pre><code>n_dims\n</code></pre> <p>number of dimensions in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations.n_sites","title":"n_sites  <code>property</code>","text":"<pre><code>n_sites\n</code></pre> <p>number of sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations.n_vacant","title":"n_vacant  <code>property</code>","text":"<pre><code>n_vacant\n</code></pre> <p>number of vacant sites in the register.</p>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ListOfLocations.enumerate","title":"enumerate","text":"<pre><code>enumerate()\n</code></pre> <p>enumerate all locations in the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def enumerate(self):\n    return iter(self.location_list)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ParallelRegister","title":"ParallelRegister","text":"<pre><code>ParallelRegister(parent: Optional[Builder] = None)\n</code></pre> <p>               Bases: <code>ProgramStart</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/builder/base.py</code> <pre><code>def __init__(\n    self,\n    parent: Optional[\"Builder\"] = None,\n) -&gt; None:\n    self.__parent__ = parent\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ParallelRegister.n_atoms","title":"n_atoms  <code>property</code>","text":"<pre><code>n_atoms\n</code></pre> <p>Return the number of atoms in the program.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of atoms in the parsed register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register type is unsupported.</p> Note <p>If the register is of type ParallelRegister, the number of atoms is extracted from its internal register.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Parse):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; n_atoms = builder.n_atoms\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ParallelRegister.show","title":"show","text":"<pre><code>show(**assignments) -&gt; None\n</code></pre> <p>Display the current program being defined with the given arguments and batch ID.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Additional arguments for display.</p> <code>()</code> <code>batch_id</code> <code>int</code> <p>The batch ID to be displayed. Defaults to 0.</p> <code>0</code> Note <p>This method uses the <code>display_builder</code> function to render the builder's state.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; class MyBuilder(Show):\n...     pass\n&gt;&gt;&gt; builder = MyBuilder()\n&gt;&gt;&gt; builder.show()\n&gt;&gt;&gt; builder.show(batch_id=1)\n&gt;&gt;&gt; builder.show('arg1', 'arg2', batch_id=2)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def show(self, **assignments) -&gt; None:\n    display_ir(self, assignments)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.location.location.ParallelRegisterInfo","title":"ParallelRegisterInfo","text":"<pre><code>ParallelRegisterInfo(parallel_register: ParallelRegister)\n</code></pre> <p>ParallelRegisterInfo</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/location/location.py</code> <pre><code>def __init__(self, parallel_register: ParallelRegister):\n    atom_arrangement = parallel_register.atom_arrangement\n    cluster_spacing = parallel_register.cluster_spacing\n\n    if atom_arrangement.n_atoms &gt; 0:\n        # calculate bounding box\n        # of this register\n        location_iter = atom_arrangement.enumerate()\n        (x, y) = next(location_iter).position\n        x_min = x\n        x_max = x\n        y_min = y\n        y_max = y\n\n        for location_info in location_iter:\n            (x, y) = location_info.position\n            x_min = x.min(x_min)\n            x_max = x.max(x_max)\n            y_min = y.min(y_min)\n            y_max = y.max(y_max)\n\n        shift_x = (x_max - x_min) + cluster_spacing\n        shift_y = (y_max - y_min) + cluster_spacing\n\n        register_locations = [\n            list(location_info.position)\n            for location_info in atom_arrangement.enumerate()\n        ]\n        register_filling = [\n            location_info.filling.value\n            for location_info in atom_arrangement.enumerate()\n        ]\n        shift_vectors = [[shift_x, cast(0)], [cast(0), shift_y]]\n    else:\n        raise ValueError(\"No locations to parallelize.\")\n\n    self.register_locations = register_locations\n    self.register_filling = register_filling\n    self.shift_vectors = shift_vectors\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine","title":"routine","text":""},{"location":"reference/analog/#bloqade.analog.ir.routine.base","title":"base","text":""},{"location":"reference/analog/#bloqade.analog.ir.routine.base.Routine","title":"Routine","text":"<p>               Bases: <code>RoutineBase</code></p> <p>Result of parsing a completed Builder string.</p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineParse","title":"RoutineParse","text":"<p>               Bases: <code>Parse</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineParse.parse","title":"parse","text":"<pre><code>parse() -&gt; Routine\n</code></pre> <p>Parse the program to return a Routine object.</p> <p>Returns:</p> Name Type Description <code>Routine</code> <code>Routine</code> <p>The parsed routine object.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the routine cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/base.py</code> <pre><code>def parse(self: \"RoutineBase\") -&gt; \"Routine\":\n    if self.source is None:\n        raise ValueError(\"Cannot parse a routine without a source Builder.\")\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineParse.parse_circuit","title":"parse_circuit","text":"<pre><code>parse_circuit() -&gt; AnalogCircuit\n</code></pre> <p>Parse the analog circuit from the program.</p> <p>Returns:</p> Name Type Description <code>AnalogCircuit</code> <code>AnalogCircuit</code> <p>The parsed analog circuit.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the circuit cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/base.py</code> <pre><code>def parse_circuit(self: \"RoutineBase\") -&gt; AnalogCircuit:\n    return self.circuit\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineParse.parse_register","title":"parse_register","text":"<pre><code>parse_register() -&gt; (\n    Union[AtomArrangement, ParallelRegister]\n)\n</code></pre> <p>Parse the arrangement of atoms in the program.</p> <p>Returns:</p> Type Description <code>Union[AtomArrangement, ParallelRegister]</code> <p>Union[AtomArrangement, ParallelRegister]: The parsed atom arrangement or parallel register.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the register cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/base.py</code> <pre><code>def parse_register(self: \"RoutineBase\") -&gt; Union[AtomArrangement, ParallelRegister]:\n    return self.circuit.register\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineParse.parse_sequence","title":"parse_sequence","text":"<pre><code>parse_sequence() -&gt; Sequence\n</code></pre> <p>Parse the pulse sequence part of the program.</p> <p>Returns:</p> Name Type Description <code>Sequence</code> <code>Sequence</code> <p>The parsed pulse sequence.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence cannot be parsed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/base.py</code> <pre><code>def parse_sequence(self: \"RoutineBase\") -&gt; Sequence:\n    return self.circuit.sequence\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineShow","title":"RoutineShow","text":"<p>               Bases: <code>Show</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.base.RoutineShow.show","title":"show","text":"<pre><code>show(*args, batch_index: int = 0)\n</code></pre> <p>Show an interactive plot of the routine.</p> int <p>which parameter set out of the batch to use. Default is 0. If there are no batch parameters, use 0.</p> <p>*args: Any     Specify the parameters that are defined in the <code>.args([...])</code> build step.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/base.py</code> <pre><code>def show(self: \"RoutineBase\", *args, batch_index: int = 0):\n    \"\"\"Show an interactive plot of the routine.\n\n    batch_index: int\n        which parameter set out of the batch to use. Default is 0.\n        If there are no batch parameters, use 0.\n\n    *args: Any\n        Specify the parameters that are defined in the `.args([...])` build step.\n\n    \"\"\"\n    if self.source is None:\n        raise ValueError(\"Cannot show a routine without a source Builder.\")\n\n    return self.source.show(*args, batch_id=batch_index)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade","title":"bloqade","text":""},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation","title":"BloqadeEmulation  <code>dataclass</code>","text":"<pre><code>BloqadeEmulation(\n    task_data: TaskData,\n    compile_cache: Optional[CompileCache] = None,\n)\n</code></pre> <p>Data class to hold the Hamiltonian and metadata for a given set of parameters</p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation.hamiltonian","title":"hamiltonian  <code>property</code>","text":"<pre><code>hamiltonian: RydbergHamiltonian\n</code></pre> <p>Return the Hamiltonian object for the given task data.</p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation.metadata","title":"metadata  <code>property</code>","text":"<pre><code>metadata: NamedTuple\n</code></pre> <p>The metadata for the given task data.</p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation.evolve","title":"evolve","text":"<pre><code>evolve(\n    state: Optional[StateVector] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-07,\n    rtol: float = 1e-14,\n    nsteps: int = 2147483647,\n    times: Sequence[float] = (),\n    interaction_picture: bool = False,\n) -&gt; Iterator[StateVector]\n</code></pre> <p>Evolve an initial state vector using the Hamiltonian</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>Optional[StateVector]</code> <p>The initial state vector to</p> <code>None</code> <code>solver_name</code> <code>str</code> <p>Which SciPy Solver to use. Defaults to</p> <code>'dop853'</code> <code>atol</code> <code>float</code> <p>Absolute tolerance for ODE solver. Defaults</p> <code>1e-07</code> <code>rtol</code> <code>float</code> <p>Relative tolerance for adaptive step in</p> <code>1e-14</code> <code>nsteps</code> <code>int</code> <p>Maximum number of steps allowed per integration</p> <code>2147483647</code> <code>times</code> <code>Sequence[float]</code> <p>The times to evaluate the state vector</p> <code>()</code> <code>interaction_picture</code> <code>bool</code> <p>Use the interaction picture when</p> <code>False</code> <p>Returns:</p> Type Description <code>Iterator[StateVector]</code> <p>Iterator[StateVector]: An iterator of the state vectors at each time step.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>def evolve(\n    self,\n    state: Optional[StateVector] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-7,\n    rtol: float = 1e-14,\n    nsteps: int = 2147483647,\n    times: Sequence[float] = (),\n    interaction_picture: bool = False,\n) -&gt; Iterator[StateVector]:\n    \"\"\"Evolve an initial state vector using the Hamiltonian\n\n    Args:\n        state (Optional[StateVector], optional): The initial state vector to\n        evolve. if not provided, the zero state will be used. Defaults to None.\n        solver_name (str, optional): Which SciPy Solver to use. Defaults to\n        \"dop853\".\n        atol (float, optional): Absolute tolerance for ODE solver. Defaults\n        to 1e-14.\n        rtol (float, optional): Relative tolerance for adaptive step in\n        ODE solver. Defaults to 1e-7.\n        nsteps (int, optional): Maximum number of steps allowed per integration\n        step. Defaults to 2147483647.\n        times (Sequence[float], optional): The times to evaluate the state vector\n        at. Defaults to (). If not provided the state will be evaluated at\n        the end of the bloqade program.\n        interaction_picture (bool, optional): Use the interaction picture when\n        solving schrodinger equation. Defaults to False.\n\n    Returns:\n        Iterator[StateVector]: An iterator of the state vectors at each time step.\n\n    \"\"\"\n    state = self.zero_state(np.complex128) if state is None else state\n\n    U = AnalogGate(self.hamiltonian)\n\n    return U.apply(\n        state,\n        times=times,\n        solver_name=solver_name,\n        atol=atol,\n        rtol=rtol,\n        nsteps=nsteps,\n        interaction_picture=interaction_picture,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation.fock_state","title":"fock_state","text":"<pre><code>fock_state(\n    fock_state_str: str, dtype: dtype = np.float64\n) -&gt; StateVector\n</code></pre> <p>Return the fock state for the given Hamiltonian.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>def fock_state(\n    self, fock_state_str: str, dtype: np.dtype = np.float64\n) -&gt; StateVector:\n    \"\"\"Return the fock state for the given Hamiltonian.\"\"\"\n    index = self.hamiltonian.space.fock_state_to_index(fock_state_str)\n    data = np.zeros(self.hamiltonian.space.size, dtype=dtype)\n    data[index] = 1\n    return StateVector(data, self.hamiltonian.space)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadeEmulation.zero_state","title":"zero_state","text":"<pre><code>zero_state(dtype: dtype = np.float64) -&gt; StateVector\n</code></pre> <p>Return the zero state for the given Hamiltonian.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>def zero_state(self, dtype: np.dtype = np.float64) -&gt; StateVector:\n    \"\"\"Return the zero state for the given Hamiltonian.\"\"\"\n    return self.hamiltonian.space.zero_state(dtype)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadePythonRoutine","title":"BloqadePythonRoutine","text":"<p>               Bases: <code>RoutineBase</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadePythonRoutine.hamiltonian","title":"hamiltonian","text":"<pre><code>hamiltonian(\n    *args: LiteralType,\n    blockade_radius: float = 0.0,\n    use_hyperfine: bool = False,\n    waveform_runtime: str = \"interpret\",\n    cache_matrices: bool = False\n) -&gt; List[BloqadeEmulation]\n</code></pre> <p>Generates a list of BloqadeEmulation objects which contain the Hamiltonian of your program.</p> <p>If you have a variable(s) in your program you have assigned multiple values via <code>batch_assign()</code> there will be multiple <code>BloqadeEmulation</code> objects, one for each value. On the other hand if the program only assumes a singular value per each variable, there will only be one <code>BloqadeEmulation</code> object but it will still be encapsulated in a list.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>LiteralType</code> <p>If your program has a variable that was declared as run-time assignable via <code>.args</code> you may pass a value to it here. If there are multiple variables declared via <code>.args</code> the order in which you assign values to those variables through this argument should follow the order in which the declaration occurred.</p> <code>()</code> <code>blockade_radius</code> <code>float</code> <p>The radius in which atoms blockade eachother. Default value is 0.0 micrometers.</p> <code>0.0</code> <code>use_hyperfine</code> <code>bool</code> <p>Should the Hamiltonian account for hyperfine levels. Default value is False.</p> <code>False</code> <code>waveform_runtime</code> <code>str</code> <p>Specify which runtime to use for waveforms. If \"numba\" is specify the waveform is compiled, otherwise it is interpreted via the \"interpret\" argument. Defaults to \"interpret\".</p> <code>'interpret'</code> <code>cache_matrices</code> <code>bool</code> <p>Speed up Hamiltonian generation by reusing data (when possible) from previously generated Hamiltonians. Default value is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[BloqadeEmulation]</code> <p>List[BloqadeEmulation]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>def hamiltonian(\n    self,\n    *args: LiteralType,\n    blockade_radius: float = 0.0,\n    use_hyperfine: bool = False,\n    waveform_runtime: str = \"interpret\",\n    cache_matrices: bool = False,\n) -&gt; List[BloqadeEmulation]:\n    \"\"\"\n    Generates a list of BloqadeEmulation objects which contain the Hamiltonian of your program.\n\n    If you have a variable(s) in your program you have assigned multiple values via `batch_assign()`\n    there will be multiple `BloqadeEmulation` objects, one for each value. On the other hand\n    if the program only assumes a singular value per each variable, there will only be\n    one `BloqadeEmulation` object but it will still be encapsulated in a list.\n\n\n    Args:\n        *args (LiteralType): If your program has a variable that was declared as run-time assignable\n            via `.args` you may pass a value to it here. If there are multiple\n            variables declared via `.args` the order in which you assign values to those variables\n            through this argument should follow the order in which the declaration occurred.\n        blockade_radius (float): The radius in which atoms blockade eachother. Default value is 0.0 micrometers.\n        use_hyperfine (bool): Should the Hamiltonian account for hyperfine levels. Default value is False.\n        waveform_runtime (str): Specify which runtime to use for waveforms. If \"numba\" is specify the waveform\n            is compiled, otherwise it is interpreted via the \"interpret\" argument. Defaults to \"interpret\".\n        cache_matrices (bool): Speed up Hamiltonian generation by reusing data (when possible) from previously generated Hamiltonians.\n            Default value is False.\n\n    Returns:\n        List[BloqadeEmulation]\n\n    \"\"\"\n    ir_iter = self._generate_ir(\n        args, blockade_radius, waveform_runtime, use_hyperfine\n    )\n\n    if cache_matrices:\n        compile_cache = CompileCache()\n    else:\n        compile_cache = None\n\n    return [\n        BloqadeEmulation(task_data, compile_cache=compile_cache)\n        for task_data in ir_iter\n    ]\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadePythonRoutine.run","title":"run","text":"<pre><code>run(\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    blockade_radius: float = 0.0,\n    waveform_runtime: str = \"interpret\",\n    interaction_picture: bool = False,\n    cache_matrices: bool = False,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-07,\n    rtol: float = 1e-14,\n    nsteps: int = 2147483647,\n) -&gt; LocalBatch\n</code></pre> <p>Run the current program using bloqade python backend</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots after running state vector simulation</p> required <code>args</code> <code>Tuple[LiteralType, ...]</code> <p>The values for parameters defined</p> <code>()</code> <code>name</code> <code>Optional[str]</code> <p>Name to give this run. Defaults to None.</p> <code>None</code> <code>blockade_radius</code> <code>float</code> <p>Use the Blockade subspace given a</p> <code>0.0</code> <code>waveform_runtime</code> <code>str</code> <p>(bool, optional): Use Numba to compile the waveforms,</p> <code>'interpret'</code> <code>interaction_picture</code> <code>bool</code> <p>Use the interaction picture when</p> <code>False</code> <code>cache_matrices</code> <code>bool</code> <p>Reuse previously evaluated matrcies when</p> <code>False</code> <code>multiprocessing</code> <code>bool</code> <p>Use multiple processes to process the</p> <code>False</code> <code>num_workers</code> <code>Optional[int]</code> <p>Number of processes to run with</p> <code>None</code> <code>solver_name</code> <code>str</code> <p>Which SciPy Solver to use. Defaults to</p> <code>'dop853'</code> <code>atol</code> <code>float</code> <p>Absolute tolerance for ODE solver. Defaults to</p> <code>1e-07</code> <code>rtol</code> <code>float</code> <p>Relative tolerance for adaptive step in ODE solver.</p> <code>1e-14</code> <code>nsteps</code> <code>int</code> <p>Maximum number of steps allowed per integration</p> <code>2147483647</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>Cannot use multiprocessing and cache_matrices at the same time.</p> <p>Returns:</p> Name Type Description <code>LocalBatch</code> <code>LocalBatch</code> <p>Batch of local tasks that have been executed.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>@beartype\ndef run(\n    self,\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    blockade_radius: float = 0.0,\n    waveform_runtime: str = \"interpret\",\n    interaction_picture: bool = False,\n    cache_matrices: bool = False,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-7,\n    rtol: float = 1e-14,\n    nsteps: int = 2_147_483_647,\n) -&gt; LocalBatch:\n    \"\"\"Run the current program using bloqade python backend\n\n    Args:\n        shots (int): number of shots after running state vector simulation\n        args (Tuple[LiteralType, ...], optional): The values for parameters defined\n        in `args`. Defaults to ().\n        name (Optional[str], optional): Name to give this run. Defaults to None.\n        blockade_radius (float, optional): Use the Blockade subspace given a\n        particular radius. Defaults to 0.0.\n        waveform_runtime: (bool, optional): Use Numba to compile the waveforms,\n        Defaults to False.\n        interaction_picture (bool, optional): Use the interaction picture when\n        solving schrodinger equation. Defaults to False.\n        cache_matrices (bool, optional): Reuse previously evaluated matrcies when\n        possible. Defaults to False.\n        multiprocessing (bool, optional): Use multiple processes to process the\n        batches. Defaults to False.\n        num_workers (Optional[int], optional): Number of processes to run with\n        multiprocessing. Defaults to None.\n        solver_name (str, optional): Which SciPy Solver to use. Defaults to\n        \"dop853\".\n        atol (float, optional): Absolute tolerance for ODE solver. Defaults to\n        1e-14.\n        rtol (float, optional): Relative tolerance for adaptive step in ODE solver.\n        Defaults to 1e-7.\n        nsteps (int, optional): Maximum number of steps allowed per integration\n        step. Defaults to 2_147_483_647, the maximum value.\n\n    Raises:\n        ValueError: Cannot use multiprocessing and cache_matrices at the same time.\n\n    Returns:\n        LocalBatch: Batch of local tasks that have been executed.\n    \"\"\"\n    if multiprocessing and cache_matrices:\n        raise ValueError(\n            \"Cannot use multiprocessing and cache_matrices at the same time.\"\n        )\n\n    compile_options = dict(\n        shots=shots,\n        args=args,\n        name=name,\n        blockade_radius=blockade_radius,\n        cache_matrices=cache_matrices,\n        waveform_runtime=waveform_runtime,\n    )\n\n    solver_options = dict(\n        multiprocessing=multiprocessing,\n        num_workers=num_workers,\n        solver_name=solver_name,\n        atol=atol,\n        rtol=rtol,\n        nsteps=nsteps,\n        interaction_picture=interaction_picture,\n    )\n\n    batch = self._compile(**compile_options)\n    batch._run(**solver_options)\n\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.BloqadePythonRoutine.run_callback","title":"run_callback","text":"<pre><code>run_callback(\n    callback: Callable[\n        [StateVector, NamedTuple, RydbergHamiltonian, Any],\n        Any,\n    ],\n    program_args: Tuple[LiteralType, ...] = (),\n    callback_args: Tuple = (),\n    ignore_exceptions: bool = False,\n    blockade_radius: float = 0.0,\n    waveform_runtime: str = \"interpret\",\n    interaction_picture: bool = False,\n    cache_matrices: bool = False,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-07,\n    rtol: float = 1e-14,\n    nsteps: int = 2147483647,\n    use_hyperfine: bool = False,\n) -&gt; List\n</code></pre> <p>Run state-vector simulation with a callback to access full state-vector from emulator</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[StateVector, Metadata, RydbergHamiltonian, Any], Any]</code> required <code>program_args</code> <code>Tuple[LiteralType, ...]</code> <p>The values for parameters</p> <code>()</code> <code>callback_args</code> <code>Tuple[Any, ...]</code> <p>Extra arguments to pass into</p> <code>()</code> <code>ignore_exceptions</code> <code>bool</code> <p>(bool, optional) If <code>True</code> any exception raised during</p> <code>False</code> <code>blockade_radius</code> <code>float</code> <p>Use the Blockade subspace given a</p> <code>0.0</code> <code>waveform_runtime</code> <code>str</code> <p>(str, optional): Specify which runtime to use for</p> <code>'interpret'</code> <code>interaction_picture</code> <code>bool</code> <p>Use the interaction picture when</p> <code>False</code> <code>cache_matrices</code> <code>bool</code> <p>Reuse previously evaluated matrcies when</p> <code>False</code> <code>multiprocessing</code> <code>bool</code> <p>Use multiple processes to process the</p> <code>False</code> <code>num_workers</code> <code>Optional[int]</code> <p>Number of processes to run with</p> <code>None</code> <code>solver_name</code> <code>str</code> <p>Which SciPy Solver to use. Defaults to</p> <code>'dop853'</code> <code>atol</code> <code>float</code> <p>Absolute tolerance for ODE solver. Defaults to</p> <code>1e-07</code> <code>rtol</code> <code>float</code> <p>Relative tolerance for adaptive step in ODE solver.</p> <code>1e-14</code> <code>nsteps</code> <code>int</code> <p>Maximum number of steps allowed per integration</p> <code>2147483647</code> <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>List of resulting outputs from the callbacks</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Raises the first error that occurs, only if</p> Note <p>For the <code>callback</code> function, first argument is the many-body wavefunction as a 1D complex numpy array, the second argument is of type <code>Metadata</code> which is a Named Tuple where the fields correspond to the parameters of that given task, RydbergHamiltonian is the object that contains the Hamiltonian used to generate the evolution for that task, Finally any optional positional arguments are allowed after that. The return value can be anything, the results will be collected in a list for each task in the batch.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/bloqade.py</code> <pre><code>@beartype\ndef run_callback(\n    self,\n    callback: Callable[[StateVector, NamedTuple, RydbergHamiltonian, Any], Any],\n    program_args: Tuple[LiteralType, ...] = (),\n    callback_args: Tuple = (),\n    ignore_exceptions: bool = False,\n    blockade_radius: float = 0.0,\n    waveform_runtime: str = \"interpret\",\n    interaction_picture: bool = False,\n    cache_matrices: bool = False,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    solver_name: str = \"dop853\",\n    atol: float = 1e-7,\n    rtol: float = 1e-14,\n    nsteps: int = 2_147_483_647,\n    use_hyperfine: bool = False,\n) -&gt; List:\n    \"\"\"Run state-vector simulation with a callback to access full state-vector from\n    emulator\n\n    Args:\n        callback (Callable[[StateVector, Metadata, RydbergHamiltonian, Any], Any]):\n        The callback function to run for each task in batch. See note below for more\n        details about the signature of the function.\n        program_args (Tuple[LiteralType, ...], optional): The values for parameters\n        defined in `args`. Defaults to ().\n        callback_args (Tuple[Any,...], optional): Extra arguments to pass into\n        ignore_exceptions: (bool, optional) If `True` any exception raised during\n        a task will be saved instead of the resulting output of the callback,\n        otherwise the first exception by task number will be raised after *all*\n        tasks have executed. Defaults to False.\n        blockade_radius (float, optional): Use the Blockade subspace given a\n        particular radius. Defaults to 0.0.\n        waveform_runtime: (str, optional): Specify which runtime to use for\n        waveforms. Defaults to \"interpret\".\n        interaction_picture (bool, optional): Use the interaction picture when\n        solving schrodinger equation. Defaults to False.\n        cache_matrices (bool, optional): Reuse previously evaluated matrcies when\n        possible. Defaults to False.\n        multiprocessing (bool, optional): Use multiple processes to process the\n        batches. Defaults to False.\n        num_workers (Optional[int], optional): Number of processes to run with\n        multiprocessing. Defaults to None.\n        solver_name (str, optional): Which SciPy Solver to use. Defaults to\n        \"dop853\".\n        atol (float, optional): Absolute tolerance for ODE solver. Defaults to\n        1e-14.\n        rtol (float, optional): Relative tolerance for adaptive step in ODE solver.\n        Defaults to 1e-7.\n        nsteps (int, optional): Maximum number of steps allowed per integration\n        step. Defaults to 2_147_483_647, the maximum value.\n\n    Returns:\n        List: List of resulting outputs from the callbacks\n\n    Raises:\n        RuntimeError: Raises the first error that occurs, only if\n        `ignore_exceptions=False`.\n\n    Note:\n        For the `callback` function, first argument is the many-body wavefunction\n        as a 1D complex numpy array, the second argument is of type `Metadata` which\n        is a Named Tuple where the fields correspond to the parameters of that given\n        task, RydbergHamiltonian is the object that contains the Hamiltonian used to\n        generate the evolution for that task, Finally any optional positional\n        arguments are allowed after that. The return value can be anything, the\n        results will be collected in a list for each task in the batch.\n\n\n    \"\"\"\n    if multiprocessing:\n        from multiprocessing import Queue, Process, cpu_count\n    else:\n        from queue import Queue\n\n    if cache_matrices:\n        compile_cache = CompileCache()\n    else:\n        compile_cache = None\n\n    solver_args = dict(\n        solver_name=solver_name,\n        atol=atol,\n        rtol=rtol,\n        nsteps=nsteps,\n        interaction_picture=interaction_picture,\n    )\n\n    runner = self.EmuRunner(\n        compile_cache=compile_cache,\n        solver_args=solver_args,\n        callback=callback,\n        callback_args=callback_args,\n    )\n\n    tasks = Queue()\n    results = Queue()\n\n    total_tasks = 0\n    ir_iter = self._generate_ir(\n        program_args, blockade_radius, waveform_runtime, use_hyperfine\n    )\n    for task_data in ir_iter:\n        task_number = task_data.task_id\n        emulator_ir = task_data.emulator_ir\n        metadata = task_data.metadata_dict\n        total_tasks += 1\n        tasks.put((task_number, (emulator_ir, metadata)))\n\n    workers = []\n    if multiprocessing:\n        num_workers = max(int(num_workers or cpu_count()), 1)\n        num_workers = min(total_tasks, num_workers)\n\n        for _ in range(num_workers):\n            worker = Process(\n                target=BloqadePythonRoutine.process_tasks,\n                args=(runner, tasks, results),\n            )\n            worker.start()\n\n            workers.append(worker)\n    else:\n        self.process_tasks(runner, tasks, results)\n\n    # blocks until all\n    # results have been fetched\n    # from the id_results Queue\n    id_results = []\n    for i in range(total_tasks):\n        id_results.append(results.get())\n\n    if workers:\n        for worker in workers:\n            worker.join()\n\n        tasks.close()\n        results.close()\n\n    id_results.sort(key=lambda x: x[0])\n    results = []\n\n    for task_id, result in id_results:\n        if not ignore_exceptions and isinstance(result, BaseException):\n            try:\n                raise result\n            except BaseException:\n                raise RuntimeError(\n                    f\"{result.__class__.__name__} occured during child process \"\n                    f\"running for task number {task_id}:\\n{traceback.format_exc()}\"\n                )\n\n        results.append(result)\n\n    return results\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.bloqade.TaskData","title":"TaskData  <code>dataclass</code>","text":"<pre><code>TaskData(\n    task_id: int,\n    emulator_ir: EmulatorProgram,\n    metadata_dict: Dict[str, LiteralType],\n)\n</code></pre> <p>Data class to hold the program ir and metadata for a given set of parameters</p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket","title":"braket","text":""},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketHardwareRoutine","title":"BraketHardwareRoutine","text":"<p>               Bases: <code>RoutineBase</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketHardwareRoutine.__call__","title":"__call__","text":"<pre><code>__call__(\n    *args: LiteralType,\n    shots: int = 1,\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n)\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, run_async to Braket, and wait until the results are coming back.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> <code>1</code> <code>args</code> <code>LiteralType</code> <p>additional arguments for args variables.</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/braket.py</code> <pre><code>@beartype\ndef __call__(\n    self,\n    *args: LiteralType,\n    shots: int = 1,\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, run_async to Braket,\n    and wait until the results are coming back.\n\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    return self.run(shots, args, name, use_experimental, shuffle, **kwargs)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketHardwareRoutine.run","title":"run","text":"<pre><code>run(\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n) -&gt; RemoteBatch\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, run_async to Braket, and wait until the results are coming back.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>additional arguments</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/braket.py</code> <pre><code>@beartype\ndef run(\n    self,\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n) -&gt; RemoteBatch:\n    \"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, run_async to Braket,\n    and wait until the results are coming back.\n\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n\n    Args:\n        shots (int): number of shots\n        args (Tuple): additional arguments\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n\n    batch = self.run_async(shots, args, name, use_experimental, shuffle, **kwargs)\n    batch.pull()\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketHardwareRoutine.run_async","title":"run_async","text":"<pre><code>run_async(\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n) -&gt; RemoteBatch\n</code></pre> <p>Compile to a RemoteBatch, which contain Braket backend specific tasks, and run_async to Braket.</p> Note <p>This is async.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>Values of the parameter defined in <code>args</code>, defaults to ()</p> <code>()</code> <code>name</code> <code>str | None</code> <p>custom name of the batch, defaults to None</p> <code>None</code> <code>use_experimental</code> <code>bool</code> <p>Use experimental hardware capabilities</p> <code>False</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/braket.py</code> <pre><code>@beartype\ndef run_async(\n    self,\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n) -&gt; RemoteBatch:\n    \"\"\"\n    Compile to a RemoteBatch, which contain\n    Braket backend specific tasks, and run_async to Braket.\n\n    Note:\n        This is async.\n\n    Args:\n        shots (int): number of shots\n        args (Tuple): Values of the parameter defined in `args`, defaults to ()\n        name (str | None): custom name of the batch, defaults to None\n        use_experimental (bool): Use experimental hardware capabilities\n        shuffle (bool): shuffle the order of jobs\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n\n    batch = self._compile(shots, use_experimental, args, name)\n    batch._submit(shuffle, **kwargs)\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketLocalEmulatorRoutine","title":"BraketLocalEmulatorRoutine","text":"<p>               Bases: <code>RoutineBase</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketLocalEmulatorRoutine.__call__","title":"__call__","text":"<pre><code>__call__(\n    *args: LiteralType,\n    shots: int = 1,\n    name: Optional[str] = None,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    **kwargs\n)\n</code></pre> <p>Compile to a LocalBatch, and run. The LocalBatch contain tasks to run on local emulator.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> <code>1</code> <code>args</code> <code>LiteralType</code> <p>additional arguments for args variables.</p> <code>()</code> <code>multiprocessing</code> <code>bool</code> <p>enable multi-process</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>number of workers to run the emulator</p> <code>None</code> Return <p>LocalBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/braket.py</code> <pre><code>@beartype\ndef __call__(\n    self,\n    *args: LiteralType,\n    shots: int = 1,\n    name: Optional[str] = None,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    **kwargs,\n):\n    \"\"\"\n    Compile to a LocalBatch, and run.\n    The LocalBatch contain tasks to run on local emulator.\n\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        multiprocessing (bool): enable multi-process\n        num_workers (int): number of workers to run the emulator\n\n    Return:\n        LocalBatch\n\n    \"\"\"\n    return self.run(\n        shots,\n        args,\n        name,\n        multiprocessing=multiprocessing,\n        num_workers=num_workers,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.braket.BraketLocalEmulatorRoutine.run","title":"run","text":"<pre><code>run(\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    **kwargs\n) -&gt; LocalBatch\n</code></pre> <p>Compile to a LocalBatch, and run. The LocalBatch contain tasks to run on local emulator.</p> Note <p>This is sync, and will wait until remote results finished.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple[LiteralType, ...]</code> <p>additional arguments for args variables.</p> <code>()</code> <code>multiprocessing</code> <code>bool</code> <p>enable multi-process</p> <code>False</code> <code>num_workers</code> <code>int</code> <p>number of workers to run the emulator</p> <code>None</code> Return <p>LocalBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/braket.py</code> <pre><code>@beartype\ndef run(\n    self,\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    **kwargs,\n) -&gt; LocalBatch:\n    \"\"\"\n    Compile to a LocalBatch, and run.\n    The LocalBatch contain tasks to run on local emulator.\n\n    Note:\n        This is sync, and will wait until remote results\n        finished.\n\n    Args:\n        shots (int): number of shots\n        args: additional arguments for args variables.\n        multiprocessing (bool): enable multi-process\n        num_workers (int): number of workers to run the emulator\n\n    Return:\n        LocalBatch\n\n    \"\"\"\n\n    batch = self._compile(shots, args, name)\n    batch._run(multiprocessing=multiprocessing, num_workers=num_workers, **kwargs)\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera","title":"quera","text":""},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.CustomSubmissionRoutine","title":"CustomSubmissionRoutine","text":"<p>               Bases: <code>RoutineBase</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.CustomSubmissionRoutine.run","title":"run","text":"<pre><code>run(\n    shots: int,\n    RemoteTask: type[RemoteTaskType],\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n) -&gt; RemoteBatch\n</code></pre> <p>Run the custom task and return the result.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>RemoteTask</code> <code>type</code> <p>type of the remote task, must subclass of CustomRemoteTaskABC</p> required <code>args</code> <code>Tuple</code> <p>additional arguments for remaining un</p> <code>()</code> <code>name</code> <code>str</code> <p>name of the batch object</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/quera.py</code> <pre><code>@beartype\ndef run(\n    self,\n    shots: int,\n    RemoteTask: type[RemoteTaskType],\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n) -&gt; RemoteBatch:\n    \"\"\"Run the custom task and return the result.\n\n    Args:\n        shots (int): number of shots\n        RemoteTask (type): type of the remote task, must subclass of CustomRemoteTaskABC\n        args (Tuple): additional arguments for remaining un\n        name (str): name of the batch object\n        shuffle (bool): shuffle the order of jobs\n    \"\"\"\n    if not callable(getattr(RemoteTask, \"pull\", None)):\n        raise TypeError(\n            f\"{RemoteTask} must have a `pull` method for executing `run`.\"\n        )\n\n    batch = self.run_async(\n        shots, RemoteTask, args, name, use_experimental, shuffle, **kwargs\n    )\n    batch.pull()\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.CustomSubmissionRoutine.run_async","title":"run_async","text":"<pre><code>run_async(\n    shots: int,\n    RemoteTask: type[RemoteTaskType],\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n) -&gt; RemoteBatch\n</code></pre> <p>Compile to a RemoteBatch, which contain     QuEra backend specific tasks,     and run_async through QuEra service.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>additional arguments</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/quera.py</code> <pre><code>@beartype\ndef run_async(\n    self,\n    shots: int,\n    RemoteTask: type[RemoteTaskType],\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n) -&gt; RemoteBatch:\n    \"\"\"\n    Compile to a RemoteBatch, which contain\n        QuEra backend specific tasks,\n        and run_async through QuEra service.\n\n    Args:\n        shots (int): number of shots\n        args (Tuple): additional arguments\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    batch = self._compile_custom_batch(\n        shots, RemoteTask, use_experimental, args, name\n    )\n    batch._submit(shuffle, **kwargs)\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.CustomSubmissionRoutine.submit","title":"submit","text":"<pre><code>submit(\n    shots: int,\n    url: str,\n    json_body_template: str,\n    method: str = \"POST\",\n    args: Tuple[LiteralType] = (),\n    request_options: Dict[str, Any] = {},\n    use_experimental: bool = False,\n    sleep_time: float = 0.1,\n) -&gt; List[Tuple[NamedTuple, Response]]\n</code></pre> <p>Compile to QuEraTaskSpecification and submit to a custom service.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>url</code> <code>str</code> <p>url of the custom service</p> required <code>json_body_template</code> <code>str</code> <p>json body template, must contain '{task_ir}'</p> required <code>method</code> <code>str</code> <p>http method to be used. Defaults to \"POST\".</p> <code>'POST'</code> <code>args</code> <code>Tuple[LiteralType]</code> <p>additional arguments to be passed into the</p> <code>()</code> <code>request_options</code> <code>Dict[str, Any]</code> <p>additional options to be passed into the request method,</p> <code>{}</code> <code>use_experimental</code> <code>bool</code> <p>Enable experimental hardware capabilities</p> <code>False</code> <code>sleep_time</code> <code>float</code> <p>time to sleep between each request. Defaults to 0.1.</p> <code>0.1</code> <p>Returns:</p> Type Description <code>List[Tuple[NamedTuple, Response]]</code> <p>List[Tuple[NamedTuple, Response]]: List of parameters for each batch in</p> <code>List[Tuple[NamedTuple, Response]]</code> <p>the task and the response from the post request.</p> <p>Examples:</p> <p>Here is a simple example of how to use this method. Note the body_template has double curly braces on the outside to escape the string formatting.</p> <pre><code>&gt;&gt;&gt; body_template = \"{{\"token\": \"my_token\", \"task\": {task_ir}}}\"\n&gt;&gt;&gt; responses = (\n    program.quera.custom.submit(\n        100,\n        \"http://my_custom_service.com\",\n        body_template\n    )\n)\n</code></pre> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/quera.py</code> <pre><code>def submit(\n    self,\n    shots: int,\n    url: str,\n    json_body_template: str,\n    method: str = \"POST\",\n    args: Tuple[LiteralType] = (),\n    request_options: Dict[str, Any] = {},\n    use_experimental: bool = False,\n    sleep_time: float = 0.1,\n) -&gt; List[Tuple[NamedTuple, Response]]:\n    \"\"\"Compile to QuEraTaskSpecification and submit to a custom service.\n\n    Args:\n        shots (int): number of shots\n        url (str): url of the custom service\n        json_body_template (str): json body template, must contain '{task_ir}'\n        which is a placeholder for a string representation of the task ir.\n        The task ir string will be inserted into the template with\n        `json_body_template.format(task_ir=task_ir_string)`.\n        to be replaced by QuEraTaskSpecification\n        method (str): http method to be used. Defaults to \"POST\".\n        args (Tuple[LiteralType]): additional arguments to be passed into the\n        compiler coming from `args` option of the build. Defaults to ().\n        request_options: additional options to be passed into the request method,\n        Note the `data` option will be overwritten by the\n        `json_body_template.format(task_ir=task_ir_string)`.\n        use_experimental (bool): Enable experimental hardware capabilities\n        sleep_time (float): time to sleep between each request. Defaults to 0.1.\n\n    Returns:\n        List[Tuple[NamedTuple, Response]]: List of parameters for each batch in\n        the task and the response from the post request.\n\n    Examples:\n        Here is a simple example of how to use this method. Note the body_template\n        has double curly braces on the outside to escape the string formatting.\n\n    ```python\n    &gt;&gt;&gt; body_template = \"{{\"token\": \"my_token\", \"task\": {task_ir}}}\"\n    &gt;&gt;&gt; responses = (\n        program.quera.custom.submit(\n            100,\n            \"http://my_custom_service.com\",\n            body_template\n        )\n    )\n    ```\n    \"\"\"\n\n    if r\"{task_ir}\" not in json_body_template:\n        raise ValueError(r\"body_template must contain '{task_ir}'\")\n\n    partial_eval = json_body_template.format(task_ir='\"task_ir\"')\n    try:\n        _ = json.loads(partial_eval)\n    except json.JSONDecodeError as e:\n        raise ValueError(\n            \"body_template must be a valid json template. \"\n            'When evaluating template with task_ir=\"task_ir\", '\n            f\"the template evaluated to: {partial_eval!r}.\\n\"\n            f\"JSONDecodeError: {e}\"\n        )\n\n    out = []\n    for metadata, task_ir in self._compile_single(shots, use_experimental, args):\n        json_request_body = json_body_template.format(\n            task_ir=task_ir.json(exclude_none=True, exclude_unset=True)\n        )\n        request_options.update(data=json_request_body)\n        response = request(method, url, **request_options)\n        out.append((metadata, response))\n        time.sleep(sleep_time)\n\n    return out\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.QuEraHardwareRoutine","title":"QuEraHardwareRoutine","text":"<p>               Bases: <code>RoutineBase</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.routine.quera.QuEraHardwareRoutine.run_async","title":"run_async","text":"<pre><code>run_async(\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs\n) -&gt; RemoteBatch\n</code></pre> <p>Compile to a RemoteBatch, which contain     QuEra backend specific tasks,     and run_async through QuEra service.</p> <p>Parameters:</p> Name Type Description Default <code>shots</code> <code>int</code> <p>number of shots</p> required <code>args</code> <code>Tuple</code> <p>additional arguments</p> <code>()</code> <code>name</code> <code>str</code> <p>custom name of the batch</p> <code>None</code> <code>shuffle</code> <code>bool</code> <p>shuffle the order of jobs</p> <code>False</code> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/routine/quera.py</code> <pre><code>@beartype\ndef run_async(\n    self,\n    shots: int,\n    args: Tuple[LiteralType, ...] = (),\n    name: Optional[str] = None,\n    use_experimental: bool = False,\n    shuffle: bool = False,\n    **kwargs,\n) -&gt; RemoteBatch:\n    \"\"\"\n    Compile to a RemoteBatch, which contain\n        QuEra backend specific tasks,\n        and run_async through QuEra service.\n\n    Args:\n        shots (int): number of shots\n        args (Tuple): additional arguments\n        name (str): custom name of the batch\n        shuffle (bool): shuffle the order of jobs\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    batch = self._compile(shots, use_experimental, args, name)\n    batch._submit(shuffle, **kwargs)\n    return batch\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.scalar","title":"scalar","text":""},{"location":"reference/analog/#bloqade.analog.ir.scalar.Literal","title":"Literal","text":"<p>               Bases: <code>Real</code></p>"},{"location":"reference/analog/#bloqade.analog.ir.scalar.Literal.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Decimal\n</code></pre> <p>Scalar Literal, which stores a decimaal value instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Decimal</code> <p>decimal value instance</p> required"},{"location":"reference/analog/#bloqade.analog.ir.scalar.Scalar","title":"Scalar","text":"<p>Base class for all scalar expressions.</p> <pre><code>&lt;scalar&gt; ::= &lt;literal&gt;\n| &lt;variable&gt;\n| &lt;default&gt;\n| &lt;negative&gt;\n| &lt;add&gt;\n| &lt;mul&gt;\n| &lt;min&gt;\n| &lt;max&gt;\n| &lt;slice&gt;\n| &lt;inverval&gt;\n\n&lt;mul&gt; ::= &lt;scalar&gt; '*' &lt;scalar&gt;\n&lt;add&gt; ::= &lt;scalar&gt; '+' &lt;scalar&gt;\n&lt;min&gt; ::= 'min' &lt;scalar&gt;+\n&lt;max&gt; ::= 'max' &lt;scalar&gt;+\n&lt;slice&gt; ::= &lt;scalar expr&gt; '[' &lt;interval&gt; ']'\n&lt;interval&gt; ::= &lt;scalar expr&gt; '..' &lt;scalar expr&gt;\n&lt;real&gt; ::= &lt;literal&gt; | &lt;var&gt;\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.scalar.Variable","title":"Variable","text":"<p>               Bases: <code>Real</code></p> <p>Variable, which stores a variable name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable instance.</p> required"},{"location":"reference/analog/#bloqade.analog.ir.scalar.cast","title":"cast","text":"<pre><code>cast(py) -&gt; Scalar\n</code></pre> <ol> <li> <p>cast Real number (or list/tuple of Real numbers) to [<code>Scalar Literal</code>][bloqade.ir.scalar.Literal].</p> </li> <li> <p>cast str (or list/tuple of Real numbers) to [<code>Scalar Variable</code>][bloqade.ir.scalar.Variable].</p> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, Real, Tuple[Real], List[Real]]</code> <p>python object to cast</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>Scalar</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def cast(py) -&gt; \"Scalar\":\n    \"\"\"\n    1. cast Real number (or list/tuple of Real numbers)\n    to [`Scalar Literal`][bloqade.ir.scalar.Literal].\n\n    2. cast str (or list/tuple of Real numbers)\n    to [`Scalar Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str,Real,Tuple[Real],List[Real]]): python object to cast\n\n    Returns:\n        Scalar\n    \"\"\"\n    ret = trycast(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Scalar Literal\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.ir.scalar.var","title":"var","text":"<pre><code>var(py: str) -&gt; Variable\n</code></pre> <p>cast string (or list/tuple of strings) to [<code>Variable</code>][bloqade.ir.scalar.Variable].</p> <p>Parameters:</p> Name Type Description Default <code>py</code> <code>Union[str, List[str]]</code> <p>a string or list/tuple of strings</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>Union[Variable]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/ir/scalar.py</code> <pre><code>def var(py: str) -&gt; \"Variable\":\n    \"\"\"cast string (or list/tuple of strings)\n    to [`Variable`][bloqade.ir.scalar.Variable].\n\n    Args:\n        py (Union[str, List[str]]): a string or list/tuple of strings\n\n    Returns:\n       Union[Variable]\n    \"\"\"\n    ret = tryvar(py)\n    if ret is None:\n        raise TypeError(f\"Cannot cast {type(py)} to Variable\")\n\n    return ret\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.serialize","title":"serialize","text":""},{"location":"reference/analog/#bloqade.analog.serialize.dumps","title":"dumps","text":"<pre><code>dumps(\n    o: Any, use_decimal: bool = True, **json_kwargs\n) -&gt; str\n</code></pre> <p>Serialize object to string</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dumps</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the serialized object as a string</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef dumps(\n    o: Any,\n    use_decimal: bool = True,\n    **json_kwargs,\n) -&gt; str:\n    \"\"\"Serialize object to string\n\n    Args:\n        o (Any): the object to serialize\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dumps\n\n    Returns:\n        str: the serialized object as a string\n    \"\"\"\n    if not isinstance(o, Serializer.types):\n        raise TypeError(\n            f\"Object of type {type(o)} is not JSON serializable. \"\n            f\"Only {Serializer.types} are supported.\"\n        )\n    return json.dumps(o, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.serialize.load","title":"load","text":"<pre><code>load(\n    fp: Union[TextIO, str],\n    use_decimal: bool = True,\n    **json_kwargs\n)\n</code></pre> <p>Load object from file</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.load</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef load(fp: Union[TextIO, str], use_decimal: bool = True, **json_kwargs):\n    \"\"\"Load object from file\n\n    Args:\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.load\n\n    Returns:\n        Any: the deserialized object\n    \"\"\"\n    load_bloqade()\n    if isinstance(fp, str):\n        with open(fp, \"r\") as f:\n            return json.load(\n                f,\n                object_hook=Serializer.object_hook,\n                use_decimal=use_decimal,\n                **json_kwargs,\n            )\n    else:\n        return json.load(\n            fp,\n            object_hook=Serializer.object_hook,\n            use_decimal=use_decimal,\n            **json_kwargs,\n        )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.serialize.loads","title":"loads","text":"<pre><code>loads(s: str, use_decimal: bool = True, **json_kwargs)\n</code></pre> <p>Load object from string</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>the string to load</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.loads</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>the deserialized object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef loads(s: str, use_decimal: bool = True, **json_kwargs):\n    \"\"\"Load object from string\n\n    Args:\n        s (str): the string to load\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.loads\n\n    Returns:\n        Any: the deserialized object\n    \"\"\"\n    load_bloqade()\n    return json.loads(\n        s, object_hook=Serializer.object_hook, use_decimal=use_decimal, **json_kwargs\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.serialize.save","title":"save","text":"<pre><code>save(\n    o: Any,\n    fp: Union[TextIO, str],\n    use_decimal=True,\n    **json_kwargs\n) -&gt; None\n</code></pre> <p>Serialize object to file</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>Any</code> <p>the object to serialize</p> required <code>fp</code> <code>Union[TextIO, str]</code> <p>the file path or file object</p> required <code>use_decimal</code> <code>bool</code> <p>use decimal.Decimal for numbers. Defaults to True.</p> <code>True</code> <code>**json_kwargs</code> <p>other arguments passed to json.dump</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/serialize.py</code> <pre><code>@beartype\ndef save(\n    o: Any,\n    fp: Union[TextIO, str],\n    use_decimal=True,\n    **json_kwargs,\n) -&gt; None:\n    \"\"\"Serialize object to file\n\n    Args:\n        o (Any): the object to serialize\n        fp (Union[TextIO, str]): the file path or file object\n        use_decimal (bool, optional): use decimal.Decimal for numbers. Defaults to True.\n        **json_kwargs: other arguments passed to json.dump\n\n    Returns:\n        None\n    \"\"\"\n    if not isinstance(o, Serializer.types):\n        raise TypeError(\n            f\"Object of type {type(o)} is not JSON serializable. \"\n            f\"Only {Serializer.types} are supported.\"\n        )\n    if isinstance(fp, str):\n        with open(fp, \"w\") as f:\n            json.dump(o, f, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n    else:\n        json.dump(o, fp, cls=Serializer, use_decimal=use_decimal, **json_kwargs)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission","title":"submission","text":""},{"location":"reference/analog/#bloqade.analog.submission.ir","title":"ir","text":""},{"location":"reference/analog/#bloqade.analog.submission.ir.braket","title":"braket","text":"<p>Helper functions related to IR submission co-ordinations between Bloqade and Braket</p>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.BraketTaskSpecification","title":"BraketTaskSpecification","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class representing geometry of an atom arrangement.</p> <p>Attributes:</p> Name Type Description <code>nshots</code> <code>int</code> <p>Number of shots</p> <code>program</code> <code>Program</code> <p>IR(Intermediate Representation) program suitable for braket</p>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.extract_braket_program","title":"extract_braket_program","text":"<pre><code>extract_braket_program(\n    quera_task_ir: QuEraTaskSpecification,\n)\n</code></pre> <p>Extracts the Braket program.</p> <p>Parameters:</p> Name Type Description Default <code>quera_task_ir</code> <code>QuEraTaskSpecification</code> <p>Quera IR(Intermediate representation) of the task.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def extract_braket_program(quera_task_ir: QuEraTaskSpecification):\n    \"\"\"Extracts the Braket program.\n\n    Args:\n        quera_task_ir (QuEraTaskSpecification):\n            Quera IR(Intermediate representation) of the task.\n    \"\"\"\n    lattice = quera_task_ir.lattice\n\n    rabi_amplitude = (\n        quera_task_ir.effective_hamiltonian.rydberg.rabi_frequency_amplitude.global_\n    )\n    rabi_phase = (\n        quera_task_ir.effective_hamiltonian.rydberg.rabi_frequency_phase.global_\n    )\n    global_detuning = quera_task_ir.effective_hamiltonian.rydberg.detuning.global_\n    local_detuning = quera_task_ir.effective_hamiltonian.rydberg.detuning.local\n\n    register = AtomArrangement()\n    for site, filled in zip(lattice.sites, lattice.filling):\n        site_type = SiteType.FILLED if filled == 1 else SiteType.VACANT\n        register.add(site, site_type)\n\n    hamiltonian = DrivingField(\n        amplitude=to_braket_field(rabi_amplitude),\n        phase=to_braket_field(rabi_phase),\n        detuning=to_braket_field(global_detuning),\n    )\n\n    if local_detuning:\n        hamiltonian = hamiltonian + ShiftingField(to_braket_field(local_detuning))\n\n    return AnalogHamiltonianSimulation(\n        register=register,\n        hamiltonian=hamiltonian,\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.from_braket_status_codes","title":"from_braket_status_codes","text":"<pre><code>from_braket_status_codes(\n    braket_status: str,\n) -&gt; QuEraTaskStatusCode\n</code></pre> <p>Gets the <code>QuEraTaskStatusCode</code> object for working with Bloqade SDK.</p> <p>Parameters:</p> Name Type Description Default <code>braket_status</code> <code>str</code> <p>str The value of status in metadata() in the Amazon Braket. <code>GetQuantumTask</code> operation. If <code>use_cached_value</code> is <code>True</code>, the value most recently returned from <code>GetQuantumTask</code> operation is used</p> required <p>Returns:</p> Type Description <code>QuEraTaskStatusCode</code> <p>An object of the type <code>Field</code> in Braket SDK</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def from_braket_status_codes(braket_status: str) -&gt; QuEraTaskStatusCode:\n    \"\"\"Gets the `QuEraTaskStatusCode` object for working with Bloqade SDK.\n\n    Args:\n        braket_status: str\n            The value of status in metadata() in the Amazon Braket.\n            `GetQuantumTask` operation. If `use_cached_value` is `True`,\n            the value most recently returned from\n            `GetQuantumTask` operation is used\n\n    Returns:\n        An object of the type `Field` in Braket SDK\n    \"\"\"\n    if braket_status == str(\"QUEUED\"):\n        return QuEraTaskStatusCode.Enqueued\n    else:\n        return QuEraTaskStatusCode(braket_status.lower().capitalize())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.from_braket_task_results","title":"from_braket_task_results","text":"<pre><code>from_braket_task_results(\n    braket_task_results: AnalogHamiltonianSimulationTaskResult,\n) -&gt; QuEraTaskResults\n</code></pre> <p>Get the <code>QuEraTaskResults</code> object for working with Bloqade SDK.</p> <p>Parameters:</p> Name Type Description Default <code>braket_task_results</code> <code>AnalogHamiltonianSimulationTaskResult</code> <p>AnalogHamiltonianSimulationTaskResult Quantum task result of braket system</p> required <p>Returns:</p> Type Description <code>QuEraTaskResults</code> <p>An object of the type <code>Field</code> in Braket SDK.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def from_braket_task_results(\n    braket_task_results: AnalogHamiltonianSimulationTaskResult,\n) -&gt; QuEraTaskResults:\n    \"\"\"Get the `QuEraTaskResults` object for working with Bloqade SDK.\n\n    Args:\n        braket_task_results: AnalogHamiltonianSimulationTaskResult\n            Quantum task result of braket system\n\n    Returns:\n        An object of the type `Field` in Braket SDK.\n    \"\"\"\n    shot_outputs = []\n    for measurement in braket_task_results.measurements:\n        shot_outputs.append(\n            QuEraShotResult(\n                shot_status=QuEraShotStatusCode.Completed,\n                pre_sequence=list(measurement.pre_sequence),\n                post_sequence=list(measurement.post_sequence),\n            )\n        )\n\n    return QuEraTaskResults(\n        task_status=QuEraTaskStatusCode.Completed, shot_outputs=shot_outputs\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.to_braket_field","title":"to_braket_field","text":"<pre><code>to_braket_field(\n    quera_field: Union[GlobalField, LocalField],\n) -&gt; Field\n</code></pre> <p>Converts to <code>TimeSeries</code> object supported by Braket.</p> <p>Parameters:</p> Name Type Description Default <code>quera_field</code> <code>Union[GlobalField, LocalField)]</code> <p>Field supported by Quera</p> required <p>Returns:</p> Type Description <code>Field</code> <p>An object of the type <code>braket.ahs.field.Field</code></p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If field is not of the type <code>GlobalField</code> or <code>LocalField</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def to_braket_field(quera_field: Union[GlobalField, LocalField]) -&gt; Field:\n    \"\"\"Converts to `TimeSeries` object supported by Braket.\n\n    Args:\n        quera_field (Union[GlobalField, LocalField)]:\n            Field supported by Quera\n\n    Returns:\n        An object of the type `braket.ahs.field.Field`\n\n    Raises:\n        TypeError: If field is not of the type `GlobalField` or `LocalField`.\n    \"\"\"\n    if isinstance(quera_field, GlobalField):\n        times = quera_field.times\n        values = quera_field.values\n        time_series = to_braket_time_series(times, values)\n        return Field(pattern=\"uniform\", time_series=time_series)\n    elif isinstance(quera_field, LocalField):\n        times = quera_field.times\n        values = quera_field.values\n        pattern = quera_field.lattice_site_coefficients\n        time_series = to_braket_time_series(times, values)\n        pattern = Pattern(pattern)\n        return Field(pattern=pattern, time_series=time_series)\n    else:\n        raise TypeError\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.to_braket_task","title":"to_braket_task","text":"<pre><code>to_braket_task(\n    quera_task_ir: QuEraTaskSpecification,\n) -&gt; Tuple[int, AnalogHamiltonianSimulation]\n</code></pre> <p>Converts to <code>Tuple[int, AnalogHamiltonianSimulation]</code> object supported by Braket.</p> <p>Parameters:</p> Name Type Description Default <code>quera_task_ir</code> <code>QuEraTaskSpecification</code> <p>Quera IR(Intermediate representation) of the task.</p> required <p>Returns:</p> Type Description <code>Tuple[int, AnalogHamiltonianSimulation]</code> <p>An tuple  of the type <code>Tuple[int, AnalogHamiltonianSimulation]</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def to_braket_task(\n    quera_task_ir: QuEraTaskSpecification,\n) -&gt; Tuple[int, AnalogHamiltonianSimulation]:\n    \"\"\"Converts to `Tuple[int, AnalogHamiltonianSimulation]` object supported by Braket.\n\n    Args:\n        quera_task_ir (QuEraTaskSpecification):\n            Quera IR(Intermediate representation) of the task.\n\n    Returns:\n        An tuple  of the type `Tuple[int, AnalogHamiltonianSimulation]`.\n    \"\"\"\n    braket_ahs_program = extract_braket_program(quera_task_ir)\n    return quera_task_ir.nshots, braket_ahs_program\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.to_braket_task_ir","title":"to_braket_task_ir","text":"<pre><code>to_braket_task_ir(\n    quera_task_ir: QuEraTaskSpecification,\n) -&gt; BraketTaskSpecification\n</code></pre> <p>Converts quera IR(Intermendiate Representation) to to <code>BraketTaskSpecification</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>quera_task_ir</code> <code>QuEraTaskSpecification</code> <p>Quera IR(Intermediate representation) of the task.</p> required <p>Returns:</p> Type Description <code>BraketTaskSpecification</code> <p>An object of the type <code>BraketTaskSpecification</code> in Braket SDK</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def to_braket_task_ir(quera_task_ir: QuEraTaskSpecification) -&gt; BraketTaskSpecification:\n    \"\"\"Converts quera IR(Intermendiate Representation) to\n    to `BraketTaskSpecification` object.\n\n    Args:\n        quera_task_ir (QuEraTaskSpecification):\n            Quera IR(Intermediate representation) of the task.\n\n    Returns:\n        An object of the type `BraketTaskSpecification` in Braket SDK\n\n    \"\"\"\n    nshots, braket_ahs_program = to_braket_task(quera_task_ir)\n    return BraketTaskSpecification(nshots=nshots, program=braket_ahs_program.to_ir())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.to_braket_time_series","title":"to_braket_time_series","text":"<pre><code>to_braket_time_series(\n    times: List[Decimal], values: List[Decimal]\n) -&gt; TimeSeries\n</code></pre> <p>Converts to <code>TimeSeries</code> object supported by Braket.</p> <p>Parameters:</p> Name Type Description Default <code>times</code> <code>List[Decimal]</code> <p>Times of the value.</p> required <code>values</code> <code>List[Decimal]</code> <p>Corresponding values to add to the time series</p> required <p>Returns:</p> Type Description <code>TimeSeries</code> <p>An object of the type <code>braket.timings.TimeSeries</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def to_braket_time_series(times: List[Decimal], values: List[Decimal]) -&gt; TimeSeries:\n    \"\"\"Converts to `TimeSeries` object supported by Braket.\n\n    Args:\n        times (List[Decimal]): Times of the value.\n        values (List[Decimal]): Corresponding values to add to the time series\n\n    Returns:\n        An object of the type `braket.timings.TimeSeries`\n    \"\"\"\n    time_series = TimeSeries()\n    for time, value in zip(times, values):\n        time_series.put(time, value)\n\n    return time_series\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.braket.to_quera_capabilities","title":"to_quera_capabilities","text":"<pre><code>to_quera_capabilities(paradigm) -&gt; cp.QuEraCapabilities\n</code></pre> <p>Converts to <code>QuEraCapabilities</code> object supported by Braket.</p> <p>Parameters:</p> Name Type Description Default <code>paradigm</code> <p>The <code>paradigm</code> property of the <code>AwsDevice</code> object for Aquila</p> required <p>Returns:</p> Type Description <code>QuEraCapabilities</code> <p>An object of the type <code>QuEraCapabilities</code> in Bloqade SDK.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/braket.py</code> <pre><code>def to_quera_capabilities(paradigm) -&gt; cp.QuEraCapabilities:\n    \"\"\"Converts to `QuEraCapabilities` object supported by Braket.\n\n    Args:\n        paradigm: The `paradigm` property of the `AwsDevice` object for Aquila\n\n    Returns:\n        An object of the type `QuEraCapabilities` in Bloqade SDK.\n    \"\"\"\n    rydberg_global = paradigm.rydberg.rydbergGlobal\n\n    return cp.QuEraCapabilities(\n        version=paradigm.braketSchemaHeader.version,\n        capabilities=cp.DeviceCapabilities(\n            task=cp.TaskCapabilities(\n                number_shots_min=1,\n                number_shots_max=1000,\n            ),\n            lattice=cp.LatticeCapabilities(\n                number_qubits_max=paradigm.qubitCount,\n                geometry=cp.LatticeGeometryCapabilities(\n                    spacing_radial_min=paradigm.lattice.geometry.spacingRadialMin,\n                    spacing_vertical_min=paradigm.lattice.geometry.spacingVerticalMin,\n                    position_resolution=paradigm.lattice.geometry.positionResolution,\n                    number_sites_max=paradigm.lattice.geometry.numberSitesMax,\n                ),\n                area=cp.LatticeAreaCapabilities(\n                    width=paradigm.lattice.area.width,\n                    height=paradigm.lattice.area.height,\n                ),\n            ),\n            rydberg=cp.RydbergCapabilities(\n                c6_coefficient=paradigm.rydberg.c6Coefficient,\n                global_=cp.RydbergGlobalCapabilities(\n                    rabi_frequency_max=rydberg_global.rabiFrequencyRange[0],\n                    rabi_frequency_min=rydberg_global.rabiFrequencyRange[1],\n                    rabi_frequency_resolution=rydberg_global.rabiFrequencyResolution,\n                    rabi_frequency_slew_rate_max=rydberg_global.rabiFrequencySlewRateMax,\n                    detuning_max=rydberg_global.detuningRange[0],\n                    detuning_min=rydberg_global.detuningRange[1],\n                    detuning_resolution=rydberg_global.detuningResolution,\n                    detuning_slew_rate_max=rydberg_global.detuningSlewRateMax,\n                    phase_min=rydberg_global.phaseRange[0],\n                    phase_max=rydberg_global.phaseRange[1],\n                    phase_resolution=rydberg_global.phaseResolution,\n                    time_min=rydberg_global.timeMin,\n                    time_max=rydberg_global.timeMax,\n                    time_resolution=rydberg_global.timeResolution,\n                    time_delta_min=rydberg_global.timeDeltaMin,\n                ),\n                local=None,\n            ),\n        ),\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.parallel","title":"parallel","text":""},{"location":"reference/analog/#bloqade.analog.submission.ir.parallel.ClusterLocationInfo","title":"ClusterLocationInfo","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class that stores the mapping of batched jobs.</p> <p>Parameters:</p> Name Type Description Default <code>cluster_index</code> <code>int</code> <p>the index of the cluster a site belongs to</p> required <code>global_location_index</code> <code>int</code> <p>the index of the site in the multplexed system</p> required <code>cluster_location_index</code> <code>int</code> <p>the index of the site in the original system</p> required"},{"location":"reference/analog/#bloqade.analog.submission.ir.task_results","title":"task_results","text":""},{"location":"reference/analog/#bloqade.analog.submission.ir.task_results.QuEraTaskResults","title":"QuEraTaskResults","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/analog/#bloqade.analog.submission.ir.task_results.QuEraTaskResults.export_as_probabilities","title":"export_as_probabilities","text":"<pre><code>export_as_probabilities() -&gt; TaskProbabilities\n</code></pre> <p>converts from shot results to probabilities</p> <p>Returns:</p> Name Type Description <code>TaskProbabilities</code> <code>TaskProbabilities</code> <p>The task results as probabilties</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/submission/ir/task_results.py</code> <pre><code>def export_as_probabilities(self) -&gt; TaskProbabilities:\n    \"\"\"converts from shot results to probabilities\n\n    Returns:\n        TaskProbabilities: The task results as probabilties\n    \"\"\"\n    counts = dict()\n    nshots = len(self.shot_outputs)\n    for shot_result in self.shot_outputs:\n        pre_sequence_str = \"\".join(str(bit) for bit in shot_result.pre_sequence)\n\n        post_sequence_str = \"\".join(str(bit) for bit in shot_result.post_sequence)\n\n        configuration = (pre_sequence_str, post_sequence_str)\n        # iterative average\n        current_count = counts.get(configuration, 0)\n        counts[configuration] = current_count + 1\n\n    probabilities = [(config, count / nshots) for config, count in counts.items()]\n    return TaskProbabilities(probabilities=probabilities)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.submission.ir.task_results.QuEraTaskStatusCode","title":"QuEraTaskStatusCode","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An Enum representing the various states a task can be in within the QuEra system.</p> <p>Attributes:</p> Name Type Description <code>Created</code> <p>The task has been created but not yet started.</p> <code>Running</code> <p>The task is currently running.</p> <code>Completed</code> <p>The task has completed successfully.</p> <code>Failed</code> <p>The task has failed.</p> <code>Cancelled</code> <p>The task has been cancelled.</p> <code>Executing</code> <p>The task is currently being executed.</p> <code>Enqueued</code> <p>The task is in the queue waiting to be executed.</p> <code>Accepted</code> <p>The task has been accepted for execution.</p> <code>Unaccepted</code> <p>The task has not been accepted for execution.</p> <code>Partial</code> <p>The task has partially completed.</p> <code>Unsubmitted</code> <p>The task has not been submitted for execution.</p>"},{"location":"reference/analog/#bloqade.analog.task","title":"task","text":""},{"location":"reference/analog/#bloqade.analog.task.base","title":"base","text":""},{"location":"reference/analog/#bloqade.analog.task.base.Geometry","title":"Geometry","text":"<p>Class representing geometry of an atom arrangement.</p> <p>Attributes:</p> Name Type Description <code>sites</code> <code>List[Tuple[float, float]]</code> <p>Atom site arrangement</p> <code>filling</code> <code>List[int]</code> <p>Which sites are filled</p> <code>parallel_decoder</code> <code>Optional[ParallelDecoder]</code> <p>Decoder object for decoding Geometry object</p>"},{"location":"reference/analog/#bloqade.analog.task.base.LocalTask","title":"LocalTask","text":"<p>               Bases: <code>Task</code></p> <p><code>Task</code> to use for local executions for simulation purposes..</p>"},{"location":"reference/analog/#bloqade.analog.task.base.RemoteTask","title":"RemoteTask","text":"<p>               Bases: <code>Task</code></p> <p><code>Task</code> to use for remote executions to run the program on Quera Quantum Computers.</p>"},{"location":"reference/analog/#bloqade.analog.task.base.Report","title":"Report","text":"<pre><code>Report(data, metas, geos, name='')\n</code></pre> <p>Report is a helper class for organizing and analysing data</p>"},{"location":"reference/analog/#bloqade.analog.task.base.Report--analyzing-results","title":"Analyzing Results","text":"<p>When you've retrieved your results from either emulation or hardware you can generate a <code>.report()</code>:</p> <pre><code>report = results.report()\n</code></pre> <p>For the examples below we analyze the results of a two atom program.</p> <p>The report contains useful information such as:</p> <p>The raw bitstrings measured per each execution of the program <pre><code>&gt;&gt;&gt; report.bitstrings()\n[array([[1, 1],\n        [1, 1],\n        [1, 1],\n        ...,\n        [1, 1],\n        [1, 1],\n</code></pre></p> <p>The number of times each unique bitstring occurred: <pre><code>&gt;&gt;&gt; report.counts()\n\n[OrderedDict([('11', 892), ('10', 59), ('01', 49)])]\n</code></pre></p> <p>The Rydberg Density for each atom <pre><code>&gt;&gt;&gt; report.rydberg_densities()\n\n                0      1\ntask_number\n0            0.053  0.054\n</code></pre></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>def __init__(self, data, metas, geos, name=\"\") -&gt; None:\n    self.dataframe = data  # df\n    self._bitstrings = None  # bitstring cache\n    self._counts = None  # counts cache\n    self.metas = metas\n    self.geos = geos\n    self.name = name + \" \" + str(datetime.datetime.now())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.markdown","title":"markdown  <code>property</code>","text":"<pre><code>markdown: str\n</code></pre> <p>Get the markdown representation of the dataframe</p>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.bitstrings","title":"bitstrings","text":"<pre><code>bitstrings(\n    filter_perfect_filling: bool = True,\n    clusters: Union[\n        tuple[int, int], List[tuple[int, int]]\n    ] = [],\n) -&gt; List[NDArray]\n</code></pre> <p>Get the bitstrings from the data.</p> <p>Parameters:</p> Name Type Description Default <code>filter_perfect_filling</code> <code>bool</code> <p>whether return will only contain perfect filling shots. Defaults to True.</p> <code>True</code> <code>clusters</code> <code>Union[tuple[int, int], List[tuple[int, int]]]</code> <p>(tuple[int, int], Sequence[Tuple[int, int]]): cluster index to filter shots from. If none are provided all clusters are used, defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>bitstrings</code> <code>list of ndarray</code> <p>list corresponding to each task in the report. Each element is an ndarray of shape (nshots, nsites) where nshots is the number of shots for the task and nsites is the number of sites in the task. For example: <pre><code>[array([[1, 1],\n        [1, 1],\n        [1, 1],\n        ...,\n        [1, 1],\n        [1, 1],\n        [1, 0]], dtype=int8)]\n</code></pre></p> Note <p>Note that nshots may vary between tasks if filter_perfect_filling is set to True.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>@beartype\ndef bitstrings(\n    self,\n    filter_perfect_filling: bool = True,\n    clusters: Union[tuple[int, int], List[tuple[int, int]]] = [],\n) -&gt; List[NDArray]:\n    \"\"\"Get the bitstrings from the data.\n\n    Args:\n        filter_perfect_filling (bool): whether return will\n            only contain perfect filling shots. Defaults to True.\n        clusters: (tuple[int, int], Sequence[Tuple[int, int]]):\n            cluster index to filter shots from. If none are provided\n            all clusters are used, defaults to [].\n\n    Returns:\n        bitstrings (list of ndarray): list corresponding to each\n            task in the report. Each element is an ndarray of shape\n            (nshots, nsites) where nshots is the number of shots for\n            the task and nsites is the number of sites in the task.\n            For example:\n            ```python3\n            [array([[1, 1],\n                    [1, 1],\n                    [1, 1],\n                    ...,\n                    [1, 1],\n                    [1, 1],\n                    [1, 0]], dtype=int8)]\n            ```\n\n    Note:\n        Note that nshots may vary between tasks if filter_perfect_filling\n        is set to True.\n\n    \"\"\"\n\n    task_numbers = self.dataframe.index.get_level_values(\"task_number\").unique()\n\n    bitstrings = []\n    for task_number in task_numbers:\n        mask = self._filter(\n            task_number=task_number,\n            filter_perfect_filling=filter_perfect_filling,\n            clusters=clusters,\n        )\n        if np.any(mask):\n            bitstrings.append(self.dataframe.loc[mask].to_numpy())\n        else:\n            bitstrings.append(\n                np.zeros((0, self.dataframe.shape[1]), dtype=np.uint8)\n            )\n\n    return bitstrings\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.counts","title":"counts","text":"<pre><code>counts(\n    filter_perfect_filling: bool = True,\n    clusters: Union[\n        tuple[int, int], List[tuple[int, int]]\n    ] = [],\n) -&gt; List[OrderedDict[str, int]]\n</code></pre> <p>Get the counts of unique bit strings.</p> <p>Parameters:</p> Name Type Description Default <code>filter_perfect_filling</code> <code>bool</code> <p>whether return will only contain perfect filling shots. Defaults to True.</p> <code>True</code> <code>clusters</code> <code>Union[tuple[int, int], List[tuple[int, int]]]</code> <p>(tuple[int, int], Sequence[Tuple[int, int]]): cluster index to filter shots from. If none are provided all clusters are used, defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>counts</code> <code>list of OrderedDict[str, int]</code> <p>list corresponding to each task in the report. Each element is an ndarray of shape (nshots, nsites) where nshots is the number of shots for the task and nsites is the number of sites in the task. For example: <pre><code>    [OrderedDict([('11', 892), ('10', 59), ('01', 49)])]\n</code></pre></p> Note <p>Note that nshots may vary between tasks if filter_perfect_filling is set to True.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>def counts(\n    self,\n    filter_perfect_filling: bool = True,\n    clusters: Union[tuple[int, int], List[tuple[int, int]]] = [],\n) -&gt; List[OrderedDict[str, int]]:\n    \"\"\"Get the counts of unique bit strings.\n\n    Args:\n        filter_perfect_filling (bool): whether return will\n            only contain perfect filling shots. Defaults to True.\n        clusters: (tuple[int, int], Sequence[Tuple[int, int]]):\n            cluster index to filter shots from. If none are provided\n            all clusters are used, defaults to [].\n\n    Returns:\n        counts (list of OrderedDict[str, int]): list corresponding to each\n            task in the report. Each element is an ndarray of shape\n            (nshots, nsites) where nshots is the number of shots for\n            the task and nsites is the number of sites in the task.\n            For example:\n            ```python\n                [OrderedDict([('11', 892), ('10', 59), ('01', 49)])]\n            ```\n\n    Note:\n        Note that nshots may vary between tasks if filter_perfect_filling\n        is set to True.\n\n    \"\"\"\n\n    def _generate_counts(bitstring):\n        output = np.unique(bitstring, axis=0, return_counts=True)\n\n        count_list = [\n            (\"\".join(map(str, bitstring)), int(count))\n            for bitstring, count in zip(*output)\n        ]\n        count_list.sort(key=lambda x: x[1], reverse=True)\n        count = OrderedDict(count_list)\n\n        return count\n\n    return list(\n        map(_generate_counts, self.bitstrings(filter_perfect_filling, clusters))\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.list_param","title":"list_param","text":"<pre><code>list_param(field_name: str) -&gt; List[Union[Number, None]]\n</code></pre> <p>List the parameters associate with the given variable field_name for each tasks.</p> <p>Parameters:</p> Name Type Description Default <code>field_name</code> <code>str</code> <p>variable name</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>def list_param(self, field_name: str) -&gt; List[Union[Number, None]]:\n    \"\"\"\n    List the parameters associate with the given variable field_name\n    for each tasks.\n\n    Args:\n        field_name (str): variable name\n\n    \"\"\"\n\n    def cast(x):\n        if x is None:\n            return None\n        elif isinstance(x, (list, tuple, np.ndarray)):\n            return list(map(cast, x))\n        else:\n            return float(x)\n\n    return list(map(cast, (meta.get(field_name) for meta in self.metas)))\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.rydberg_densities","title":"rydberg_densities","text":"<pre><code>rydberg_densities(\n    filter_perfect_filling: bool = True,\n    clusters: Union[\n        tuple[int, int], List[tuple[int, int]]\n    ] = [],\n) -&gt; Union[pd.Series, pd.DataFrame]\n</code></pre> <p>Get rydberg density for each task.</p> <p>Parameters:</p> Name Type Description Default <code>filter_perfect_filling</code> <code>bool</code> <p>whether return will only contain perfect filling shots. Defaults to True.</p> <code>True</code> <code>clusters</code> <code>Union[tuple[int, int], List[tuple[int, int]]]</code> <p>(tuple[int, int], Sequence[Tuple[int, int]]): cluster index to filter shots from. If none are provided all clusters are used, defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>rydberg_densities</code> <code>Union[Series, DataFrame]</code> <p>per-site rydberg density for each task as a pandas DataFrame or Series. For example: <pre><code>0      1\ntask_number\n0            0.053  0.054\n</code></pre></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>@beartype\ndef rydberg_densities(\n    self,\n    filter_perfect_filling: bool = True,\n    clusters: Union[tuple[int, int], List[tuple[int, int]]] = [],\n) -&gt; Union[pd.Series, pd.DataFrame]:\n    \"\"\"Get rydberg density for each task.\n\n    Args:\n        filter_perfect_filling (bool, optional): whether return will\n            only contain perfect filling shots. Defaults to True.\n        clusters: (tuple[int, int], Sequence[Tuple[int, int]]):\n            cluster index to filter shots from. If none are provided\n            all clusters are used, defaults to [].\n\n    Returns:\n        rydberg_densities (Union[pd.Series, pd.DataFrame]):\n            per-site rydberg density for each task as a pandas DataFrame or Series.\n            For example:\n            ```python\n            0      1\n            task_number\n            0            0.053  0.054\n            ```\n    \"\"\"\n    mask = self._filter(\n        filter_perfect_filling=filter_perfect_filling, clusters=clusters\n    )\n    df = self.dataframe[mask]\n    return 1 - (df.groupby(\"task_number\").mean())\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.base.Report.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Interactive Visualization of the Report</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/base.py</code> <pre><code>def show(self):\n    \"\"\"\n    Interactive Visualization of the Report\n\n    \"\"\"\n    display_report(self)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch","title":"batch","text":""},{"location":"reference/analog/#bloqade.analog.task.batch.Filter","title":"Filter","text":""},{"location":"reference/analog/#bloqade.analog.task.batch.Filter.filter_metadata","title":"filter_metadata","text":"<pre><code>filter_metadata(\n    __match_any__: bool = False,\n    **metadata: MetadataFilterType\n) -&gt; Union[LocalBatch, RemoteBatch]\n</code></pre> <p>Create a Batch object that has tasks filtered based on the values of metadata.</p> <p>Parameters:</p> Name Type Description Default <code>__match_any__</code> <code>bool</code> <p>if True, then a task will be included if it matches any of the metadata filters. If False, then a task will be included only if it matches all of the metadata filters. Defaults to False.</p> <code>False</code> <code>**metadata</code> <code>MetadataFilterType</code> <p>the metadata to filter on. The keys are the metadata names and the values (as a set) are the values to filter on. The elements in the set can be Real, Decimal, Tuple[Real], or Tuple[Decimal].</p> <code>{}</code> Return <p>type(self): a Batch object with the filtered tasks, either     LocalBatch or RemoteBatch depending on the type of self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>@beartype\ndef filter_metadata(\n    self, __match_any__: bool = False, **metadata: MetadataFilterType\n) -&gt; Union[\"LocalBatch\", \"RemoteBatch\"]:\n    \"\"\"Create a Batch object that has tasks filtered based on the\n    values of metadata.\n\n    Args:\n        __match_any__: if True, then a task will be included if it\n            matches any of the metadata filters. If False, then a\n            task will be included only if it matches all of the\n            metadata filters. Defaults to False.\n\n        **metadata: the metadata to filter on. The keys are the metadata\n            names and the values (as a set) are the values to filter on.\n            The elements in the set can be Real, Decimal, Tuple[Real], or\n            Tuple[Decimal].\n\n    Return:\n        type(self): a Batch object with the filtered tasks, either\n            LocalBatch or RemoteBatch depending on the type of self\n\n    \"\"\"\n\n    def convert_to_decimal(element):\n        if isinstance(element, list):\n            return list(map(convert_to_decimal, element))\n        elif isinstance(element, (Real, Decimal)):\n            return Decimal(str(element))\n        else:\n            raise ValueError(\n                f\"Invalid value {element} for metadata filter. \"\n                \"Only Real, Decimal, List[Real], and List[Decimal] \"\n                \"are supported.\"\n            )\n\n    def metadata_match_all(task):\n        return all(\n            task.metadata.get(key) in value for key, value in metadata.items()\n        )\n\n    def metadata_match_any(task):\n        return any(\n            task.metadata.get(key) in value for key, value in metadata.items()\n        )\n\n    metadata = {k: list(map(convert_to_decimal, v)) for k, v in metadata.items()}\n\n    metadata_filter = metadata_match_any if __match_any__ else metadata_match_all\n\n    new_tasks = OrderedDict(\n        [(k, v) for k, v in self.tasks.items() if metadata_filter(v)]\n    )\n\n    kw = dict(self.__dict__)\n    kw[\"tasks\"] = new_tasks\n\n    return self.__class__(**kw)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.LocalBatch","title":"LocalBatch  <code>dataclass</code>","text":"<pre><code>LocalBatch(\n    source: Optional[Builder],\n    tasks: OrderedDict[\n        int, Union[BraketEmulatorTask, BloqadeTask]\n    ],\n    name: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>Serializable</code>, <code>Filter</code></p>"},{"location":"reference/analog/#bloqade.analog.task.batch.LocalBatch.report","title":"report","text":"<pre><code>report() -&gt; Report\n</code></pre> <p>Generate analysis report base on currently completed tasks in the LocalBatch.</p> Return <p>Report</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def report(self) -&gt; Report:\n    \"\"\"\n    Generate analysis report base on currently\n    completed tasks in the LocalBatch.\n\n    Return:\n        Report\n\n    \"\"\"\n\n    ## this potentially can be specialize/disatch\n    ## offline\n    index = []\n    data = []\n    metas = []\n    geos = []\n\n    for task_number, task in self.tasks.items():\n        geometry = task.geometry\n        perfect_sorting = \"\".join(map(str, geometry.filling))\n        parallel_decoder = geometry.parallel_decoder\n\n        if parallel_decoder:\n            cluster_indices = parallel_decoder.get_cluster_indices()\n        else:\n            cluster_indices = {(0, 0): list(range(len(perfect_sorting)))}\n\n        shot_iter = filter(\n            lambda shot: shot.shot_status == QuEraShotStatusCode.Completed,\n            task.result().shot_outputs,\n        )\n\n        for shot, (cluster_coordinate, cluster_index) in product(\n            shot_iter, cluster_indices.items()\n        ):\n            pre_sequence = \"\".join(\n                map(\n                    str,\n                    (shot.pre_sequence[index] for index in cluster_index),\n                )\n            )\n\n            post_sequence = np.asarray(\n                [shot.post_sequence[index] for index in cluster_index],\n                dtype=np.int8,\n            )\n\n            pfc_sorting = \"\".join(\n                [perfect_sorting[index] for index in cluster_index]\n            )\n\n            key = (\n                task_number,\n                cluster_coordinate,\n                pfc_sorting,\n                pre_sequence,\n            )\n\n            index.append(key)\n            data.append(post_sequence)\n\n        metas.append(task.metadata)\n        geos.append(task.geometry)\n\n    index = pd.MultiIndex.from_tuples(\n        index, names=[\"task_number\", \"cluster\", \"perfect_sorting\", \"pre_sequence\"]\n    )\n\n    df = pd.DataFrame(data, index=index)\n    df.sort_index(axis=\"index\")\n\n    rept = None\n    if self.name is None:\n        rept = Report(df, metas, geos, \"Local\")\n    else:\n        rept = Report(df, metas, geos, self.name)\n\n    return rept\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.LocalBatch.rerun","title":"rerun","text":"<pre><code>rerun(\n    multiprocessing: bool = False,\n    num_workers: Optional[int] = None,\n    **kwargs\n)\n</code></pre> <p>Rerun all the tasks in the LocalBatch.</p> Return <p>Report</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>@beartype\ndef rerun(\n    self, multiprocessing: bool = False, num_workers: Optional[int] = None, **kwargs\n):\n    \"\"\"\n    Rerun all the tasks in the LocalBatch.\n\n    Return:\n        Report\n\n    \"\"\"\n\n    return self._run(\n        multiprocessing=multiprocessing, num_workers=num_workers, **kwargs\n    )\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch","title":"RemoteBatch  <code>dataclass</code>","text":"<pre><code>RemoteBatch(\n    source: Builder,\n    tasks: Union[\n        OrderedDict[int, QuEraTask],\n        OrderedDict[int, BraketTask],\n        OrderedDict[int, CustomRemoteTaskABC],\n    ],\n    name: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>Serializable</code>, <code>Filter</code></p>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.total_nshots","title":"total_nshots  <code>property</code>","text":"<pre><code>total_nshots\n</code></pre> <p>Total number of shots of all tasks in the RemoteBatch</p> Return <p>number of shots</p>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; RemoteBatch\n</code></pre> <p>Cancel all the tasks in the Batch.</p> Return <p>self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def cancel(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Cancel all the tasks in the Batch.\n\n    Return:\n        self\n\n    \"\"\"\n    # cancel all jobs\n    for task in self.tasks.values():\n        task.cancel()\n\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.fetch","title":"fetch","text":"<pre><code>fetch() -&gt; RemoteBatch\n</code></pre> <p>Fetch the tasks in the Batch.</p> Note <p>Fetching will update the status of tasks, and only pull the results for those tasks that have completed.</p> Return <p>self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def fetch(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Fetch the tasks in the Batch.\n\n    Note:\n        Fetching will update the status of tasks,\n        and only pull the results for those tasks\n        that have completed.\n\n    Return:\n        self\n\n    \"\"\"\n    # online, non-blocking\n    # pull the results only when its ready\n    for task in self.tasks.values():\n        task.fetch()\n\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.get_completed_tasks","title":"get_completed_tasks","text":"<pre><code>get_completed_tasks() -&gt; RemoteBatch\n</code></pre> <p>Create a RemoteBatch object that contain completed tasks from current Batch.</p> <p>Tasks consider completed with following status codes:</p> <ol> <li>Completed</li> <li>Partial</li> </ol> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def get_completed_tasks(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Create a RemoteBatch object that\n    contain completed tasks from current Batch.\n\n    Tasks consider completed with following status codes:\n\n    1. Completed\n    2. Partial\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    statuses = [\n        \"Completed\",\n        \"Partial\",\n    ]\n    return self.get_tasks(*statuses)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.get_failed_tasks","title":"get_failed_tasks","text":"<pre><code>get_failed_tasks() -&gt; RemoteBatch\n</code></pre> <p>Create a RemoteBatch object that contain failed tasks from current Batch.</p> <p>failed tasks with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> </ol> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def get_failed_tasks(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Create a RemoteBatch object that\n    contain failed tasks from current Batch.\n\n    failed tasks with following status codes:\n\n    1. Failed\n    2. Unaccepted\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    # statuses that are in a state that are\n    # completed because of an error\n    statuses = [\"Failed\", \"Unaccepted\"]\n    return self.get_tasks(*statuses)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.get_finished_tasks","title":"get_finished_tasks","text":"<pre><code>get_finished_tasks() -&gt; RemoteBatch\n</code></pre> <p>Create a RemoteBatch object that contain finished tasks from current Batch.</p> <p>Tasks consider finished with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> <li>Completed</li> <li>Partial</li> <li>Cancelled</li> </ol> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def get_finished_tasks(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Create a RemoteBatch object that\n    contain finished tasks from current Batch.\n\n    Tasks consider finished with following status codes:\n\n    1. Failed\n    2. Unaccepted\n    3. Completed\n    4. Partial\n    5. Cancelled\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    # statuses that are in a state that will\n    # not run going forward for any reason\n    statuses = [\"Completed\", \"Failed\", \"Unaccepted\", \"Partial\", \"Cancelled\"]\n    return self.get_tasks(*statuses)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.get_tasks","title":"get_tasks","text":"<pre><code>get_tasks(*status_codes: str) -&gt; RemoteBatch\n</code></pre> <p>Get Tasks with specify status_codes.</p> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>@beartype\ndef get_tasks(self, *status_codes: str) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Get Tasks with specify status_codes.\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    # offline:\n    st_codes = [QuEraTaskStatusCode(x) for x in status_codes]\n\n    new_task_results = OrderedDict()\n    for task_number, task in self.tasks.items():\n        if task.task_result_ir.task_status in st_codes:\n            new_task_results[task_number] = task\n\n    return RemoteBatch(self.source, new_task_results, name=self.name)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.pull","title":"pull","text":"<pre><code>pull() -&gt; RemoteBatch\n</code></pre> <p>Pull results of the tasks in the Batch.</p> Note <p>Pulling will pull the results for the tasks. If a given task(s) has not been completed, wait until it finished.</p> Return <p>self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def pull(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Pull results of the tasks in the Batch.\n\n    Note:\n        Pulling will pull the results for the tasks.\n        If a given task(s) has not been completed, wait\n        until it finished.\n\n    Return:\n        self\n    \"\"\"\n    # online, blocking\n    # pull the results. if its not ready, hanging\n    for task in self.tasks.values():\n        task.pull()\n\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.remove_failed_tasks","title":"remove_failed_tasks","text":"<pre><code>remove_failed_tasks() -&gt; RemoteBatch\n</code></pre> <p>Create a RemoteBatch object that contain tasks from current Batch, with failed tasks removed.</p> <p>failed tasks with following status codes:</p> <ol> <li>Failed</li> <li>Unaccepted</li> </ol> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def remove_failed_tasks(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Create a RemoteBatch object that\n    contain tasks from current Batch,\n    with failed tasks removed.\n\n    failed tasks with following status codes:\n\n    1. Failed\n    2. Unaccepted\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    # statuses that are in a state that will\n    # not run going forward because of an error\n    statuses = [\"Failed\", \"Unaccepted\"]\n    return self.remove_tasks(*statuses)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.remove_invalid_tasks","title":"remove_invalid_tasks","text":"<pre><code>remove_invalid_tasks() -&gt; RemoteBatch\n</code></pre> <p>Create a RemoteBatch object that contain tasks from current Batch, with all Unaccepted tasks removed.</p> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def remove_invalid_tasks(self) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Create a RemoteBatch object that\n    contain tasks from current Batch,\n    with all Unaccepted tasks removed.\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    return self.remove_tasks(\"Unaccepted\")\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.remove_tasks","title":"remove_tasks","text":"<pre><code>remove_tasks(\n    *status_codes: Literal[\n        \"Created\",\n        \"Running\",\n        \"Completed\",\n        \"Failed\",\n        \"Cancelled\",\n        \"Executing\",\n        \"Enqueued\",\n        \"Accepted\",\n        \"Unaccepted\",\n        \"Partial\",\n        \"Unsubmitted\",\n    ]\n) -&gt; RemoteBatch\n</code></pre> <p>Remove Tasks with specify status_codes.</p> Return <p>RemoteBatch</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>@beartype\ndef remove_tasks(\n    self,\n    *status_codes: Literal[\n        \"Created\",\n        \"Running\",\n        \"Completed\",\n        \"Failed\",\n        \"Cancelled\",\n        \"Executing\",\n        \"Enqueued\",\n        \"Accepted\",\n        \"Unaccepted\",\n        \"Partial\",\n        \"Unsubmitted\",\n    ],\n) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Remove Tasks with specify status_codes.\n\n    Return:\n        RemoteBatch\n\n    \"\"\"\n    # offline:\n\n    st_codes = [QuEraTaskStatusCode(x) for x in status_codes]\n\n    new_results = OrderedDict()\n    for task_number, task in self.tasks.items():\n        if task.task_result_ir.task_status in st_codes:\n            continue\n\n        new_results[task_number] = task\n\n    return RemoteBatch(self.source, new_results, self.name)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.report","title":"report","text":"<pre><code>report() -&gt; Report\n</code></pre> <p>Generate analysis report base on currently completed tasks in the RemoteBatch.</p> Return <p>Report</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def report(self) -&gt; \"Report\":\n    \"\"\"\n    Generate analysis report base on currently\n    completed tasks in the RemoteBatch.\n\n    Return:\n        Report\n\n    \"\"\"\n    ## this potentially can be specialize/disatch\n    ## offline\n    index = []\n    data = []\n    metas = []\n    geos = []\n\n    for task_number, task in self.tasks.items():\n        ## fliter not existing results tasks:\n        if (task.task_id is None) or (not task._result_exists()):\n            continue\n\n        ## filter has result but is not correctly completed.\n        if task.task_result_ir.task_status not in [\n            QuEraTaskStatusCode.Completed,\n            QuEraTaskStatusCode.Partial,\n        ]:\n            continue\n\n        geometry = task.geometry\n        perfect_sorting = \"\".join(map(str, geometry.filling))\n        parallel_decoder = geometry.parallel_decoder\n\n        if parallel_decoder:\n            cluster_indices = parallel_decoder.get_cluster_indices()\n        else:\n            cluster_indices = {(0, 0): list(range(len(perfect_sorting)))}\n\n        shot_iter = filter(\n            lambda shot: shot.shot_status == QuEraShotStatusCode.Completed,\n            task.result().shot_outputs,\n        )\n\n        for shot, (cluster_coordinate, cluster_index) in product(\n            shot_iter, cluster_indices.items()\n        ):\n            pre_sequence = \"\".join(\n                map(\n                    str,\n                    (shot.pre_sequence[index] for index in cluster_index),\n                )\n            )\n\n            post_sequence = np.asarray(\n                [shot.post_sequence[index] for index in cluster_index],\n                dtype=np.int8,\n            )\n\n            pfc_sorting = \"\".join(\n                [perfect_sorting[index] for index in cluster_index]\n            )\n\n            key = (\n                task_number,\n                cluster_coordinate,\n                pfc_sorting,\n                pre_sequence,\n            )\n\n            index.append(key)\n            data.append(post_sequence)\n\n        metas.append(task.metadata)\n        geos.append(task.geometry)\n\n    index = pd.MultiIndex.from_tuples(\n        index, names=[\"task_number\", \"cluster\", \"perfect_sorting\", \"pre_sequence\"]\n    )\n\n    df = pd.DataFrame(data, index=index)\n    df.sort_index(axis=\"index\")\n\n    rept = None\n    if self.name is None:\n        rept = Report(df, metas, geos, \"Remote\")\n    else:\n        rept = Report(df, metas, geos, self.name)\n\n    return rept\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.resubmit","title":"resubmit","text":"<pre><code>resubmit(shuffle_submit_order: bool = True) -&gt; RemoteBatch\n</code></pre> <p>Resubmit all the tasks in the RemoteBatch</p> Return <p>self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>@beartype\ndef resubmit(self, shuffle_submit_order: bool = True) -&gt; \"RemoteBatch\":\n    \"\"\"\n    Resubmit all the tasks in the RemoteBatch\n\n    Return:\n        self\n\n    \"\"\"\n    # online, non-blocking\n    self._submit(shuffle_submit_order, force=True)\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.retrieve","title":"retrieve","text":"<pre><code>retrieve() -&gt; RemoteBatch\n</code></pre> <p>Retrieve missing task results.</p> Note <p>Retrieve will update the status of tasks, and only pull the results for those tasks that have completed.</p> Return <p>self</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def retrieve(self) -&gt; \"RemoteBatch\":\n    \"\"\"Retrieve missing task results.\n\n    Note:\n        Retrieve will update the status of tasks,\n        and only pull the results for those tasks\n        that have completed.\n\n    Return:\n        self\n\n    \"\"\"\n    # partially online, sometimes blocking\n    # pull the results for tasks that have\n    # not been pulled already.\n    for task in self.tasks.values():\n        if not task._result_exists():\n            task.pull()\n\n    return self\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.RemoteBatch.tasks_metric","title":"tasks_metric","text":"<pre><code>tasks_metric() -&gt; pd.DataFrame\n</code></pre> <p>Get current tasks status metric</p> Return <p>dataframe with [\"task id\", \"status\", \"shots\"]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def tasks_metric(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get current tasks status metric\n\n    Return:\n        dataframe with [\"task id\", \"status\", \"shots\"]\n\n    \"\"\"\n    # [TODO] more info on current status\n    # offline, non-blocking\n    tid = []\n    data = []\n    for task_num, task in self.tasks.items():\n        tid.append(task_num)\n\n        dat: list[int | str | None] = [None, None, None]\n        dat[0] = task.task_id\n        if task.task_result_ir is not None:\n            dat[1] = task.task_result_ir.task_status.name\n        dat[2] = task.task_ir.nshots\n        data.append(dat)\n\n    return pd.DataFrame(data, index=tid, columns=[\"task ID\", \"status\", \"shots\"])\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.batch.Serializable","title":"Serializable","text":""},{"location":"reference/analog/#bloqade.analog.task.batch.Serializable.json","title":"json","text":"<pre><code>json(**options) -&gt; str\n</code></pre> <p>Serialize the object to JSON string.</p> Return <p>JSON string</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/batch.py</code> <pre><code>def json(self, **options) -&gt; str:\n    \"\"\"\n    Serialize the object to JSON string.\n\n    Return:\n        JSON string\n\n    \"\"\"\n    from bloqade.analog import dumps\n\n    return dumps(self, **options)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive","title":"exclusive","text":""},{"location":"reference/analog/#bloqade.analog.task.exclusive.ExclusiveRemoteTask","title":"ExclusiveRemoteTask  <code>dataclass</code>","text":"<pre><code>ExclusiveRemoteTask(\n    _task_ir: QuEraTaskSpecification | None,\n    _metadata: Dict[str, ParamType],\n    _parallel_decoder: ParallelDecoder | None,\n    _http_handler: HTTPHandlerABC = HTTPHandler(),\n    _task_id: str | None = None,\n    _task_result_ir: QuEraTaskResults | None = None,\n)\n</code></pre> <p>               Bases: <code>CustomRemoteTaskABC</code></p>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.ExclusiveRemoteTask.pull","title":"pull","text":"<pre><code>pull(poll_interval: float = 20)\n</code></pre> <p>Blocking pull to get the task result. poll_interval is the time interval to poll the task status. Please ensure that it is relatively large, otherwise the server could get overloaded with queries.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>def pull(self, poll_interval: float = 20):\n    \"\"\"\n    Blocking pull to get the task result.\n    poll_interval is the time interval to poll the task status.\n    Please ensure that it is relatively large, otherwise\n    the server could get overloaded with queries.\n    \"\"\"\n\n    while True:\n        if self._task_result_ir.task_status is QuEraTaskStatusCode.Unsubmitted:\n            raise ValueError(\"Task ID not found.\")\n\n        if self._task_result_ir.task_status in [\n            QuEraTaskStatusCode.Completed,\n            QuEraTaskStatusCode.Partial,\n            QuEraTaskStatusCode.Failed,\n            QuEraTaskStatusCode.Unaccepted,\n            QuEraTaskStatusCode.Cancelled,\n        ]:\n            return self\n\n        status = self.status()\n        if status in [QuEraTaskStatusCode.Completed, QuEraTaskStatusCode.Partial]:\n            self._task_result_ir = self._http_handler.fetch_results(self._task_id)\n            return self\n\n        time.sleep(poll_interval)\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandler","title":"HTTPHandler","text":"<pre><code>HTTPHandler(\n    zapier_webhook_url: str = None,\n    zapier_webhook_key: str = None,\n    vercel_api_url: str = None,\n)\n</code></pre> <p>               Bases: <code>HTTPHandlerABC</code></p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>def __init__(\n    self,\n    zapier_webhook_url: str = None,\n    zapier_webhook_key: str = None,\n    vercel_api_url: str = None,\n):\n    self.zapier_webhook_url = zapier_webhook_url or os.environ[\"ZAPIER_WEBHOOK_URL\"]\n    self.zapier_webhook_key = zapier_webhook_key or os.environ[\"ZAPIER_WEBHOOK_KEY\"]\n    self.verrcel_api_url = vercel_api_url or os.environ[\"VERCEL_API_URL\"]\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandler.fetch_results","title":"fetch_results","text":"<pre><code>fetch_results(task_id: str)\n</code></pre> <p>Fetch the task results from the AirTable.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task id to be queried.</p> required <p>returns     response: The response from the AirTable. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>def fetch_results(self, task_id: str):\n    response = request(\n        \"GET\",\n        self.verrcel_api_url,\n        params={\n            \"searchPattern\": task_id,\n            \"magicToken\": self.zapier_webhook_key,\n            \"useRegex\": False,\n        },\n    )\n    if response.status_code != 200:\n        print(f\"HTTP request failed with status code: {response.status_code}\")\n        print(\"HTTP responce: \", response.text)\n        return None\n\n    response_data = response.json()\n    # Get \"matched\" from the response\n    matches = response_data.get(\"matches\", None)\n    # The return is a list of dictionaries\n    # Verify if the list contains only one element\n    if matches is None:\n        print(\"No task found with the given ID.\")\n        return None\n    elif len(matches) &gt; 1:\n        print(\"Multiple tasks found with the given ID.\")\n        return None\n    record = matches[0]\n    if record.get(\"status\") == \"Completed\":\n        googledoc = record.get(\"resultsFileUrl\")\n\n        # convert the preview URL to download URL\n        googledoc = convert_preview_to_download(googledoc)\n        res = get(googledoc)\n        res.raise_for_status()\n        data = res.json()\n\n        task_results = QuEraTaskResults(**data)\n    return task_results\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandler.query_task_status","title":"query_task_status","text":"<pre><code>query_task_status(task_id: str)\n</code></pre> <p>Query the task status from the AirTable.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task id to be queried.</p> required <p>returns     response: The response from the AirTable. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>def query_task_status(self, task_id: str):\n    response = request(\n        \"GET\",\n        self.verrcel_api_url,\n        params={\n            \"searchPattern\": task_id,\n            \"magicToken\": self.zapier_webhook_key,\n            \"useRegex\": False,\n        },\n    )\n    if response.status_code != 200:\n        return \"Not Found\"\n    response_data = response.json()\n    # Get \"matched\" from the response\n    matches = response_data.get(\"matches\", None)\n    # The return is a list of dictionaries\n    # Verify if the list contains only one element\n    if matches is None:\n        print(\"No task found with the given ID.\")\n        return \"Failed\"\n    elif len(matches) &gt; 1:\n        print(\"Multiple tasks found with the given ID.\")\n        return \"Failed\"\n\n    # Extract the status from the first dictionary\n    status = matches[0].get(\"status\")\n    return status\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandler.submit_task_via_zapier","title":"submit_task_via_zapier","text":"<pre><code>submit_task_via_zapier(\n    task_ir: QuEraTaskSpecification,\n    task_id: str,\n    task_note: str,\n)\n</code></pre> <p>Submit a task and add task_id to the task fields for querying later.</p> <p>Parameters:</p> Name Type Description Default <code>task_ir</code> <code>QuEraTaskSpecification</code> <p>The task to be submitted.</p> required <code>task_id</code> <code>str</code> <p>The task id to be added to the task fields.</p> required <p>returns     response: The response from the Zapier webhook. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>def submit_task_via_zapier(\n    self, task_ir: QuEraTaskSpecification, task_id: str, task_note: str\n):\n    # implement http request logic to submit task via Zapier\n    request_options = dict(params={\"key\": self.zapier_webhook_key, \"note\": task_id})\n\n    # for metadata, task_ir in self._compile_single(shots, use_experimental, args):\n    json_request_body = task_ir.json(exclude_none=True, exclude_unset=True)\n\n    request_options.update(data=json_request_body)\n    response = request(\"POST\", self.zapier_webhook_url, **request_options)\n\n    if response.status_code == 200:\n        response_data = response.json()\n        submit_status = response_data.get(\"status\", None)\n        return submit_status\n    else:\n        print(f\"HTTP request failed with status code: {response.status_code}\")\n        print(\"HTTP responce: \", response.text)\n        return \"Failed\"\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandlerABC","title":"HTTPHandlerABC","text":""},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandlerABC.fetch_results","title":"fetch_results  <code>abstractmethod</code>","text":"<pre><code>fetch_results(task_id: str)\n</code></pre> <p>Fetch the task results from the AirTable.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task id to be queried.</p> required <p>returns     response: The response from the AirTable. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>@abc.abstractmethod\ndef fetch_results(task_id: str):\n    \"\"\"Fetch the task results from the AirTable.\n\n    args:\n        task_id: The task id to be queried.\n\n    returns\n        response: The response from the AirTable. used for error handling\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandlerABC.query_task_status","title":"query_task_status  <code>abstractmethod</code>","text":"<pre><code>query_task_status(task_id: str)\n</code></pre> <p>Query the task status from the AirTable.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task id to be queried.</p> required <p>returns     response: The response from the AirTable. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>@abc.abstractmethod\ndef query_task_status(task_id: str):\n    \"\"\"Query the task status from the AirTable.\n\n    args:\n        task_id: The task id to be queried.\n\n    returns\n        response: The response from the AirTable. used for error handling\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.task.exclusive.HTTPHandlerABC.submit_task_via_zapier","title":"submit_task_via_zapier  <code>abstractmethod</code>","text":"<pre><code>submit_task_via_zapier(\n    task_ir: QuEraTaskSpecification, task_id: str\n)\n</code></pre> <p>Submit a task and add task_id to the task fields for querying later.</p> <p>Parameters:</p> Name Type Description Default <code>task_ir</code> <code>QuEraTaskSpecification</code> <p>The task to be submitted.</p> required <code>task_id</code> <code>str</code> <p>The task id to be added to the task fields.</p> required <p>returns     response: The response from the Zapier webhook. used for error handling</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/task/exclusive.py</code> <pre><code>@abc.abstractmethod\ndef submit_task_via_zapier(task_ir: QuEraTaskSpecification, task_id: str):\n    \"\"\"Submit a task and add task_id to the task fields for querying later.\n\n    args:\n        task_ir: The task to be submitted.\n        task_id: The task id to be added to the task fields.\n\n    returns\n        response: The response from the Zapier webhook. used for error handling\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.visualization","title":"visualization","text":""},{"location":"reference/analog/#bloqade.analog.visualization.display","title":"display","text":""},{"location":"reference/analog/#bloqade.analog.visualization.display.atom_arrangement_figure","title":"atom_arrangement_figure","text":"<pre><code>atom_arrangement_figure(atom_arrangement, assignments)\n</code></pre> <p>show the register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/visualization/display.py</code> <pre><code>def atom_arrangement_figure(atom_arrangement, assignments):\n    \"\"\"show the register.\"\"\"\n    p = atom_arrangement.figure(None, **assignments)\n\n    # get the Blocade rad object\n    cr = None\n    for rd in p.renderers:\n        if rd.name == \"Brad\":\n            cr = rd\n\n    # adding rydberg radis input\n    Brad_input = NumericInput(\n        value=0, low=0, title=\"Blockade radius (um):\", mode=\"float\"\n    )\n\n    # js link toggle btn\n    toggle_button = Button(label=\"Toggle\")\n    toggle_button.js_on_event(\n        \"button_click\",\n        CustomJS(args=dict(cr=cr), code=\"\"\"cr.visible = !cr.visible;\"\"\"),\n    )\n\n    # js link radius\n    Brad_input.js_link(\"value\", cr.glyph, \"radius\")\n\n    full = column(p, row(Brad_input, toggle_button))\n    # full.sizing_mode=\"scale_both\"\n    return full\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.visualization.report_visualize","title":"report_visualize","text":""},{"location":"reference/analog/#bloqade.analog.visualization.report_visualize.plot_register_bits","title":"plot_register_bits","text":"<pre><code>plot_register_bits(geo)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/visualization/report_visualize.py</code> <pre><code>def plot_register_bits(geo):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    # xs_filled, ys_filled, labels_filled, density_filled = [], [], [], []\n    # xs_vacant, ys_vacant, labels_vacant, density_vacant = [], [], [], []\n    xs = []\n    ys = []\n    bits = []\n    labels = []\n\n    x_min = np.inf\n    x_max = -np.inf\n    y_min = np.inf\n    y_max = -np.inf\n    for idx, location_info in enumerate(zip(geo.sites, geo.filling)):\n        (x, y), filling = location_info\n        x = float(Decimal(str(x)) * Decimal(\"1e6\"))  # convert to um\n        y = float(Decimal(str(y)) * Decimal(\"1e6\"))  # convert to um\n        x_min = min(x, x_min)\n        y_min = min(y, y_min)\n        x_max = max(x, x_max)\n        y_max = max(y, y_max)\n\n        ys.append(y)\n        xs.append(x)\n        bits.append(0)\n        labels.append(idx)\n    print(x_min, x_max, y_min, y_max)\n\n    if len(geo.sites) &gt; 1:\n        length_scale = np.inf\n        for i, site_i in enumerate(geo.sites):\n            for site_j in geo.sites[i + 1 :]:\n                dist = np.linalg.norm(np.array(site_i) - np.array(site_j)) / 1e-6\n                length_scale = min(length_scale, dist)\n    else:\n        length_scale = 1\n\n    source = ColumnDataSource(data=dict(_x=xs, _y=ys, _bits=bits, _labels=labels))\n\n    hover = HoverTool()\n    hover.tooltips = [\n        (\"(x,y)\", \"(@_x, @_y)\"),\n        (\"index: \", \"@_labels\"),\n        (\"state: \", \"@_bits\"),\n    ]\n\n    color_mapper = LinearColorMapper(palette=\"Magma256\", low=0, high=1)\n\n    # specify that we want to map the colors to the y values,\n    # this could be replaced with a list of colors\n    ##p.scatter(x,y,color={'field': 'y', 'transform': color_mapper})\n\n    ## remove box_zoom since we don't want to change the scale\n\n    p = figure(\n        width=400,\n        height=400,\n        tools=\"wheel_zoom,reset, undo, redo, pan\",\n        toolbar_location=\"above\",\n        title=\"reg state\",\n    )\n    # interpolate between a scale for small lattices\n    # and a scale for larger lattices\n    radius = get_radius(length_scale, x_min, x_max, y_min, y_max)\n    window_size = max(x_max - x_min, y_max - y_min, 1)\n\n    p.x_range = Range1d(x_min - length_scale, x_min + window_size + length_scale)\n    p.y_range = Range1d(y_min - length_scale, y_min + window_size + length_scale)\n\n    p.circle(\n        \"_x\",\n        \"_y\",\n        source=source,\n        radius=radius,\n        fill_alpha=1,\n        line_color=\"black\",\n        color={\"field\": \"_bits\", \"transform\": color_mapper},\n        name=\"reg\",\n    )\n\n    p.xaxis.axis_label = \"(um)\"\n    p.add_tools(hover)\n\n    return p\n</code></pre>"},{"location":"reference/analog/#bloqade.analog.visualization.report_visualize.plot_register_ryd_dense","title":"plot_register_ryd_dense","text":"<pre><code>plot_register_ryd_dense(geo, ryds)\n</code></pre> <p>obtain a figure object from the atom arrangement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/analog/visualization/report_visualize.py</code> <pre><code>def plot_register_ryd_dense(geo, ryds):\n    \"\"\"obtain a figure object from the atom arrangement.\"\"\"\n    xs_filled, ys_filled, labels_filled, density_filled = [], [], [], []\n    xs_vacant, ys_vacant, labels_vacant, density_vacant = [], [], [], []\n    x_min = np.inf\n    x_max = -np.inf\n    y_min = np.inf\n    y_max = -np.inf\n    for idx, location_info in enumerate(zip(geo.sites, geo.filling, ryds)):\n        (x, y), filling, density = location_info\n        x = float(Decimal(str(x)) * Decimal(\"1e6\"))  # convert to um\n        y = float(Decimal(str(y)) * Decimal(\"1e6\"))  # convert to um\n        x_min = min(x, x_min)\n        y_min = min(y, y_min)\n        x_max = max(x, x_max)\n        y_max = max(y, y_max)\n        if filling:\n            xs_filled.append(x)\n            ys_filled.append(y)\n            labels_filled.append(idx)\n            density_filled.append(density)\n        else:\n            xs_vacant.append(x)\n            ys_vacant.append(y)\n            labels_vacant.append(idx)\n            density_vacant.append(density)\n\n    if len(geo.sites) &gt; 1:\n        length_scale = np.inf\n        for i, site_i in enumerate(geo.sites):\n            for site_j in geo.sites[i + 1 :]:\n                dist = np.linalg.norm(np.array(site_i) - np.array(site_j)) / 1e-6\n                length_scale = min(length_scale, dist)\n    else:\n        length_scale = 1\n\n    source_filled = ColumnDataSource(\n        data=dict(\n            _x=xs_filled, _y=ys_filled, _labels=labels_filled, _ryd=density_filled\n        )\n    )\n    source_vacant = ColumnDataSource(\n        data=dict(\n            _x=xs_vacant, _y=ys_vacant, _labels=labels_vacant, _ryd=density_vacant\n        )\n    )\n\n    hover = HoverTool()\n    hover.tooltips = [\n        (\"(x,y)\", \"(@_x, @_y)\"),\n        (\"index: \", \"@_labels\"),\n        (\"ryd density: \", \"@_ryd\"),\n    ]\n    color_mapper = LinearColorMapper(palette=\"Magma256\", low=min(ryds), high=max(ryds))\n\n    # specify that we want to map the colors to the y values,\n    # this could be replaced with a list of colors\n    ##p.scatter(x,y,color={'field': 'y', 'transform': color_mapper})\n\n    ## remove box_zoom since we don't want to change the scale\n\n    p = figure(\n        width=500,\n        height=400,\n        tools=\"wheel_zoom,reset, undo, redo, pan\",\n        toolbar_location=\"above\",\n        title=\"rydberg density\",\n    )\n    radius = get_radius(length_scale, x_min, x_max, y_min, y_max)\n    window_size = max(x_max - x_min, y_max - y_min, 1)\n\n    p.x_range = Range1d(x_min - length_scale, x_min + window_size + length_scale)\n    p.y_range = Range1d(y_min - length_scale, y_min + window_size + length_scale)\n\n    # interpolate between a scale for small lattices\n    # and a scale for larger lattices\n\n    p.circle(\n        \"_x\",\n        \"_y\",\n        source=source_filled,\n        radius=radius,\n        fill_alpha=1,\n        line_color=\"black\",\n        color={\"field\": \"_ryd\", \"transform\": color_mapper},\n    )\n\n    p.circle(\n        \"_x\",\n        \"_y\",\n        source=source_vacant,\n        radius=radius,\n        fill_alpha=1,\n        # color=\"grey\",\n        line_color=\"black\",\n        color={\"field\": \"_ryd\", \"transform\": color_mapper},\n        line_width=0.01 * length_scale,\n    )\n\n    color_bar = ColorBar(\n        color_mapper=color_mapper,\n        label_standoff=12,\n        border_line_color=None,\n        location=(0, 0),\n    )\n\n    p.xaxis.axis_label = \"(um)\"\n    p.add_layout(color_bar, \"right\")\n    p.add_tools(hover)\n\n    return p\n</code></pre>"},{"location":"reference/analysis/","title":"analysis","text":""},{"location":"reference/analysis/#bloqade.analysis.address","title":"address","text":""},{"location":"reference/analysis/#bloqade.analysis.address.analysis","title":"analysis","text":""},{"location":"reference/analysis/#bloqade.analysis.address.analysis.AddressAnalysis","title":"AddressAnalysis","text":"<p>               Bases: <code>Forward[Address]</code></p> <p>This analysis pass can be used to track the global addresses of qubits and wires.</p>"},{"location":"reference/analysis/#bloqade.analysis.address.analysis.AddressAnalysis.qubit_count","title":"qubit_count  <code>property</code>","text":"<pre><code>qubit_count: int\n</code></pre> <p>Total number of qubits found by the analysis.</p>"},{"location":"reference/analysis/#bloqade.analysis.address.impls","title":"impls","text":"<p>qubit.address method table for a few builtin dialects.</p>"},{"location":"reference/analysis/#bloqade.analysis.fidelity","title":"fidelity","text":""},{"location":"reference/analysis/#bloqade.analysis.fidelity.analysis","title":"analysis","text":""},{"location":"reference/analysis/#bloqade.analysis.fidelity.analysis.FidelityAnalysis","title":"FidelityAnalysis","text":"<p>               Bases: <code>Forward</code></p> <p>This analysis pass can be used to track the global addresses of qubits and wires.</p>"},{"location":"reference/analysis/#bloqade.analysis.fidelity.analysis.FidelityAnalysis--usage-examples","title":"Usage examples","text":"<pre><code>from bloqade import qasm2\nfrom bloqade.noise import native\nfrom bloqade.analysis.fidelity import FidelityAnalysis\nfrom bloqade.qasm2.passes.noise import NoisePass\n\nnoise_main = qasm2.extended.add(native.dialect)\n\n@noise_main\ndef main():\n    q = qasm2.qreg(2)\n    qasm2.x(q[0])\n    return q\n\nNoisePass(main.dialects)(main)\n\nfid_analysis = FidelityAnalysis(main.dialects)\nfid_analysis.run_analysis(main, no_raise=False)\n\ngate_fidelity = fid_analysis.gate_fidelity\natom_survival_probs = fid_analysis.atom_survival_probability\n</code></pre>"},{"location":"reference/analysis/#bloqade.analysis.fidelity.analysis.FidelityAnalysis.atom_survival_probability","title":"atom_survival_probability  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>atom_survival_probability: list[float] = field(init=False)\n</code></pre> <p>The probabilities that each of the atoms in the register survive the duration of the analysed program. The order of the list follows the order they are in the register.</p>"},{"location":"reference/analysis/#bloqade.analysis.fidelity.analysis.FidelityAnalysis.gate_fidelity","title":"gate_fidelity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gate_fidelity: float = 1.0\n</code></pre> <p>The fidelity of the gate set described by the analysed program. It reduces whenever a noise channel is encountered.</p>"},{"location":"reference/device/","title":"device","text":""},{"location":"reference/device/#bloqade.device.AbstractDevice","title":"AbstractDevice","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TaskType]</code></p> <p>Abstract base class for devices. Defines the minimum interface for devices.</p>"},{"location":"reference/device/#bloqade.device.AbstractDevice.task","title":"task  <code>abstractmethod</code>","text":"<pre><code>task(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; TaskType\n</code></pre> <p>Creates a remote task for the device.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/device.py</code> <pre><code>@abc.abstractmethod\ndef task(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; TaskType:\n    \"\"\"Creates a remote task for the device.\"\"\"\n</code></pre>"},{"location":"reference/device/#bloqade.device.AbstractRemoteDevice","title":"AbstractRemoteDevice","text":"<p>               Bases: <code>AbstractDevice[RemoteTaskType]</code></p> <p>Abstract base class for remote devices.</p>"},{"location":"reference/device/#bloqade.device.AbstractRemoteDevice.run","title":"run","text":"<pre><code>run(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1,\n    timeout: float | None = None\n) -&gt; list[RetType]\n</code></pre> <p>Runs the kernel and returns the result.</p> <p>Parameters:</p> Name Type Description Default <code>kernel</code> <code>Method</code> <p>The kernel method to run.</p> required <code>args</code> <code>tuple[Any, ...]</code> <p>Positional arguments to pass to the kernel method.</p> <code>()</code> <code>kwargs</code> <code>dict[str, Any] | None</code> <p>Keyword arguments to pass to the kernel method.</p> <code>None</code> <code>shots</code> <code>int</code> <p>The number of times to run the kernel method.</p> <code>1</code> <code>timeout</code> <code>float | None</code> <p>Timeout in seconds for the asynchronous execution. If None, wait indefinitely.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[RetType]</code> <p>list[RetType]: The result of the kernel method, if any.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/device.py</code> <pre><code>def run(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1,\n    timeout: float | None = None,\n) -&gt; list[RetType]:\n    \"\"\"Runs the kernel and returns the result.\n\n    Args:\n        kernel (ir.Method):\n            The kernel method to run.\n        args (tuple[Any, ...]):\n            Positional arguments to pass to the kernel method.\n        kwargs (dict[str, Any] | None):\n            Keyword arguments to pass to the kernel method.\n        shots (int):\n            The number of times to run the kernel method.\n        timeout (float | None):\n            Timeout in seconds for the asynchronous execution. If None, wait indefinitely.\n\n    Returns:\n        list[RetType]:\n            The result of the kernel method, if any.\n\n    \"\"\"\n    return self.task(kernel, args, kwargs).run(shots=shots, timeout=timeout)\n</code></pre>"},{"location":"reference/device/#bloqade.device.AbstractRemoteDevice.run_async","title":"run_async","text":"<pre><code>run_async(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1\n) -&gt; BatchFuture[RetType]\n</code></pre> <p>Runs the kernel asynchronously and returns a Future object.</p> <p>Parameters:</p> Name Type Description Default <code>kernel</code> <code>Method</code> <p>The kernel method to run.</p> required <code>args</code> <code>tuple[Any, ...]</code> <p>Positional arguments to pass to the kernel method.</p> <code>()</code> <code>kwargs</code> <code>dict[str, Any] | None</code> <p>Keyword arguments to pass to the kernel method.</p> <code>None</code> <code>shots</code> <code>int</code> <p>The number of times to run the kernel method.</p> <code>1</code> <p>Returns:</p> Type Description <code>BatchFuture[RetType]</code> <p>Future[list[RetType]]: The Future for all executions of the kernel method.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/device.py</code> <pre><code>def run_async(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1,\n) -&gt; BatchFuture[RetType]:\n    \"\"\"Runs the kernel asynchronously and returns a Future object.\n\n    Args:\n        kernel (ir.Method):\n            The kernel method to run.\n        args (tuple[Any, ...]):\n            Positional arguments to pass to the kernel method.\n        kwargs (dict[str, Any] | None):\n            Keyword arguments to pass to the kernel method.\n        shots (int):\n            The number of times to run the kernel method.\n\n    Returns:\n        Future[list[RetType]]:\n            The Future for all executions of the kernel method.\n\n\n    \"\"\"\n    return self.task(kernel, args, kwargs).run_async(shots=shots)\n</code></pre>"},{"location":"reference/device/#bloqade.device.AbstractSimulatorDevice","title":"AbstractSimulatorDevice","text":"<p>               Bases: <code>AbstractDevice[SimulatorTaskType]</code></p> <p>Abstract base class for simulator devices.</p>"},{"location":"reference/device/#bloqade.device.AbstractSimulatorDevice.run","title":"run","text":"<pre><code>run(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; RetType\n</code></pre> <p>Runs the kernel and returns the result.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/device.py</code> <pre><code>def run(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; RetType:\n    \"\"\"Runs the kernel and returns the result.\"\"\"\n    return self.task(kernel, args, kwargs).run()\n</code></pre>"},{"location":"reference/device/#bloqade.device.ExpectationDeviceMixin","title":"ExpectationDeviceMixin","text":"<p>               Bases: <code>AbstractDevice[ExpectTaskType]</code></p>"},{"location":"reference/device/#bloqade.device.ExpectationDeviceMixin.expect","title":"expect","text":"<pre><code>expect(\n    kernel: Method[Params, RetType],\n    observable: Method[[RetType], ObsType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1\n) -&gt; ObsType\n</code></pre> <p>Returns the expectation value of the given observable after running the task.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/device.py</code> <pre><code>def expect(\n    self,\n    kernel: ir.Method[Params, RetType],\n    observable: ir.Method[[RetType], ObsType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n    *,\n    shots: int = 1,\n) -&gt; ObsType:\n    \"\"\"Returns the expectation value of the given observable after running the task.\"\"\"\n    return self.task(kernel, args, kwargs).expect(observable, shots)\n</code></pre>"},{"location":"reference/noise/","title":"noise","text":""},{"location":"reference/noise/#bloqade.noise.native","title":"native","text":"<p>NOTE: This module is not guaranteed to be supported long-term in bloqade. We will be moving towards a more general approach to noise modeling in the future.</p>"},{"location":"reference/noise/#bloqade.noise.native.model","title":"model","text":""},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams","title":"GateNoiseParams  <code>dataclass</code>","text":"<pre><code>GateNoiseParams(\n    *,\n    local_px: float = 0.001,\n    local_py: float = 0.001,\n    local_pz: float = 0.001,\n    local_loss_prob: float = 0.0001,\n    global_px: float = 0.001,\n    global_py: float = 0.001,\n    global_pz: float = 0.001,\n    global_loss_prob: float = 0.001,\n    cz_paired_gate_px: float = 0.001,\n    cz_paired_gate_py: float = 0.001,\n    cz_paired_gate_pz: float = 0.001,\n    cz_gate_loss_prob: float = 0.001,\n    cz_unpaired_gate_px: float = 0.001,\n    cz_unpaired_gate_py: float = 0.001,\n    cz_unpaired_gate_pz: float = 0.001,\n    cz_unpaired_loss_prob: float = 0.001\n)\n</code></pre> <p>Parameters for gate noise.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_gate_loss_prob","title":"cz_gate_loss_prob  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_gate_loss_prob: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for a loss during CZ gate operation when two qubits are within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_paired_gate_px","title":"cz_paired_gate_px  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_paired_gate_px: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for a Pauli-X error during CZ gate operation when two qubits are within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_paired_gate_py","title":"cz_paired_gate_py  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_paired_gate_py: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for a Pauli-Y error during CZ gate operation when two qubits are within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_paired_gate_pz","title":"cz_paired_gate_pz  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_paired_gate_pz: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for a Pauli-Z error during CZ gate operation when two qubits are within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_unpaired_gate_px","title":"cz_unpaired_gate_px  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_unpaired_gate_px: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for Pauli-X error during CZ gate operation when another qubit is not within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_unpaired_gate_py","title":"cz_unpaired_gate_py  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_unpaired_gate_py: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for Pauli-Y error during CZ gate operation when another qubit is not within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_unpaired_gate_pz","title":"cz_unpaired_gate_pz  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_unpaired_gate_pz: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for Pauli-Z error during CZ gate operation when another qubit is not within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.cz_unpaired_loss_prob","title":"cz_unpaired_loss_prob  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cz_unpaired_loss_prob: float = field(\n    default=0.001, kw_only=True\n)\n</code></pre> <p>The error probability for a loss during CZ gate operation when another qubit is not within blockade radius.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.global_loss_prob","title":"global_loss_prob  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>global_loss_prob: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a loss during a global single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.global_px","title":"global_px  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>global_px: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-X error during a global single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.global_py","title":"global_py  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>global_py: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-Y error during a global single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.global_pz","title":"global_pz  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>global_pz: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-Z error during a global single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.local_loss_prob","title":"local_loss_prob  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>local_loss_prob: float = field(default=0.0001, kw_only=True)\n</code></pre> <p>The error probability for a loss during a local single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.local_px","title":"local_px  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>local_px: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-X error during a local single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.local_py","title":"local_py  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>local_py: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-Y error during a local single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.GateNoiseParams.local_pz","title":"local_pz  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>local_pz: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error probability for a Pauli-Z error during a local single qubit gate operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseModelABC","title":"MoveNoiseModelABC  <code>dataclass</code>","text":"<pre><code>MoveNoiseModelABC(\n    params: MoveNoiseParams = MoveNoiseParams(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for noise based on atom movement.</p> <p>This class defines the interface for a noise model. The gate noise is calculated form the parameters provided in this dataclass which can be updated when inheriting from this class. The move error is calculated by implementing the parallel_cz_errors method which takes a set of ctrl and qarg qubits and returns a noise model for all the qubits. The noise model is a dictionary with the keys being the error rates for the qubits and the values being the list of qubits that the error rate applies to.</p> <p>Once implemented the class can be used with the NoisePass to analyze a circuit and apply the noise model to the circuit.</p> <p>NOTE: This model is not guaranteed to be supported long-term in bloqade. We will be moving towards a more general approach to noise modeling in the future.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseModelABC.params","title":"params  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>params: MoveNoiseParams = field(\n    default_factory=MoveNoiseParams\n)\n</code></pre> <p>Parameters for calculating move noise.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseModelABC.join_binary_probs","title":"join_binary_probs  <code>classmethod</code>","text":"<pre><code>join_binary_probs(p1: float, *args: float) -&gt; float\n</code></pre> <p>Merge the probabilities of an event happening if the event can only happen once.</p> <p>For example, finding the effective probability of losing an atom from multiple sources, since a qubit can only happen once. This is done by using the formula:</p> <p>p = p1 * (1 - p2) + p2 * (1 - p1)</p> <p>applied recursively to all the probabilities in the list.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>float</code> <p>The probability of the event happening.</p> required <code>arg</code> <code>float</code> <p>The probabilities of the event happening from other sources.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The effective probability of the event happening.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>@classmethod\ndef join_binary_probs(cls, p1: float, *args: float) -&gt; float:\n    \"\"\"Merge the probabilities of an event happening if the event can only happen once.\n\n    For example, finding the effective probability of losing an atom from multiple sources, since\n    a qubit can only happen once. This is done by using the formula:\n\n    p = p1 * (1 - p2) + p2 * (1 - p1)\n\n    applied recursively to all the probabilities in the list.\n\n    Args:\n        p1 (float): The probability of the event happening.\n        arg (float): The probabilities of the event happening from other sources.\n\n    Returns:\n        float: The effective probability of the event happening.\n\n    \"\"\"\n    if len(args) == 0:\n        return p1\n    else:\n        p2 = cls.join_binary_probs(*args)\n        return p1 * (1 - p2) + p2 * (1 - p1)\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseModelABC.parallel_cz_errors","title":"parallel_cz_errors  <code>abstractmethod</code>","text":"<pre><code>parallel_cz_errors(\n    ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]\n</code></pre> <p>Takes a set of ctrls and qargs and returns a noise model for all qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>@abc.abstractmethod\ndef parallel_cz_errors(\n    self, ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]:\n    \"\"\"Takes a set of ctrls and qargs and returns a noise model for all qubits.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseModelABC.poisson_pauli_prob","title":"poisson_pauli_prob  <code>staticmethod</code>","text":"<pre><code>poisson_pauli_prob(rate: float, duration: float) -&gt; float\n</code></pre> <p>Calculate the number of noise events and their probabilities for a given rate and duration.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>@staticmethod\ndef poisson_pauli_prob(rate: float, duration: float) -&gt; float:\n    \"\"\"Calculate the number of noise events and their probabilities for a given rate and duration.\"\"\"\n    assert duration &gt;= 0, \"Duration must be non-negative\"\n    assert rate &gt;= 0, \"Rate must be non-negative\"\n    return 0.5 * (1 - math.exp(-2 * rate * duration))\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams","title":"MoveNoiseParams  <code>dataclass</code>","text":"<pre><code>MoveNoiseParams(\n    *,\n    idle_px_rate: float = 1e-06,\n    idle_py_rate: float = 1e-06,\n    idle_pz_rate: float = 1e-06,\n    idle_loss_rate: float = 1e-06,\n    move_px_rate: float = 1e-06,\n    move_py_rate: float = 1e-06,\n    move_pz_rate: float = 1e-06,\n    move_loss_rate: float = 1e-06,\n    pick_px: float = 0.001,\n    pick_py: float = 0.001,\n    pick_pz: float = 0.001,\n    pick_loss_prob: float = 0.0001,\n    move_speed: float = 0.5,\n    storage_spacing: float = 4.0\n)\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.idle_loss_rate","title":"idle_loss_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idle_loss_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate (prob/microsecond) for a loss during an idle operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.idle_px_rate","title":"idle_px_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idle_px_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate (prob/microsecond) for a Pauli-X error during an idle operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.idle_py_rate","title":"idle_py_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idle_py_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate (prob/microsecond) for a Pauli-Y error during an idle operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.idle_pz_rate","title":"idle_pz_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idle_pz_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate (prob/microsecond) for a Pauli-Z error during an idle operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.move_loss_rate","title":"move_loss_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>move_loss_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate e (prob/microsecond) for a loss during a move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.move_px_rate","title":"move_px_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>move_px_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate (prob/microsecond) for a Pauli-X error during a move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.move_py_rate","title":"move_py_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>move_py_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate e (prob/microsecond) for a Pauli-Y error during a move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.move_pz_rate","title":"move_pz_rate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>move_pz_rate: float = field(default=1e-06, kw_only=True)\n</code></pre> <p>The error rate e (prob/microsecond) for a Pauli-Z error during a move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.move_speed","title":"move_speed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>move_speed: float = field(default=0.5, kw_only=True)\n</code></pre> <p>Maximum speed of the qubits during a move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.pick_loss_prob","title":"pick_loss_prob  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pick_loss_prob: float = field(default=0.0001, kw_only=True)\n</code></pre> <p>The error rate for a loss during a pick operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.pick_px","title":"pick_px  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pick_px: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error rate (prob per pick operation)  for a Pauli-X error during a pick operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.pick_py","title":"pick_py  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pick_py: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error rate (prob per pick operation) for a Pauli-Y error during a pick operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.pick_pz","title":"pick_pz  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pick_pz: float = field(default=0.001, kw_only=True)\n</code></pre> <p>The error rate (prob per pick operation) for a Pauli-Z error during a pick operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.MoveNoiseParams.storage_spacing","title":"storage_spacing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>storage_spacing: float = field(default=4.0, kw_only=True)\n</code></pre> <p>Spacing between the qubits in the storage zone.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.SingleZoneLayoutABC","title":"SingleZoneLayoutABC  <code>dataclass</code>","text":"<pre><code>SingleZoneLayoutABC(\n    params: MoveNoiseParams = MoveNoiseParams(),\n    *,\n    gate_noise_params: GateNoiseParams = GateNoiseParams()\n)\n</code></pre> <p>               Bases: <code>MoveNoiseModelABC</code></p>"},{"location":"reference/noise/#bloqade.noise.native.model.SingleZoneLayoutABC.calculate_move_duration","title":"calculate_move_duration  <code>abstractmethod</code>","text":"<pre><code>calculate_move_duration(\n    ctrls: List[int], qargs: List[int]\n) -&gt; float\n</code></pre> <p>Calculate the time it takes to reconfigure the atom for executing the CZ gates.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>@abc.abstractmethod\ndef calculate_move_duration(self, ctrls: List[int], qargs: List[int]) -&gt; float:\n    \"\"\"Calculate the time it takes to reconfigure the atom for executing the CZ gates.\"\"\"\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.SingleZoneLayoutABC.parallel_cz_errors","title":"parallel_cz_errors","text":"<pre><code>parallel_cz_errors(\n    ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]\n</code></pre> <p>Apply parallel gates by moving ctrl qubits to qarg qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>def parallel_cz_errors(\n    self, ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]:\n    \"\"\"Apply parallel gates by moving ctrl qubits to qarg qubits.\"\"\"\n\n    move_duration = self.calculate_move_duration(ctrls, qargs)\n\n    # idle errors during atom moves\n    idle_px_time = self.poisson_pauli_prob(self.params.idle_px_rate, move_duration)\n    idle_py_time = self.poisson_pauli_prob(self.params.idle_py_rate, move_duration)\n    idle_pz_time = self.poisson_pauli_prob(self.params.idle_pz_rate, move_duration)\n    idle_p_loss_time = self.poisson_pauli_prob(\n        self.params.idle_loss_rate, move_duration\n    )\n\n    # even qubits not involved in the gate can still experience unpaired errors\n    idle_px = self.join_binary_probs(\n        self.gate_noise_params.cz_unpaired_gate_px, idle_px_time\n    )\n    idle_py = self.join_binary_probs(\n        self.gate_noise_params.cz_unpaired_gate_py, idle_py_time\n    )\n    idle_pz = self.join_binary_probs(\n        self.gate_noise_params.cz_unpaired_gate_pz, idle_pz_time\n    )\n    idle_p_loss = self.join_binary_probs(\n        self.gate_noise_params.cz_unpaired_loss_prob, idle_p_loss_time\n    )\n\n    errors = {(idle_px, idle_py, idle_pz, idle_p_loss): rest}\n\n    # error during the move\n    move_px_time = self.poisson_pauli_prob(self.params.move_px_rate, move_duration)\n    move_py_time = self.poisson_pauli_prob(self.params.move_py_rate, move_duration)\n    move_pz_time = self.poisson_pauli_prob(self.params.move_pz_rate, move_duration)\n    move_p_loss_time = self.poisson_pauli_prob(\n        self.params.move_loss_rate, move_duration\n    )\n    # error coming from picking up the qubits\n    px_moved = self.join_binary_probs(self.params.pick_px, move_px_time)\n    py_moved = self.join_binary_probs(self.params.pick_py, move_py_time)\n    pz_moved = self.join_binary_probs(self.params.pick_pz, move_pz_time)\n    p_loss_moved = self.join_binary_probs(\n        self.params.pick_loss_prob, move_p_loss_time\n    )\n\n    errors[(px_moved, py_moved, pz_moved, p_loss_moved)] = sorted(ctrls + qargs)\n\n    return errors\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.TwoRowZoneModel","title":"TwoRowZoneModel  <code>dataclass</code>","text":"<pre><code>TwoRowZoneModel(\n    params: MoveNoiseParams = MoveNoiseParams(),\n    gate_zone_y_offset: float = 20.0,\n    gate_spacing: float = 20.0,\n)\n</code></pre> <p>               Bases: <code>MoveNoiseModelABC</code></p> <p>This model assumes that the qubits are arranged in a single storage row with a row corresponding to a gate zone below it.</p> <p>The CZ gate noise is calculated using the following heuristic: The idle error is calculated by the total duration require to do the move and entable the qubits. Not every pair can be entangled at the same time, so we first deconflict the qargs assuming by finding subsets in which both the ctrl and the qarg qubits are in ascending order. This breaks the pairs into groups that can be moved and entangled separately. We then take each group and assign each pair to a gate zone slot. The slots are allocated by starting from the middle of the atoms and moving outwards making sure to keep the ctrl qubits in ascending order. The time to move a group is calculated by finding the maximum travel distance of the qarg and ctrl qubits and dviding by the move speed. The total move time is the sum of all the group move times. The error rate for all the qubits is then calculated by using the poisson_pauli_prob function. An additional error for the pick operation is calculated by joining the binary probabilities of the pick operation and the move operation.</p>"},{"location":"reference/noise/#bloqade.noise.native.model.TwoRowZoneModel.assign_gate_slots","title":"assign_gate_slots","text":"<pre><code>assign_gate_slots(\n    ctrls: Sequence[int], qargs: Sequence[int]\n) -&gt; Dict[int, Tuple[int, int]]\n</code></pre> <p>Allocate slots for the qubits to move to. start from middle of atoms and move outwards making sure to keep the ctrl qubits in ascending order.</p> <p>Note that we can do this because the move strategy is to move the ctrl qubits separately from the qarg qubits, thus we don't have to worry about qarg qubits crossing the ctrl qubits and vice versa. We pick the median of all the atoms because it distributes the qubits as evenly as possible over the gate zone.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>def assign_gate_slots(\n    self, ctrls: Sequence[int], qargs: Sequence[int]\n) -&gt; Dict[int, Tuple[int, int]]:\n    \"\"\"Allocate slots for the qubits to move to. start from middle of atoms and move outwards\n    making sure to keep the ctrl qubits in ascending order.\n\n    Note that we can do this because the move strategy is to move the ctrl qubits separately\n    from the qarg qubits, thus we don't have to worry about qarg qubits crossing the ctrl qubits\n    and vice versa. We pick the median of all the atoms because it distributes the qubits\n    as evenly as possible over the gate zone.\n\n    \"\"\"\n    assert len(ctrls) == len(qargs), \"Number of ctrls and qargs must be equal\"\n    addr_pairs = sorted(zip(ctrls, qargs), key=lambda x: x[0])\n    # sort by the distance between the ctrl and qarg qubits\n\n    ctrls, qargs = list(zip(*addr_pairs))\n\n    n_ctrls = len(ctrls)\n\n    ctrl_median = (\n        ctrls[n_ctrls // 2]\n        if n_ctrls % 2 == 1\n        else (ctrls[n_ctrls // 2 - 1] + ctrls[n_ctrls // 2]) / 2\n    )\n\n    all_addr = sorted(ctrls + qargs)\n    spatial_median = self.params.storage_spacing * (all_addr[0] + all_addr[-1]) / 2\n\n    addr_pairs.sort(key=lambda x: abs(x[0] - ctrl_median))\n\n    slots = {}\n    med_slot = round(spatial_median / self.gate_spacing)\n\n    left_slot = med_slot\n    right_slot = med_slot\n    slots[med_slot] = addr_pairs.pop(0)\n    while addr_pairs:\n        ctrl, qarg = addr_pairs.pop(0)\n\n        if ctrl &lt; ctrl_median:\n            slots[left_slot := left_slot - 1] = (ctrl, qarg)\n        else:\n            slots[right_slot := right_slot + 1] = (ctrl, qarg)\n\n    return slots\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.TwoRowZoneModel.calculate_move_duration","title":"calculate_move_duration","text":"<pre><code>calculate_move_duration(\n    slots: Dict[int, Tuple[int, int]],\n) -&gt; float\n</code></pre> <p>Calculate the time it takes to move the qubits from the ctrl to the qarg qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>def calculate_move_duration(self, slots: Dict[int, Tuple[int, int]]) -&gt; float:\n    \"\"\"Calculate the time it takes to move the qubits from the ctrl to the qarg qubits.\"\"\"\n\n    qarg_x_distance = float(\"-inf\")\n    ctrl_x_distance = float(\"-inf\")\n\n    for slot, (ctrl, qarg) in slots.items():\n        qarg_x_distance = max(\n            qarg_x_distance,\n            abs(qarg * self.params.storage_spacing - slot * self.gate_spacing),\n        )\n        ctrl_x_distance = max(\n            ctrl_x_distance,\n            abs(ctrl * self.params.storage_spacing - slot * self.gate_spacing),\n        )\n\n    qarg_max_distance = math.sqrt(qarg_x_distance**2 + self.gate_zone_y_offset**2)\n    ctrl_max_distance = math.sqrt(\n        ctrl_x_distance**2 + (self.gate_zone_y_offset - 3) ** 2\n    )\n\n    return (qarg_max_distance + ctrl_max_distance) / self.params.move_speed\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.TwoRowZoneModel.deconflict","title":"deconflict","text":"<pre><code>deconflict(\n    ctrls: List[int], qargs: List[int]\n) -&gt; List[Tuple[Tuple[int, ...], Tuple[int, ...]]]\n</code></pre> <p>Return a list of groups of ctrl and qarg qubits that can be moved and entangled separately.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>def deconflict(\n    self, ctrls: List[int], qargs: List[int]\n) -&gt; List[Tuple[Tuple[int, ...], Tuple[int, ...]]]:\n    \"\"\"Return a list of groups of ctrl and qarg qubits that can be moved and entangled separately.\"\"\"\n    # sort by ctrl qubit first to guarantee that they will be in ascending order\n    sorted_pairs = sorted(zip(ctrls, qargs))\n\n    groups = []\n    # group by qarg only putting it in a group if the qarg is greater than the last qarg in the group\n    # thus ensuring that the qargs are in ascending order\n    while len(sorted_pairs) &gt; 0:\n        ctrl, qarg = sorted_pairs.pop(0)\n\n        found = False\n        for group in groups:\n            if group[-1][1] &lt; qarg:\n                group.append((ctrl, qarg))\n                found = True\n                break\n        if not found:\n            groups.append([(ctrl, qarg)])\n\n    return [tuple(zip(*group)) for group in groups]\n</code></pre>"},{"location":"reference/noise/#bloqade.noise.native.model.TwoRowZoneModel.parallel_cz_errors","title":"parallel_cz_errors","text":"<pre><code>parallel_cz_errors(\n    ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]\n</code></pre> <p>Apply parallel gates by moving ctrl qubits to qarg qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/noise/native/model.py</code> <pre><code>def parallel_cz_errors(\n    self, ctrls: List[int], qargs: List[int], rest: List[int]\n) -&gt; Dict[Tuple[float, float, float, float], List[int]]:\n    \"\"\"Apply parallel gates by moving ctrl qubits to qarg qubits.\"\"\"\n    groups = self.deconflict(ctrls, qargs)\n    slots = [self.assign_gate_slots(*group) for group in groups]\n\n    move_duration = sum(map(self.calculate_move_duration, slots))\n\n    px_time = self.poisson_pauli_prob(self.params.move_px_rate, move_duration)\n    py_time = self.poisson_pauli_prob(self.params.move_py_rate, move_duration)\n    px_time = self.poisson_pauli_prob(self.params.move_pz_rate, move_duration)\n    move_p_loss_time = self.poisson_pauli_prob(\n        self.params.move_loss_rate, move_duration\n    )\n\n    errors = {(px_time, py_time, px_time, move_p_loss_time): rest}\n\n    px_moved = self.join_binary_probs(self.params.pick_px, px_time)\n    py_moved = self.join_binary_probs(self.params.pick_py, py_time)\n    pz_moved = self.join_binary_probs(self.params.pick_pz, px_time)\n    p_loss_moved = self.join_binary_probs(\n        self.params.pick_loss_prob, move_p_loss_time\n    )\n\n    errors[(px_moved, py_moved, pz_moved, p_loss_moved)] = sorted(ctrls + qargs)\n\n    return errors\n</code></pre>"},{"location":"reference/pyqrack/","title":"pyqrack","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.base","title":"base","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.base.DynamicMemory","title":"DynamicMemory  <code>dataclass</code>","text":"<pre><code>DynamicMemory(\n    pyqrack_options: PyQrackOptions = _default_pyqrack_args(),\n)\n</code></pre> <p>               Bases: <code>MemoryABC</code></p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.DynamicMemory.allocate","title":"allocate","text":"<pre><code>allocate(n_qubits: int)\n</code></pre> <p>Allocate <code>n_qubits</code> qubits and return their ids.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def allocate(self, n_qubits: int):\n    start = self.sim_reg.num_qubits()\n    for i in range(start, start + n_qubits):\n        self.sim_reg.allocate_qubit(i)\n\n    return tuple(range(start, start + n_qubits))\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MemoryABC","title":"MemoryABC  <code>dataclass</code>","text":"<pre><code>MemoryABC(\n    pyqrack_options: PyQrackOptions = _default_pyqrack_args(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MemoryABC.allocate","title":"allocate  <code>abstractmethod</code>","text":"<pre><code>allocate(n_qubits: int) -&gt; tuple[int, ...]\n</code></pre> <p>Allocate <code>n_qubits</code> qubits and return their ids.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>@abc.abstractmethod\ndef allocate(self, n_qubits: int) -&gt; tuple[int, ...]:\n    \"\"\"Allocate `n_qubits` qubits and return their ids.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MemoryABC.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the memory, releasing all qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the memory, releasing all qubits.\"\"\"\n    from pyqrack import QrackSimulator\n\n    # do not reset the simulator it might be used by\n    # results of the simulation\n    self.sim_reg = QrackSimulator(**self.pyqrack_options)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MockMemory","title":"MockMemory  <code>dataclass</code>","text":"<pre><code>MockMemory(\n    pyqrack_options: PyQrackOptions = _default_pyqrack_args(),\n)\n</code></pre> <p>               Bases: <code>MemoryABC</code></p> <p>Mock memory for testing purposes.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MockMemory.allocate","title":"allocate","text":"<pre><code>allocate(n_qubits: int)\n</code></pre> <p>Allocate <code>n_qubits</code> qubits and return their ids.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def allocate(self, n_qubits: int):\n    allocated = self.allocated + n_qubits\n    result = tuple(range(self.allocated, allocated))\n    self.allocated = allocated\n    return result\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.MockMemory.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the memory, releasing all qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def reset(self):\n    self.allocated = 0\n    self.sim_reg = Mock()\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.PyQrackInterpreter","title":"PyQrackInterpreter  <code>dataclass</code>","text":"<pre><code>PyQrackInterpreter(\n    *,\n    memory: MemoryType,\n    rng_state: Generator = np.random.default_rng(),\n    loss_m_result: Measurement = Measurement.One\n)\n</code></pre> <p>               Bases: <code>Interpreter</code>, <code>Generic[MemoryType]</code></p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.PyQrackInterpreter.loss_m_result","title":"loss_m_result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>loss_m_result: Measurement = field(\n    default=One, kw_only=True\n)\n</code></pre> <p>The value of a measurement result when a qubit is lost.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.StackMemory","title":"StackMemory  <code>dataclass</code>","text":"<pre><code>StackMemory(\n    pyqrack_options: PyQrackOptions = _default_pyqrack_args(),\n    *,\n    total: int\n)\n</code></pre> <p>               Bases: <code>MemoryABC</code></p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.StackMemory.allocate","title":"allocate","text":"<pre><code>allocate(n_qubits: int)\n</code></pre> <p>Allocate <code>n_qubits</code> qubits and return their ids.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def allocate(self, n_qubits: int):\n    curr_allocated = self.allocated\n    self.allocated += n_qubits\n\n    if self.allocated &gt; self.total:\n        raise InterpreterError(\n            f\"qubit allocation exceeds memory, \"\n            f\"{self.total} qubits, \"\n            f\"{self.allocated} allocated\"\n        )\n\n    return tuple(range(curr_allocated, self.allocated))\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.base.StackMemory.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the memory, releasing all qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/base.py</code> <pre><code>def reset(self):\n    super().reset()\n    self.allocated = 0\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device","title":"device","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.device.DynamicMemorySimulator","title":"DynamicMemorySimulator  <code>dataclass</code>","text":"<pre><code>DynamicMemorySimulator(\n    options: PyQrackOptions = _default_pyqrack_args(),\n    *,\n    loss_m_result: Measurement = Measurement.One,\n    rng_state: Generator = np.random.default_rng()\n)\n</code></pre> <p>               Bases: <code>PyQrackSimulatorBase</code></p> <p>PyQrack simulator device with dynamic qubit allocation.</p> <p>This can be used to simulate kernels where the number of qubits is not known ahead of time.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.DynamicMemorySimulator--usage-examples","title":"Usage examples","text":"<pre><code># Define a kernel\n@qasm2.main\ndef main():\n    q = qasm2.qreg(2)\n    c = qasm2.creg(2)\n\n    qasm2.h(q[0])\n    qasm2.cx(q[0], q[1])\n\n    qasm2.measure(q, c)\n    return q\n\n# Create the simulator object\nsim = DynamicMemorySimulator()\n\n# Execute the kernel\nqubits = sim.run(main)\n</code></pre> <p>You can also obtain other information from it, such as the state vector:</p> <p>``` ket = sim.state_vector(main)</p> <p>from pyqrack.pauli import Pauli expectation_vals = sim.pauli_expectation([Pauli.PauliX, Pauli.PauliI], qubits)</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.DynamicMemorySimulator.task","title":"task","text":"<pre><code>task(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>kernel</code> <code>Method</code> <p>The kernel method to run.</p> required <code>args</code> <code>tuple[Any, ...]</code> <p>Positional arguments to pass to the kernel method.</p> <code>()</code> <code>kwargs</code> <code>dict[str, Any] | None</code> <p>Keyword arguments to pass to the kernel method.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PyQrackSimulatorTask</code> <p>The task object used to track execution.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/device.py</code> <pre><code>def task(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n):\n    \"\"\"\n    Args:\n        kernel (ir.Method):\n            The kernel method to run.\n        args (tuple[Any, ...]):\n            Positional arguments to pass to the kernel method.\n        kwargs (dict[str, Any] | None):\n            Keyword arguments to pass to the kernel method.\n\n    Returns:\n        PyQrackSimulatorTask:\n            The task object used to track execution.\n\n    \"\"\"\n    if kwargs is None:\n        kwargs = {}\n\n    memory = DynamicMemory(self.options.copy())\n    return self.new_task(kernel, args, kwargs, memory)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.PyQrackSimulatorBase","title":"PyQrackSimulatorBase  <code>dataclass</code>","text":"<pre><code>PyQrackSimulatorBase(\n    options: PyQrackOptions = _default_pyqrack_args(),\n    *,\n    loss_m_result: Measurement = Measurement.One,\n    rng_state: Generator = np.random.default_rng()\n)\n</code></pre> <p>               Bases: <code>AbstractSimulatorDevice[PyQrackSimulatorTask]</code></p> <p>PyQrack simulation device base class.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.PyQrackSimulatorBase.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: PyQrackOptions = field(\n    default_factory=_default_pyqrack_args\n)\n</code></pre> <p>options (PyQrackOptions): options passed into the pyqrack simulator.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.PyQrackSimulatorBase.pauli_expectation","title":"pauli_expectation  <code>staticmethod</code>","text":"<pre><code>pauli_expectation(\n    pauli: list[Pauli], qubits: list[PyQrackQubit]\n) -&gt; float\n</code></pre> <p>Returns the expectation value of the given Pauli operator given a list of Pauli operators and qubits.</p> <p>Parameters:</p> Name Type Description Default <code>pauli</code> <code>list[Pauli]</code> <p>List of Pauli operators to compute the expectation value for.</p> required <code>qubits</code> <code>list[PyQrackQubit]</code> <p>List of qubits corresponding to the Pauli operators.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The expectation value of the Pauli operator.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/device.py</code> <pre><code>@staticmethod\ndef pauli_expectation(pauli: list[Pauli], qubits: list[PyQrackQubit]) -&gt; float:\n    \"\"\"Returns the expectation value of the given Pauli operator given a list of Pauli operators and qubits.\n\n    Args:\n        pauli (list[Pauli]):\n            List of Pauli operators to compute the expectation value for.\n        qubits (list[PyQrackQubit]):\n            List of qubits corresponding to the Pauli operators.\n\n    returns:\n        float:\n            The expectation value of the Pauli operator.\n\n    \"\"\"\n\n    if len(pauli) == 0:\n        return 0.0\n\n    if len(pauli) != len(qubits):\n        raise ValueError(\"Length of Pauli and qubits must match.\")\n\n    sim_reg = qubits[0].sim_reg\n\n    if any(qubit.sim_reg is not sim_reg for qubit in qubits):\n        raise ValueError(\"All qubits must belong to the same simulator register.\")\n\n    qubit_ids = [qubit.addr for qubit in qubits]\n\n    if len(qubit_ids) != len(set(qubit_ids)):\n        raise ValueError(\"Qubits must be unique.\")\n\n    return sim_reg.pauli_expectation(qubit_ids, pauli)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.PyQrackSimulatorBase.state_vector","title":"state_vector","text":"<pre><code>state_vector(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; list[complex]\n</code></pre> <p>Runs task and returns the state vector.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/device.py</code> <pre><code>def state_vector(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n) -&gt; list[complex]:\n    \"\"\"Runs task and returns the state vector.\"\"\"\n    task = self.task(kernel, args, kwargs)\n    task.run()\n    return task.state.sim_reg.out_ket()\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.StackMemorySimulator","title":"StackMemorySimulator  <code>dataclass</code>","text":"<pre><code>StackMemorySimulator(\n    options: PyQrackOptions = _default_pyqrack_args(),\n    *,\n    loss_m_result: Measurement = Measurement.One,\n    rng_state: Generator = np.random.default_rng(),\n    min_qubits: int = 0\n)\n</code></pre> <p>               Bases: <code>PyQrackSimulatorBase</code></p> <p>PyQrack simulator device with preallocated stack of qubits.</p> <p>This can be used to simulate kernels where the number of qubits is known ahead of time.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.StackMemorySimulator--usage-examples","title":"Usage examples","text":"<pre><code># Define a kernel\n@qasm2.main\ndef main():\n    q = qasm2.qreg(2)\n    c = qasm2.creg(2)\n\n    qasm2.h(q[0])\n    qasm2.cx(q[0], q[1])\n\n    qasm2.measure(q, c)\n    return q\n\n# Create the simulator object\nsim = StackMemorySimulator(min_qubits=2)\n\n# Execute the kernel\nqubits = sim.run(main)\n</code></pre> <p>You can also obtain other information from it, such as the state vector:</p> <pre><code>ket = sim.state_vector(main)\n\nfrom pyqrack.pauli import Pauli\nexpectation_vals = sim.pauli_expectation([Pauli.PauliX, Pauli.PauliI], qubits)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.device.StackMemorySimulator.task","title":"task","text":"<pre><code>task(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>kernel</code> <code>Method</code> <p>The kernel method to run.</p> required <code>args</code> <code>tuple[Any, ...]</code> <p>Positional arguments to pass to the kernel method.</p> <code>()</code> <code>kwargs</code> <code>dict[str, Any] | None</code> <p>Keyword arguments to pass to the kernel method.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>PyQrackSimulatorTask</code> <p>The task object used to track execution.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/device.py</code> <pre><code>def task(\n    self,\n    kernel: ir.Method[Params, RetType],\n    args: tuple[Any, ...] = (),\n    kwargs: dict[str, Any] | None = None,\n):\n    \"\"\"\n    Args:\n        kernel (ir.Method):\n            The kernel method to run.\n        args (tuple[Any, ...]):\n            Positional arguments to pass to the kernel method.\n        kwargs (dict[str, Any] | None):\n            Keyword arguments to pass to the kernel method.\n\n    Returns:\n        PyQrackSimulatorTask:\n            The task object used to track execution.\n\n    \"\"\"\n    if kwargs is None:\n        kwargs = {}\n\n    address_analysis = AddressAnalysis(dialects=kernel.dialects)\n    frame, _ = address_analysis.run_analysis(kernel)\n    if self.min_qubits == 0 and any(\n        isinstance(a, AnyAddress) for a in frame.entries.values()\n    ):\n        raise ValueError(\n            \"All addresses must be resolved. Or set min_qubits to a positive integer.\"\n        )\n\n    num_qubits = max(address_analysis.qubit_count, self.min_qubits)\n    options = self.options.copy()\n    options[\"qubitCount\"] = num_qubits\n    memory = StackMemory(\n        options,\n        total=num_qubits,\n    )\n\n    return self.new_task(kernel, args, kwargs, memory)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg","title":"reg","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.CBitRef","title":"CBitRef  <code>dataclass</code>","text":"<pre><code>CBitRef(ref: CRegister, pos: int)\n</code></pre> <p>Object representing a reference to a classical bit.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.CBitRef.pos","title":"pos  <code>instance-attribute</code>","text":"<pre><code>pos: int\n</code></pre> <p>The position of this bit in the classical register.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.CBitRef.ref","title":"ref  <code>instance-attribute</code>","text":"<pre><code>ref: CRegister\n</code></pre> <p>The classical register that is holding this bit.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.CRegister","title":"CRegister","text":"<pre><code>CRegister(size: int)\n</code></pre> <p>               Bases: <code>list[Measurement]</code></p> <p>Runtime representation of a classical register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/reg.py</code> <pre><code>def __init__(self, size: int):\n    super().__init__(Measurement.Zero for _ in range(size))\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.Measurement","title":"Measurement","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enumeration of measurement results.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit","title":"PyQrackQubit  <code>dataclass</code>","text":"<pre><code>PyQrackQubit(\n    addr: int, sim_reg: QrackSimulator, state: QubitState\n)\n</code></pre> <p>               Bases: <code>Qubit</code></p> <p>The runtime representation of a qubit reference.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit.addr","title":"addr  <code>instance-attribute</code>","text":"<pre><code>addr: int\n</code></pre> <p>The address of this qubit in the quantum register.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit.sim_reg","title":"sim_reg  <code>instance-attribute</code>","text":"<pre><code>sim_reg: QrackSimulator\n</code></pre> <p>The register of the simulator.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state: QubitState\n</code></pre> <p>The state of the qubit (active/lost)</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit.drop","title":"drop","text":"<pre><code>drop()\n</code></pre> <p>Drop the qubit in-place.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/reg.py</code> <pre><code>def drop(self):\n    \"\"\"Drop the qubit in-place.\"\"\"\n    self.state = QubitState.Lost\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.reg.PyQrackQubit.is_active","title":"is_active","text":"<pre><code>is_active() -&gt; bool\n</code></pre> <p>Check if the qubit is active.</p> <p>Returns     True if the qubit is active, False otherwise.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/reg.py</code> <pre><code>def is_active(self) -&gt; bool:\n    \"\"\"Check if the qubit is active.\n\n    Returns\n        True if the qubit is active, False otherwise.\n\n    \"\"\"\n    return self.state is QubitState.Active\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.squin","title":"squin","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.squin.runtime","title":"runtime","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.squin.runtime.OperatorRuntimeABC","title":"OperatorRuntimeABC  <code>dataclass</code>","text":"<pre><code>OperatorRuntimeABC()\n</code></pre> <p>The number of sites the operator applies to (including controls)</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target","title":"target","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack","title":"PyQrack  <code>dataclass</code>","text":"<pre><code>PyQrack(\n    min_qubits: int = 0,\n    dynamic_qubits: bool = False,\n    pyqrack_options: PyQrackOptions = _default_pyqrack_args(),\n)\n</code></pre> <p>PyQrack target runtime for Bloqade.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack.dynamic_qubits","title":"dynamic_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamic_qubits: bool = False\n</code></pre> <p>Whether to use dynamic qubit allocation. Cannot use with tensor network simulations.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack.min_qubits","title":"min_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_qubits: int = 0\n</code></pre> <p>Minimum number of qubits required for the PyQrack simulator. Useful when address analysis fails to determine the number of qubits.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack.pyqrack_options","title":"pyqrack_options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pyqrack_options: PyQrackOptions = field(\n    default_factory=_default_pyqrack_args\n)\n</code></pre> <p>Options to pass to the QrackSimulator object, node <code>qubitCount</code> will be overwritten.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack.multi_run","title":"multi_run","text":"<pre><code>multi_run(\n    mt: Method[Params, RetType],\n    _shots: int,\n    *args: args,\n    **kwargs: kwargs\n) -&gt; List[RetType]\n</code></pre> <p>Run the given kernel method on the PyQrack <code>_shots</code> times, caching analysis results.</p> <p>Args     mt (Method):         The kernel method to run.     _shots (int):         The number of times to run the kernel method.</p> <p>Returns     List of results of the kernel method, one for each shot.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/target.py</code> <pre><code>def multi_run(\n    self,\n    mt: ir.Method[Params, RetType],\n    _shots: int,\n    *args: Params.args,\n    **kwargs: Params.kwargs,\n) -&gt; List[RetType]:\n    \"\"\"Run the given kernel method on the PyQrack `_shots` times, caching analysis results.\n\n    Args\n        mt (Method):\n            The kernel method to run.\n        _shots (int):\n            The number of times to run the kernel method.\n\n    Returns\n        List of results of the kernel method, one for each shot.\n\n    \"\"\"\n    fold = Fold(mt.dialects)\n    fold(mt)\n\n    interpreter = self._get_interp(mt)\n    batched_results = []\n    for _ in range(_shots):\n        batched_results.append(interpreter.run(mt, args, kwargs))\n\n    return batched_results\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.target.PyQrack.run","title":"run","text":"<pre><code>run(\n    mt: Method[Params, RetType],\n    *args: args,\n    **kwargs: kwargs\n) -&gt; RetType\n</code></pre> <p>Run the given kernel method on the PyQrack simulator.</p> <p>Args     mt (Method):         The kernel method to run.</p> <p>Returns     The result of the kernel method, if any.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/target.py</code> <pre><code>def run(\n    self,\n    mt: ir.Method[Params, RetType],\n    *args: Params.args,\n    **kwargs: Params.kwargs,\n) -&gt; RetType:\n    \"\"\"Run the given kernel method on the PyQrack simulator.\n\n    Args\n        mt (Method):\n            The kernel method to run.\n\n    Returns\n        The result of the kernel method, if any.\n\n    \"\"\"\n    fold = Fold(mt.dialects)\n    fold(mt)\n    return self._get_interp(mt).run(mt, args, kwargs)\n</code></pre>"},{"location":"reference/pyqrack/#bloqade.pyqrack.task","title":"task","text":""},{"location":"reference/pyqrack/#bloqade.pyqrack.task.PyQrackSimulatorTask","title":"PyQrackSimulatorTask  <code>dataclass</code>","text":"<pre><code>PyQrackSimulatorTask(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...],\n    kwargs: dict[str, Any],\n    pyqrack_interp: PyQrackInterpreter[MemoryType],\n)\n</code></pre> <p>               Bases: <code>AbstractSimulatorTask[Param, RetType, MemoryType]</code></p> <p>PyQrack simulator task for Bloqade.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.task.PyQrackSimulatorTask.state","title":"state  <code>property</code>","text":"<pre><code>state: MemoryType\n</code></pre> <p>Returns the state of the simulator after running the task.</p>"},{"location":"reference/pyqrack/#bloqade.pyqrack.task.PyQrackSimulatorTask.run","title":"run","text":"<pre><code>run() -&gt; RetType\n</code></pre> <p>Executes the kernel and returns the result.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/pyqrack/task.py</code> <pre><code>def run(self) -&gt; RetType:\n    return self.pyqrack_interp.run(\n        self.kernel,\n        args=self.args,\n        kwargs=self.kwargs,\n    )\n</code></pre>"},{"location":"reference/qasm2/","title":"qasm2","text":""},{"location":"reference/qasm2/#bloqade.qasm2.barrier","title":"barrier","text":"<pre><code>barrier(qargs: tuple[Qubit, ...]) -&gt; None\n</code></pre> <p>Barrier instruction.</p> <p>Parameters:</p> Name Type Description Default <code>qargs</code> <code>tuple[Qubit, ...]</code> <p>The qubits to apply the barrier to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Barrier)\ndef barrier(qargs: tuple[Qubit, ...]) -&gt; None:\n    \"\"\"\n    Barrier instruction.\n\n    Args:\n        qargs: The qubits to apply the barrier to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.ccx","title":"ccx","text":"<pre><code>ccx(ctrl1: Qubit, ctrl2: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Toffoli gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl1</code> <code>Qubit</code> <p>The first control qubit.</p> required <code>ctrl2</code> <code>Qubit</code> <p>The second control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CCX)\ndef ccx(ctrl1: Qubit, ctrl2: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Toffoli gate.\n\n    Args:\n        ctrl1: The first control qubit.\n        ctrl2: The second control qubit.\n        qarg: The target qubit.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.ch","title":"ch","text":"<pre><code>ch(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Controlled-Hadamard gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CH)\ndef ch(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Controlled-Hadamard gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cos","title":"cos","text":"<pre><code>cos(value: float) -&gt; float\n</code></pre> <p>Cosine math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to take the cosine of.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The cosine of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Cos)\ndef cos(value: float) -&gt; float:\n    \"\"\"\n    Cosine math function.\n\n    Args:\n        value: The value to take the cosine of.\n\n    Returns:\n        The cosine of `value`.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cp","title":"cp","text":"<pre><code>cp(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Controlled phase rotation gate. Same as cu1</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CU1)\ndef cp(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Controlled phase rotation gate. Same as cu1\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        lam: The angle of rotation.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.creg","title":"creg","text":"<pre><code>creg(n_bits: int) -&gt; CReg\n</code></pre> <p>Create a new classical register with <code>n_bits</code> bits.</p> <p>Parameters:</p> Name Type Description Default <code>n_bits</code> <code>int</code> <p>The number of bits in the register.</p> required <p>Returns:</p> Type Description <code>CReg</code> <p>The newly created classical register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(core.CRegNew)\ndef creg(n_bits: int) -&gt; CReg:\n    \"\"\"\n    Create a new classical register with `n_bits` bits.\n\n    Args:\n        n_bits: The number of bits in the register.\n\n    Returns:\n        The newly created classical register.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.crx","title":"crx","text":"<pre><code>crx(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Controlled Rx rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CRX)\ndef crx(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Controlled Rx rotation gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        lam: The angle of rotation.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cry","title":"cry","text":"<pre><code>cry(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Controlled Ry rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CRY)\ndef cry(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Controlled Ry rotation gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        lam: The angle of rotation.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.crz","title":"crz","text":"<pre><code>crz(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Controlled Rz rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CRZ)\ndef crz(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Controlled Rz rotation gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        lam: The angle of rotation.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cswap","title":"cswap","text":"<pre><code>cswap(ctrl: Qubit, qarg1: Qubit, qarg2: Qubit) -&gt; None\n</code></pre> <p>Controlled Swap gate (Fredkin gate).</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg1</code> <code>Qubit</code> <p>The first target qubit.</p> required <code>qarg2</code> <code>Qubit</code> <p>The second target qubit.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CSwap)\ndef cswap(ctrl: Qubit, qarg1: Qubit, qarg2: Qubit) -&gt; None:\n    \"\"\"\n    Controlled Swap gate (Fredkin gate).\n\n    Args:\n        ctrl: The control qubit.\n        qarg1: The first target qubit.\n        qarg2: The second target qubit.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.csx","title":"csx","text":"<pre><code>csx(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Controlled-Sqrt(X) gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CSX)\ndef csx(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Controlled-Sqrt(X) gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cu","title":"cu","text":"<pre><code>cu(\n    ctrl: Qubit,\n    qarg: Qubit,\n    theta: float,\n    phi: float,\n    lam: float,\n    gamma: float,\n) -&gt; None\n</code></pre> <p>Controlled 4-parameter unitary gate.</p> <p>This is equal to:</p> <p>gate cu(theta,phi,lambda,gamma) c, t{     p(gamma) c;     p((lambda+phi)/2) c;     p((lambda-phi)/2) t;     cx c,t;     u(-theta/2,0,-(phi+lambda)/2) t;     cx c,t;     u(theta/2,phi,0) t; }</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required <code>phi</code> <code>float</code> <p>The angle of rotation.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required <code>gamma</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CU)\ndef cu(\n    ctrl: Qubit, qarg: Qubit, theta: float, phi: float, lam: float, gamma: float\n) -&gt; None:\n    \"\"\"\n    Controlled 4-parameter unitary gate.\n\n    This is equal to:\n\n    gate cu(theta,phi,lambda,gamma) c, t{\n        p(gamma) c;\n        p((lambda+phi)/2) c;\n        p((lambda-phi)/2) t;\n        cx c,t;\n        u(-theta/2,0,-(phi+lambda)/2) t;\n        cx c,t;\n        u(theta/2,phi,0) t;\n    }\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        theta: The angle of rotation.\n        phi: The angle of rotation.\n        lam: The angle of rotation.\n        gamma: The angle of rotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cu1","title":"cu1","text":"<pre><code>cu1(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Controlled phase rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CU1)\ndef cu1(ctrl: Qubit, qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Controlled phase rotation gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        lam: The angle of rotation.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cu3","title":"cu3","text":"<pre><code>cu3(\n    ctrl: Qubit,\n    qarg: Qubit,\n    theta: float,\n    phi: float,\n    lam: float,\n) -&gt; None\n</code></pre> <p>Controlled 3-parameter unitary gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required <code>phi</code> <code>float</code> <p>The angle of rotation.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CU3)\ndef cu3(ctrl: Qubit, qarg: Qubit, theta: float, phi: float, lam: float) -&gt; None:\n    \"\"\"\n    Controlled 3-parameter unitary gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n        theta: The angle of rotation.\n        phi: The angle of rotation.\n        lam: The angle of rotation.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cx","title":"cx","text":"<pre><code>cx(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Controlled-X (CNOT) gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CX)\ndef cx(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Controlled-X (CNOT) gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cy","title":"cy","text":"<pre><code>cy(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Controlled-Y gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CY)\ndef cy(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Controlled-Y gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.cz","title":"cz","text":"<pre><code>cz(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Controlled-Z gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The control qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The target qubit</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.CZ)\ndef cz(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Controlled-Z gate.\n\n    Args:\n        ctrl: The control qubit.\n        qarg: The target qubit\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.exp","title":"exp","text":"<pre><code>exp(value: float) -&gt; float\n</code></pre> <p>Exponential math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to exponentiate.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The exponential of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Exp)\ndef exp(value: float) -&gt; float:\n    \"\"\"\n    Exponential math function.\n\n    Args:\n        value: The value to exponentiate.\n\n    Returns:\n        The exponential of `value`.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.h","title":"h","text":"<pre><code>h(qarg: Qubit) -&gt; None\n</code></pre> <p>Hadamard gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.H)\ndef h(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Hadamard gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.id","title":"id","text":"<pre><code>id(qarg: Qubit) -&gt; None\n</code></pre> <p>Identity gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Id)\ndef id(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Identity gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.inline","title":"inline","text":"<pre><code>inline(text: str) -&gt; None\n</code></pre> <p>Inline QASM code into the current program.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The QASM code to inline.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(inline_.InlineQASM)\ndef inline(text: str) -&gt; None:\n    \"\"\"\n    Inline QASM code into the current program.\n\n    Args:\n        text: The QASM code to inline.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.ln","title":"ln","text":"<pre><code>ln(value: float) -&gt; float\n</code></pre> <p>logarithm math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to take the natural logarithm of.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The natural logarithm of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Log)\ndef ln(value: float) -&gt; float:\n    \"\"\"\n    logarithm math function.\n\n    Args:\n        value: The value to take the natural logarithm of.\n\n    Returns:\n        The natural logarithm of `value`.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.measure","title":"measure","text":"<pre><code>measure(qreg: QReg, creg: CReg) -&gt; None\n</code></pre><pre><code>measure(qarg: Qubit, cbit: Bit) -&gt; None\n</code></pre> <pre><code>measure(qarg, cbit) -&gt; None\n</code></pre> <p>Measure the qubit <code>qarg</code> and store the result in the classical bit <code>cbit</code>.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <p>The qubit to measure.</p> required <code>cbit</code> <p>The classical bit to store the result in.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(core.Measure)\ndef measure(qarg, cbit) -&gt; None:\n    \"\"\"\n    Measure the qubit `qarg` and store the result in the classical bit `cbit`.\n\n    Args:\n        qarg: The qubit to measure.\n        cbit: The classical bit to store the result in.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.p","title":"p","text":"<pre><code>p(qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>Phase gate.</p> <p>This is equivalent to u(0,0,lam), and u1(lam)</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>lam</code> <code>float</code> <p>The angle of phase.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.U1)\ndef p(qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    Phase gate.\n\n    This is equivalent to u(0,0,lam), and u1(lam)\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        lam: The angle of phase.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.qreg","title":"qreg","text":"<pre><code>qreg(n_qubits: int) -&gt; QReg\n</code></pre> <p>Create a new quantum register with <code>n_qubits</code> qubits.</p> <p>Parameters:</p> Name Type Description Default <code>n_qubits</code> <code>int</code> <p>The number of qubits in the register.</p> required <p>Returns:</p> Type Description <code>QReg</code> <p>The newly created quantum register.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(core.QRegNew)\ndef qreg(n_qubits: int) -&gt; QReg:\n    \"\"\"\n    Create a new quantum register with `n_qubits` qubits.\n\n    Args:\n        n_qubits: The number of qubits in the register.\n\n    Returns:\n        The newly created quantum register.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.reset","title":"reset","text":"<pre><code>reset(qarg: Qubit) -&gt; None\n</code></pre> <p>Reset the qubit <code>qarg</code> to the |0\u27e9 state.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to reset.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(core.Reset)\ndef reset(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Reset the qubit `qarg` to the |0\u27e9 state.\n\n    Args:\n        qarg: The qubit to reset.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.rx","title":"rx","text":"<pre><code>rx(qarg: Qubit, theta: float) -&gt; None\n</code></pre> <p>Single qubit rotation about the X axis on block sphere</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.RX)\ndef rx(qarg: Qubit, theta: float) -&gt; None:\n    \"\"\"\n    Single qubit rotation about the X axis on block sphere\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        theta: The angle of rotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.rxx","title":"rxx","text":"<pre><code>rxx(ctrl: Qubit, qarg: Qubit, theta: float) -&gt; None\n</code></pre> <p>XX rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The first qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The second qubit.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.RXX)\ndef rxx(ctrl: Qubit, qarg: Qubit, theta: float) -&gt; None:\n    \"\"\"\n    XX rotation gate.\n\n    Args:\n        ctrl: The first qubit.\n        qarg: The second qubit.\n        theta: The angle of rotation.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.ry","title":"ry","text":"<pre><code>ry(qarg: Qubit, theta: float) -&gt; None\n</code></pre> <p>Single qubit rotation about the Y axis on block sphere</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.RY)\ndef ry(qarg: Qubit, theta: float) -&gt; None:\n    \"\"\"\n    Single qubit rotation about the Y axis on block sphere\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        theta: The angle of rotation.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.rz","title":"rz","text":"<pre><code>rz(qarg: Qubit, theta: float) -&gt; None\n</code></pre> <p>Single qubit rotation about the Z axis on block sphere</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.RZ)\ndef rz(qarg: Qubit, theta: float) -&gt; None:\n    \"\"\"\n    Single qubit rotation about the Z axis on block sphere\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        theta: The angle of rotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.rzz","title":"rzz","text":"<pre><code>rzz(ctrl: Qubit, qarg: Qubit, theta: float) -&gt; None\n</code></pre> <p>ZZ rotation gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The first qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The second qubit.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.RZZ)\ndef rzz(ctrl: Qubit, qarg: Qubit, theta: float) -&gt; None:\n    \"\"\"\n    ZZ rotation gate.\n\n    Args:\n        ctrl: The first qubit.\n        qarg: The second qubit.\n        theta: The angle of rotation.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.s","title":"s","text":"<pre><code>s(qarg: Qubit) -&gt; None\n</code></pre> <p>S gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.S)\ndef s(qarg: Qubit) -&gt; None:\n    \"\"\"\n    S gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.sdg","title":"sdg","text":"<pre><code>sdg(qarg: Qubit) -&gt; None\n</code></pre> <p>Hermitian conjugate of the S gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Sdag)\ndef sdg(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Hermitian conjugate of the S gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.sin","title":"sin","text":"<pre><code>sin(value: float) -&gt; float\n</code></pre> <p>Sine math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to take the sine of.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The sine of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Sin)\ndef sin(value: float) -&gt; float:\n    \"\"\"\n    Sine math function.\n\n    Args:\n        value: The value to take the sine of.\n\n    Returns:\n        The sine of `value`.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.sqrt","title":"sqrt","text":"<pre><code>sqrt(value: float) -&gt; float\n</code></pre> <p>Square root math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to take the square root of.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The square root of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Sqrt)\ndef sqrt(value: float) -&gt; float:\n    \"\"\"\n    Square root math function.\n\n    Args:\n        value: The value to take the square root of.\n\n    Returns:\n        The square root of `value`.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.swap","title":"swap","text":"<pre><code>swap(ctrl: Qubit, qarg: Qubit) -&gt; None\n</code></pre> <p>Swap gate.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl</code> <code>Qubit</code> <p>The first qubit.</p> required <code>qarg</code> <code>Qubit</code> <p>The second qubit.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Swap)\ndef swap(ctrl: Qubit, qarg: Qubit) -&gt; None:\n    \"\"\"\n    Swap gate.\n\n    Args:\n        ctrl: The first qubit.\n        qarg: The second qubit.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.sx","title":"sx","text":"<pre><code>sx(qarg: Qubit) -&gt; None\n</code></pre> <p>Sqrt(X) gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.SX)\ndef sx(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Sqrt(X) gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.sxdg","title":"sxdg","text":"<pre><code>sxdg(qarg: Qubit) -&gt; None\n</code></pre> <p>Hermitian conjugate of Sqrt(X) gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.SXdag)\ndef sxdg(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Hermitian conjugate of Sqrt(X) gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.t","title":"t","text":"<pre><code>t(qarg: Qubit) -&gt; None\n</code></pre> <p>T gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.T)\ndef t(qarg: Qubit) -&gt; None:\n    \"\"\"\n    T gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.tan","title":"tan","text":"<pre><code>tan(value: float) -&gt; float\n</code></pre> <p>Tangent math function.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value to take the tangent of.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The tangent of <code>value</code>.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(expr.Tan)\ndef tan(value: float) -&gt; float:\n    \"\"\"\n    Tangent math function.\n\n    Args:\n        value: The value to take the tangent of.\n\n    Returns:\n        The tangent of `value`.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.tdg","title":"tdg","text":"<pre><code>tdg(qarg: Qubit) -&gt; None\n</code></pre> <p>Hermitian conjugate of the T gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Tdag)\ndef tdg(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Hermitian conjugate of the T gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.u","title":"u","text":"<pre><code>u(\n    qarg: Qubit, theta: float, phi: float, lam: float\n) -&gt; None\n</code></pre> <p>U gate.</p> Note <p>See https://arxiv.org/pdf/1707.03429 for definition of angles.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation</p> required <code>phi</code> <code>float</code> <p>The angle of rotation</p> required <code>lam</code> <code>float</code> <p>The angle of rotation</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.UGate)\ndef u(qarg: Qubit, theta: float, phi: float, lam: float) -&gt; None:\n    \"\"\"\n    U gate.\n\n    Note:\n        See https://arxiv.org/pdf/1707.03429 for definition of angles.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        theta: The angle of rotation\n        phi: The angle of rotation\n        lam: The angle of rotation\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.u1","title":"u1","text":"<pre><code>u1(qarg: Qubit, lam: float) -&gt; None\n</code></pre> <p>1 Parameter single qubit unitary gate.</p> <p>This is equivalent to u(0,0,lambda).</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.U1)\ndef u1(qarg: Qubit, lam: float) -&gt; None:\n    \"\"\"\n    1 Parameter single qubit unitary gate.\n\n    This is equivalent to u(0,0,lambda).\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        lam: The angle of rotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.u2","title":"u2","text":"<pre><code>u2(qarg: Qubit, phi: float, lam: float) -&gt; None\n</code></pre> <p>2 Parameter single qubit unitary gate.</p> <p>This is equivalent to u(pi/2,phi,lambda)</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>phi</code> <code>float</code> <p>The angle of rotation.</p> required <code>lam</code> <code>float</code> <p>The angle of rotation.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.U2)\ndef u2(qarg: Qubit, phi: float, lam: float) -&gt; None:\n    \"\"\"\n    2 Parameter single qubit unitary gate.\n\n    This is equivalent to u(pi/2,phi,lambda)\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        phi: The angle of rotation.\n        lam: The angle of rotation.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.u3","title":"u3","text":"<pre><code>u3(\n    qarg: Qubit, theta: float, phi: float, lam: float\n) -&gt; None\n</code></pre> <p>U3 gate, same as u</p> Note <p>See https://arxiv.org/pdf/1707.03429 for definition of angles.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required <code>theta</code> <code>float</code> <p>The angle of rotation</p> required <code>phi</code> <code>float</code> <p>The angle of rotation</p> required <code>lam</code> <code>float</code> <p>The angle of rotation</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.UGate)\ndef u3(qarg: Qubit, theta: float, phi: float, lam: float) -&gt; None:\n    \"\"\"\n    U3 gate, same as u\n\n    Note:\n        See https://arxiv.org/pdf/1707.03429 for definition of angles.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n        theta: The angle of rotation\n        phi: The angle of rotation\n        lam: The angle of rotation\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.x","title":"x","text":"<pre><code>x(qarg: Qubit) -&gt; None\n</code></pre> <p>Pauli-X gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.X)\ndef x(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Pauli-X gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.y","title":"y","text":"<pre><code>y(qarg: Qubit) -&gt; None\n</code></pre> <p>Pauli-Y gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Y)\ndef y(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Pauli-Y gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.z","title":"z","text":"<pre><code>z(qarg: Qubit) -&gt; None\n</code></pre> <p>Pauli-Z gate.</p> <p>Parameters:</p> Name Type Description Default <code>qarg</code> <code>Qubit</code> <p>The qubit to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/_wrappers.py</code> <pre><code>@wraps(uop.Z)\ndef z(qarg: Qubit) -&gt; None:\n    \"\"\"\n    Pauli-Z gate.\n\n    Args:\n        qarg: The qubit to apply the gate to.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.core","title":"core","text":""},{"location":"reference/qasm2/#bloqade.qasm2.core.BitType","title":"BitType  <code>module-attribute</code>","text":"<pre><code>BitType = PyClass(Bit)\n</code></pre> <p>Kirin type for a classical bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegType","title":"CRegType  <code>module-attribute</code>","text":"<pre><code>CRegType = PyClass(CReg)\n</code></pre> <p>Kirin type for a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegType","title":"QRegType  <code>module-attribute</code>","text":"<pre><code>QRegType = IListType[QubitType, Any]\n</code></pre> <p>Kirin type for a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QubitType","title":"QubitType  <code>module-attribute</code>","text":"<pre><code>QubitType = PyClass(Qubit)\n</code></pre> <p>Kirin type for a qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegEq","title":"CRegEq","text":"<p>               Bases: <code>Statement</code></p> <p>Check if two classical registers are equal.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegEq.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>lhs (CReg): The first register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegEq.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (bool): True if the registers are equal, False otherwise.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegEq.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>rhs (CReg): The second register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegGet","title":"CRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a bit from a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the bit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(CRegType)\n</code></pre> <p>reg (CReg): The classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(BitType)\n</code></pre> <p>result (Bit): The bit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegNew","title":"CRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegNew.n_bits","title":"n_bits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_bits: SSAValue = argument(Int)\n</code></pre> <p>n_bits (Int): The number of bits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.CRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(CRegType)\n</code></pre> <p>result (CReg): The new classical register with all bits set to 0.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.Measure","title":"Measure","text":"<p>               Bases: <code>Statement</code></p> <p>Measure a qubit and store the result in a bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.Measure.carg","title":"carg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>carg: SSAValue = argument(BitType | CRegType)\n</code></pre> <p>carg (Bit | CReg): The bit or register to store the result in.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.Measure.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType | QRegType)\n</code></pre> <p>qarg (Qubit | QReg): The qubit or quantum register to measure.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegGet","title":"QRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a qubit from a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the qubit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(QRegType)\n</code></pre> <p>reg (QReg): The quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QubitType)\n</code></pre> <p>result (Qubit): The qubit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegNew","title":"QRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegNew.n_qubits","title":"n_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_qubits: SSAValue = argument(Int)\n</code></pre> <p>n_qubits: The number of qubits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.QRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QRegType)\n</code></pre> <p>A new quantum register with n_qubits set to |0&gt;.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.Reset","title":"Reset","text":"<p>               Bases: <code>Statement</code></p> <p>Reset a qubit to the |0&gt; state.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.Reset.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit to reset.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts","title":"stmts","text":""},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegEq","title":"CRegEq","text":"<p>               Bases: <code>Statement</code></p> <p>Check if two classical registers are equal.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegEq.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>lhs (CReg): The first register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegEq.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (bool): True if the registers are equal, False otherwise.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegEq.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>rhs (CReg): The second register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegGet","title":"CRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a bit from a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the bit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(CRegType)\n</code></pre> <p>reg (CReg): The classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(BitType)\n</code></pre> <p>result (Bit): The bit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegNew","title":"CRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegNew.n_bits","title":"n_bits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_bits: SSAValue = argument(Int)\n</code></pre> <p>n_bits (Int): The number of bits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.CRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(CRegType)\n</code></pre> <p>result (CReg): The new classical register with all bits set to 0.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.Measure","title":"Measure","text":"<p>               Bases: <code>Statement</code></p> <p>Measure a qubit and store the result in a bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.Measure.carg","title":"carg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>carg: SSAValue = argument(BitType | CRegType)\n</code></pre> <p>carg (Bit | CReg): The bit or register to store the result in.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.Measure.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType | QRegType)\n</code></pre> <p>qarg (Qubit | QReg): The qubit or quantum register to measure.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegGet","title":"QRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a qubit from a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the qubit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(QRegType)\n</code></pre> <p>reg (QReg): The quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QubitType)\n</code></pre> <p>result (Qubit): The qubit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegNew","title":"QRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegNew.n_qubits","title":"n_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_qubits: SSAValue = argument(Int)\n</code></pre> <p>n_qubits: The number of qubits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.QRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QRegType)\n</code></pre> <p>A new quantum register with n_qubits set to |0&gt;.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.Reset","title":"Reset","text":"<p>               Bases: <code>Statement</code></p> <p>Reset a qubit to the |0&gt; state.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.core.stmts.Reset.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit to reset.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects","title":"dialects","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core","title":"core","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.BitType","title":"BitType  <code>module-attribute</code>","text":"<pre><code>BitType = PyClass(Bit)\n</code></pre> <p>Kirin type for a classical bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegType","title":"CRegType  <code>module-attribute</code>","text":"<pre><code>CRegType = PyClass(CReg)\n</code></pre> <p>Kirin type for a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegType","title":"QRegType  <code>module-attribute</code>","text":"<pre><code>QRegType = IListType[QubitType, Any]\n</code></pre> <p>Kirin type for a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QubitType","title":"QubitType  <code>module-attribute</code>","text":"<pre><code>QubitType = PyClass(Qubit)\n</code></pre> <p>Kirin type for a qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegEq","title":"CRegEq","text":"<p>               Bases: <code>Statement</code></p> <p>Check if two classical registers are equal.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegEq.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>lhs (CReg): The first register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegEq.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (bool): True if the registers are equal, False otherwise.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegEq.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>rhs (CReg): The second register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegGet","title":"CRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a bit from a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the bit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(CRegType)\n</code></pre> <p>reg (CReg): The classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(BitType)\n</code></pre> <p>result (Bit): The bit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegNew","title":"CRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegNew.n_bits","title":"n_bits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_bits: SSAValue = argument(Int)\n</code></pre> <p>n_bits (Int): The number of bits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.CRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(CRegType)\n</code></pre> <p>result (CReg): The new classical register with all bits set to 0.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.Measure","title":"Measure","text":"<p>               Bases: <code>Statement</code></p> <p>Measure a qubit and store the result in a bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.Measure.carg","title":"carg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>carg: SSAValue = argument(BitType | CRegType)\n</code></pre> <p>carg (Bit | CReg): The bit or register to store the result in.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.Measure.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType | QRegType)\n</code></pre> <p>qarg (Qubit | QReg): The qubit or quantum register to measure.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegGet","title":"QRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a qubit from a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the qubit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(QRegType)\n</code></pre> <p>reg (QReg): The quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QubitType)\n</code></pre> <p>result (Qubit): The qubit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegNew","title":"QRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegNew.n_qubits","title":"n_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_qubits: SSAValue = argument(Int)\n</code></pre> <p>n_qubits: The number of qubits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.QRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QRegType)\n</code></pre> <p>A new quantum register with n_qubits set to |0&gt;.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.Reset","title":"Reset","text":"<p>               Bases: <code>Statement</code></p> <p>Reset a qubit to the |0&gt; state.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.Reset.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit to reset.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts","title":"stmts","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegEq","title":"CRegEq","text":"<p>               Bases: <code>Statement</code></p> <p>Check if two classical registers are equal.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegEq.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>lhs (CReg): The first register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegEq.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (bool): True if the registers are equal, False otherwise.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegEq.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(Int | CRegType | BitType)\n</code></pre> <p>rhs (CReg): The second register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegGet","title":"CRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a bit from a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the bit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(CRegType)\n</code></pre> <p>reg (CReg): The classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(BitType)\n</code></pre> <p>result (Bit): The bit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegNew","title":"CRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegNew.n_bits","title":"n_bits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_bits: SSAValue = argument(Int)\n</code></pre> <p>n_bits (Int): The number of bits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.CRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(CRegType)\n</code></pre> <p>result (CReg): The new classical register with all bits set to 0.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.Measure","title":"Measure","text":"<p>               Bases: <code>Statement</code></p> <p>Measure a qubit and store the result in a bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.Measure.carg","title":"carg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>carg: SSAValue = argument(BitType | CRegType)\n</code></pre> <p>carg (Bit | CReg): The bit or register to store the result in.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.Measure.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType | QRegType)\n</code></pre> <p>qarg (Qubit | QReg): The qubit or quantum register to measure.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegGet","title":"QRegGet","text":"<p>               Bases: <code>Statement</code></p> <p>Get a qubit from a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegGet.idx","title":"idx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>idx: SSAValue = argument(Int)\n</code></pre> <p>idx (Int): The index of the qubit in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegGet.reg","title":"reg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reg: SSAValue = argument(QRegType)\n</code></pre> <p>reg (QReg): The quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegGet.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QubitType)\n</code></pre> <p>result (Qubit): The qubit at position <code>idx</code>.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegNew","title":"QRegNew","text":"<p>               Bases: <code>Statement</code></p> <p>Create a new quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegNew.n_qubits","title":"n_qubits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>n_qubits: SSAValue = argument(Int)\n</code></pre> <p>n_qubits: The number of qubits in the register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.QRegNew.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(QRegType)\n</code></pre> <p>A new quantum register with n_qubits set to |0&gt;.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.Reset","title":"Reset","text":"<p>               Bases: <code>Statement</code></p> <p>Reset a qubit to the |0&gt; state.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.core.stmts.Reset.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit to reset.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr","title":"expr","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Add","title":"Add","text":"<p>               Bases: <code>Statement</code></p> <p>Add two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Add.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Add.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Add.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstPI","title":"ConstPI","text":"<p>               Bases: <code>Statement</code></p> <p>The constant value of PI.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.ConstPI.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (ConstPI): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Cos","title":"Cos","text":"<p>               Bases: <code>Statement</code></p> <p>Take the cosine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Cos.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The cosine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Cos.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the cosine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Div","title":"Div","text":"<p>               Bases: <code>Statement</code></p> <p>Divide two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Div.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The numerator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Div.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the division.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Div.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The denominator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Exp","title":"Exp","text":"<p>               Bases: <code>Statement</code></p> <p>Take the exponential of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Exp.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The exponential of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Exp.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the exponential of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.GateFunction","title":"GateFunction","text":"<p>               Bases: <code>Statement</code></p> <p>Special Function for qasm2 gate subroutine.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Log","title":"Log","text":"<p>               Bases: <code>Statement</code></p> <p>Take the natural log of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Log.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The natural log of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Log.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the natural log of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Mul","title":"Mul","text":"<p>               Bases: <code>Statement</code></p> <p>Multiply two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Mul.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Mul.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Mul.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>Negate a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Neg.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The negated number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Neg.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to negate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Pow","title":"Pow","text":"<p>               Bases: <code>Statement</code></p> <p>Take the power of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Pow.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The base.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Pow.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the power operation.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Pow.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The exponent.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sin","title":"Sin","text":"<p>               Bases: <code>Statement</code></p> <p>Take the sine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sin.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The sine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sin.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the sine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sqrt","title":"Sqrt","text":"<p>               Bases: <code>Statement</code></p> <p>Take the square root of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sqrt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The square root of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sqrt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the square root of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sub","title":"Sub","text":"<p>               Bases: <code>Statement</code></p> <p>Subtract two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sub.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sub.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Sub.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Tan","title":"Tan","text":"<p>               Bases: <code>Statement</code></p> <p>Take the tangent of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Tan.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The tangent of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.Tan.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the tangent of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts","title":"stmts","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Add","title":"Add","text":"<p>               Bases: <code>Statement</code></p> <p>Add two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Add.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Add.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Add.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstPI","title":"ConstPI","text":"<p>               Bases: <code>Statement</code></p> <p>The constant value of PI.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.ConstPI.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (ConstPI): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Cos","title":"Cos","text":"<p>               Bases: <code>Statement</code></p> <p>Take the cosine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Cos.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The cosine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Cos.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the cosine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Div","title":"Div","text":"<p>               Bases: <code>Statement</code></p> <p>Divide two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Div.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The numerator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Div.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the division.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Div.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The denominator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Exp","title":"Exp","text":"<p>               Bases: <code>Statement</code></p> <p>Take the exponential of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Exp.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The exponential of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Exp.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the exponential of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.GateFunction","title":"GateFunction","text":"<p>               Bases: <code>Statement</code></p> <p>Special Function for qasm2 gate subroutine.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Log","title":"Log","text":"<p>               Bases: <code>Statement</code></p> <p>Take the natural log of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Log.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The natural log of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Log.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the natural log of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Mul","title":"Mul","text":"<p>               Bases: <code>Statement</code></p> <p>Multiply two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Mul.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Mul.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Mul.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>Negate a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Neg.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The negated number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Neg.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to negate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Pow","title":"Pow","text":"<p>               Bases: <code>Statement</code></p> <p>Take the power of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Pow.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The base.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Pow.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the power operation.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Pow.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The exponent.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sin","title":"Sin","text":"<p>               Bases: <code>Statement</code></p> <p>Take the sine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sin.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The sine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sin.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the sine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sqrt","title":"Sqrt","text":"<p>               Bases: <code>Statement</code></p> <p>Take the square root of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sqrt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The square root of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sqrt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the square root of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sub","title":"Sub","text":"<p>               Bases: <code>Statement</code></p> <p>Subtract two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sub.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sub.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Sub.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Tan","title":"Tan","text":"<p>               Bases: <code>Statement</code></p> <p>Take the tangent of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Tan.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The tangent of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.expr.stmts.Tan.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the tangent of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.indexing","title":"indexing","text":"<p>This dialect provides the indexing syntax in Python lowering for QASM2 dialects. The dialect itself does not contain new statements.</p> <p>Using this dialect will be conflict with Python semantics provided by <code>kirin.dialects.py.binop</code> and <code>kirin.dialects.py.indexing</code> dialects.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.inline","title":"inline","text":"<p>Inline QASM dialect.</p> <p>This dialect allows users to use QASM string as part of a <code>@qasm2.main</code> kernel.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop","title":"uop","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.QubitType","title":"QubitType  <code>module-attribute</code>","text":"<pre><code>QubitType = PyClass(Qubit)\n</code></pre> <p>Kirin type for a qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Barrier","title":"Barrier","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the Barrier statement.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Barrier.qargs","title":"qargs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qargs: tuple[SSAValue, ...] = argument(QubitType)\n</code></pre> <p>qargs: tuple of qubits to apply the barrier to.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CCX","title":"CCX","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the doubly controlled X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CCX.ctrl1","title":"ctrl1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl1: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl1 (Qubit): The first control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CCX.ctrl2","title":"ctrl2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl2: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl2 (Qubit): The second control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CCX.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CH","title":"CH","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-H gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRX","title":"CRX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRX.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRY","title":"CRY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRY.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRZ","title":"CRZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CRZ.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CSX","title":"CSX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CSwap","title":"CSwap","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the controlled swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CSwap.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CSwap.qarg1","title":"qarg1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg1: SSAValue = argument(QubitType)\n</code></pre> <p>qarg1 (Qubit): The first target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CSwap.qarg2","title":"qarg2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg2: SSAValue = argument(QubitType)\n</code></pre> <p>qarg2 (Qubit): The second target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU","title":"CU","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU1","title":"CU1","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU3","title":"CU3","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U3 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU3.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CU3.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CX","title":"CX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Alias for the CNOT or CH gate operations.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CY","title":"CY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.CZ","title":"CZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Z gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.H","title":"H","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Hadamard gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Id","title":"Id","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Identity gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RX","title":"RX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around x axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RXX","title":"RXX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the XX rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RXX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RY","title":"RY","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RY.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RZ","title":"RZ","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): the angle of rotation around Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RZZ","title":"RZZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the ZZ rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.RZZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.S","title":"S","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.SX","title":"SX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.SXdag","title":"SXdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the dagger of quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Sdag","title":"Sdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.SingleQubitGate","title":"SingleQubitGate","text":"<p>               Bases: <code>Statement</code></p> <p>Base class for single qubit gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.SingleQubitGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit argument.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Swap","title":"Swap","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.T","title":"T","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Tdag","title":"Tdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.TwoQubitCtrlGate","title":"TwoQubitCtrlGate","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.TwoQubitCtrlGate.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.TwoQubitCtrlGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.U1","title":"U1","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.U1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.U2","title":"U2","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U2 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.U2.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.U2.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.UGate","title":"UGate","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply A general single qubit unitary gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.UGate.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.UGate.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.UGate.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The theta parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.X","title":"X","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Y","title":"Y","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.Z","title":"Z","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Z gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts","title":"stmts","text":""},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Barrier","title":"Barrier","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the Barrier statement.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Barrier.qargs","title":"qargs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qargs: tuple[SSAValue, ...] = argument(QubitType)\n</code></pre> <p>qargs: tuple of qubits to apply the barrier to.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CCX","title":"CCX","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the doubly controlled X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CCX.ctrl1","title":"ctrl1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl1: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl1 (Qubit): The first control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CCX.ctrl2","title":"ctrl2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl2: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl2 (Qubit): The second control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CCX.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CH","title":"CH","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-H gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRX","title":"CRX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRX.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRY","title":"CRY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRY.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRZ","title":"CRZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CRZ.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CSX","title":"CSX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CSwap","title":"CSwap","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the controlled swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CSwap.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CSwap.qarg1","title":"qarg1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg1: SSAValue = argument(QubitType)\n</code></pre> <p>qarg1 (Qubit): The first target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CSwap.qarg2","title":"qarg2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg2: SSAValue = argument(QubitType)\n</code></pre> <p>qarg2 (Qubit): The second target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU","title":"CU","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU1","title":"CU1","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU3","title":"CU3","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U3 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU3.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CU3.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CX","title":"CX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Alias for the CNOT or CH gate operations.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CY","title":"CY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.CZ","title":"CZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Z gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.H","title":"H","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Hadamard gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Id","title":"Id","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Identity gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RX","title":"RX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around x axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RXX","title":"RXX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the XX rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RXX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RY","title":"RY","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RY.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RZ","title":"RZ","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): the angle of rotation around Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RZZ","title":"RZZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the ZZ rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.RZZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.S","title":"S","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.SX","title":"SX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.SXdag","title":"SXdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the dagger of quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Sdag","title":"Sdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.SingleQubitGate","title":"SingleQubitGate","text":"<p>               Bases: <code>Statement</code></p> <p>Base class for single qubit gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.SingleQubitGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit argument.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Swap","title":"Swap","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.T","title":"T","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Tdag","title":"Tdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.TwoQubitCtrlGate","title":"TwoQubitCtrlGate","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.TwoQubitCtrlGate.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.TwoQubitCtrlGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.U1","title":"U1","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.U1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.U2","title":"U2","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U2 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.U2.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.U2.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.UGate","title":"UGate","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply A general single qubit unitary gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.UGate.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.UGate.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.UGate.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The theta parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.X","title":"X","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Y","title":"Y","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.dialects.uop.stmts.Z","title":"Z","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Z gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.emit","title":"emit","text":""},{"location":"reference/qasm2/#bloqade.qasm2.emit.target","title":"target","text":""},{"location":"reference/qasm2/#bloqade.qasm2.emit.target.QASM2","title":"QASM2","text":"<pre><code>QASM2(\n    qelib1: bool = True,\n    allow_parallel: bool = False,\n    allow_global: bool = False,\n    custom_gate: bool = True,\n)\n</code></pre> <p>QASM2 target for Bloqade kernels.</p> <p>QASM2 target that accepts a Bloqade kernel and produces an AST that you can then obtain a string for printing or saving as a file.</p> <p>Parameters:</p> Name Type Description Default <code>allow_parallel</code> <code>bool</code> <p>Allow parallel gate in the resulting QASM2 AST. Defaults to <code>False</code>. In the case its False, and the input kernel uses parallel gates, they will get rewrite into uop gates.</p> <code>False</code> <code>allow_global</code> <code>bool</code> <p>Allow global gate in the resulting QASM2 AST. Defaults to <code>False</code>. In the case its False, and the input kernel uses global gates, they will get rewrite into parallel gates. If both <code>allow_parallel</code> and <code>allow_global</code> are False, the input kernel will be rewritten to use uop gates.</p> <code>False</code> <code>qelib1</code> <code>bool</code> <p>Include the <code>include \"qelib1.inc\"</code> line in the resulting QASM2 AST that's submitted to qBraid. Defaults to <code>True</code>.</p> <code>True</code> <code>custom_gate</code> <code>bool</code> <p>Include the custom gate definitions in the resulting QASM2 AST. Defaults to <code>True</code>. If <code>False</code>, all the qasm2.gate will be inlined.</p> <code>True</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/emit/target.py</code> <pre><code>def __init__(\n    self,\n    qelib1: bool = True,\n    allow_parallel: bool = False,\n    allow_global: bool = False,\n    custom_gate: bool = True,\n) -&gt; None:\n    \"\"\"Initialize the QASM2 target.\n\n    Args:\n        allow_parallel (bool):\n            Allow parallel gate in the resulting QASM2 AST. Defaults to `False`.\n            In the case its False, and the input kernel uses parallel gates, they will get rewrite into uop gates.\n\n        allow_global (bool):\n            Allow global gate in the resulting QASM2 AST. Defaults to `False`.\n            In the case its False, and the input kernel uses global gates, they will get rewrite into parallel gates.\n            If both `allow_parallel` and `allow_global` are False, the input kernel will be rewritten to use uop gates.\n\n        qelib1 (bool):\n            Include the `include \"qelib1.inc\"` line in the resulting QASM2 AST that's\n            submitted to qBraid. Defaults to `True`.\n        custom_gate (bool):\n            Include the custom gate definitions in the resulting QASM2 AST. Defaults to `True`. If `False`, all the qasm2.gate will be inlined.\n\n\n\n    \"\"\"\n    from bloqade import qasm2\n\n    self.main_target = qasm2.main\n    self.gate_target = qasm2.gate\n\n    self.qelib1 = qelib1\n    self.custom_gate = custom_gate\n    self.allow_parallel = allow_parallel\n    self.allow_global = allow_global\n\n    if allow_parallel:\n        self.main_target = self.main_target.add(qasm2.dialects.parallel)\n        self.gate_target = self.gate_target.add(qasm2.dialects.parallel)\n\n    if allow_global:\n        self.main_target = self.main_target.add(qasm2.dialects.glob)\n        self.gate_target = self.gate_target.add(qasm2.dialects.glob)\n\n    if allow_global or allow_parallel:\n        self.main_target = self.main_target.add(ilist)\n        self.gate_target = self.gate_target.add(ilist)\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.emit.target.QASM2.emit","title":"emit","text":"<pre><code>emit(entry: Method) -&gt; ast.MainProgram\n</code></pre> <p>Emit a QASM2 AST from the Bloqade kernel.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>Method</code> <p>The Bloqade kernel to convert to the QASM2 AST</p> required <p>Returns:</p> Type Description <code>MainProgram</code> <p>ast.MainProgram: A QASM2 AST object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/emit/target.py</code> <pre><code>def emit(self, entry: ir.Method) -&gt; ast.MainProgram:\n    \"\"\"Emit a QASM2 AST from the Bloqade kernel.\n\n    Args:\n        entry (ir.Method):\n            The Bloqade kernel to convert to the QASM2 AST\n\n    Returns:\n        ast.MainProgram:\n            A QASM2 AST object\n\n    \"\"\"\n    assert len(entry.args) == 0, \"entry method should not have arguments\"\n\n    # make a cloned instance of kernel\n    entry = entry.similar()\n    QASM2Fold(entry.dialects, inline_gate_subroutine=not self.custom_gate).fixpoint(\n        entry\n    )\n\n    if not self.allow_global:\n        # rewrite global to parallel\n        GlobalToParallel(dialects=entry.dialects)(entry)\n\n    if not self.allow_parallel:\n        # rewrite parallel to uop\n        ParallelToUOp(dialects=entry.dialects)(entry)\n\n    Py2QASM(entry.dialects)(entry)\n    target_main = EmitQASM2Main(self.main_target)\n    target_main.run(entry, ())\n\n    main_program = target_main.output\n    assert main_program is not None, f\"failed to emit {entry.sym_name}\"\n\n    extra = []\n    if self.qelib1:\n        extra.append(ast.Include(\"qelib1.inc\"))\n\n    if self.custom_gate:\n        cg = CallGraph(entry)\n        target_gate = EmitQASM2Gate(self.gate_target)\n\n        for _, fn in cg.defs.items():\n            if fn is entry:\n                continue\n\n            fn = fn.similar()\n            QASM2Fold(fn.dialects).fixpoint(fn)\n\n            if not self.allow_global:\n                # rewrite global to parallel\n                GlobalToParallel(dialects=fn.dialects)(fn)\n\n            if not self.allow_parallel:\n                # rewrite parallel to uop\n                ParallelToUOp(dialects=fn.dialects)(fn)\n\n            Py2QASM(fn.dialects)(fn)\n\n            target_gate.run(fn, tuple(ast.Name(name) for name in fn.arg_names[1:]))\n            assert target_gate.output is not None, f\"failed to emit {fn.sym_name}\"\n            extra.append(target_gate.output)\n\n    main_program.statements = extra + main_program.statements\n    return main_program\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.emit.target.QASM2.emit_str","title":"emit_str","text":"<pre><code>emit_str(entry: Method) -&gt; str\n</code></pre> <p>Emit a QASM2 AST from the Bloqade kernel.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>Method</code> <p>The Bloqade kernel to convert to the QASM2 AST</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string with the QASM2 representation of the kernel</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/emit/target.py</code> <pre><code>def emit_str(self, entry: ir.Method) -&gt; str:\n    \"\"\"Emit a QASM2 AST from the Bloqade kernel.\n\n    Args:\n        entry (ir.Method):\n            The Bloqade kernel to convert to the QASM2 AST\n\n    Returns:\n        str:\n            A string with the QASM2 representation of the kernel\n\n    \"\"\"\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=False,\n        force_interactive=False,\n        force_jupyter=False,\n        record=True,\n    )\n    pprint(self.emit(entry), console=console)\n    return console.export_text()\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.expr","title":"expr","text":""},{"location":"reference/qasm2/#bloqade.qasm2.expr.Add","title":"Add","text":"<p>               Bases: <code>Statement</code></p> <p>Add two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Add.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Add.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Add.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstPI","title":"ConstPI","text":"<p>               Bases: <code>Statement</code></p> <p>The constant value of PI.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.ConstPI.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (ConstPI): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Cos","title":"Cos","text":"<p>               Bases: <code>Statement</code></p> <p>Take the cosine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Cos.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The cosine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Cos.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the cosine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Div","title":"Div","text":"<p>               Bases: <code>Statement</code></p> <p>Divide two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Div.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The numerator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Div.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the division.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Div.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The denominator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Exp","title":"Exp","text":"<p>               Bases: <code>Statement</code></p> <p>Take the exponential of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Exp.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The exponential of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Exp.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the exponential of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.GateFunction","title":"GateFunction","text":"<p>               Bases: <code>Statement</code></p> <p>Special Function for qasm2 gate subroutine.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Log","title":"Log","text":"<p>               Bases: <code>Statement</code></p> <p>Take the natural log of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Log.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The natural log of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Log.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the natural log of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Mul","title":"Mul","text":"<p>               Bases: <code>Statement</code></p> <p>Multiply two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Mul.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Mul.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Mul.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>Negate a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Neg.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The negated number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Neg.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to negate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Pow","title":"Pow","text":"<p>               Bases: <code>Statement</code></p> <p>Take the power of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Pow.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The base.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Pow.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the power operation.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Pow.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The exponent.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sin","title":"Sin","text":"<p>               Bases: <code>Statement</code></p> <p>Take the sine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sin.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The sine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sin.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the sine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sqrt","title":"Sqrt","text":"<p>               Bases: <code>Statement</code></p> <p>Take the square root of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sqrt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The square root of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sqrt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the square root of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sub","title":"Sub","text":"<p>               Bases: <code>Statement</code></p> <p>Subtract two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sub.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sub.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Sub.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Tan","title":"Tan","text":"<p>               Bases: <code>Statement</code></p> <p>Take the tangent of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Tan.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The tangent of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.Tan.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the tangent of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts","title":"stmts","text":""},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Add","title":"Add","text":"<p>               Bases: <code>Statement</code></p> <p>Add two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Add.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Add.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Add.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the addition.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstPI","title":"ConstPI","text":"<p>               Bases: <code>Statement</code></p> <p>The constant value of PI.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.ConstPI.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (ConstPI): The result value.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Cos","title":"Cos","text":"<p>               Bases: <code>Statement</code></p> <p>Take the cosine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Cos.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The cosine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Cos.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the cosine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Div","title":"Div","text":"<p>               Bases: <code>Statement</code></p> <p>Divide two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Div.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The numerator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Div.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the division.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Div.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The denominator.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Exp","title":"Exp","text":"<p>               Bases: <code>Statement</code></p> <p>Take the exponential of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Exp.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The exponential of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Exp.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the exponential of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.GateFunction","title":"GateFunction","text":"<p>               Bases: <code>Statement</code></p> <p>Special Function for qasm2 gate subroutine.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Log","title":"Log","text":"<p>               Bases: <code>Statement</code></p> <p>Take the natural log of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Log.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The natural log of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Log.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the natural log of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Mul","title":"Mul","text":"<p>               Bases: <code>Statement</code></p> <p>Multiply two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Mul.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Mul.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Mul.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the multiplication.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>Negate a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Neg.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The negated number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Neg.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to negate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Pow","title":"Pow","text":"<p>               Bases: <code>Statement</code></p> <p>Take the power of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Pow.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The base.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Pow.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the power operation.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Pow.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The exponent.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sin","title":"Sin","text":"<p>               Bases: <code>Statement</code></p> <p>Take the sine of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sin.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The sine of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sin.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the sine of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sqrt","title":"Sqrt","text":"<p>               Bases: <code>Statement</code></p> <p>Take the square root of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sqrt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The square root of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sqrt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the square root of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sub","title":"Sub","text":"<p>               Bases: <code>Statement</code></p> <p>Subtract two numbers.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sub.lhs","title":"lhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lhs: SSAValue = argument(PyNum)\n</code></pre> <p>lhs (Union[int, float]): The left-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sub.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (Union[int, float]): The result of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Sub.rhs","title":"rhs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rhs: SSAValue = argument(PyNum)\n</code></pre> <p>rhs (Union[int, float]): The right-hand side of the subtraction.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Tan","title":"Tan","text":"<p>               Bases: <code>Statement</code></p> <p>Take the tangent of a number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Tan.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(PyNum)\n</code></pre> <p>result (float): The tangent of the number.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.expr.stmts.Tan.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: SSAValue = argument(PyNum)\n</code></pre> <p>value (Union[int, float]): The number to take the tangent of.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.glob","title":"glob","text":"<p>QASM2 extension for global gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.glob.u","title":"u","text":"<pre><code>u(\n    registers: IList[QReg, Any] | list,\n    theta: float,\n    phi: float,\n    lam: float,\n) -&gt; None\n</code></pre> <p>Apply a U gate to all qubits in the input registers.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>float</code> <p>The angle theta.</p> required <code>phi</code> <code>float</code> <p>The angle phi.</p> required <code>lam</code> <code>float</code> <p>The angle lam.</p> required <code>registers</code> <code>IList[QReg] | list[QReg]</code> <p>The registers to apply the gate to.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/glob.py</code> <pre><code>@wraps(glob.UGate)\ndef u(\n    registers: ilist.IList[QReg, Any] | list, theta: float, phi: float, lam: float\n) -&gt; None:\n    \"\"\"Apply a U gate to all qubits in the input registers.\n\n    Args:\n        theta (float): The angle theta.\n        phi (float): The angle phi.\n        lam (float): The angle lam.\n        registers (IList[QReg] | list[QReg]): The registers to apply the gate to.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.inline_","title":"inline_","text":"<p>Inline QASM dialect.</p> <p>This dialect allows users to use QASM string as part of a <code>@qasm2.main</code> kernel.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.parallel","title":"parallel","text":"<p>QASM2 extension for parallel execution of gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.parallel.cz","title":"cz","text":"<pre><code>cz(\n    ctrls: IList[Qubit, Any] | list,\n    qargs: IList[Qubit, Any] | list,\n) -&gt; None\n</code></pre> <p>Apply a controlled-Z gate to input qubits in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>ctrls</code> <code>IList[Qubit] | list[Qubit]</code> <p>The control qubits.</p> required <code>qargs</code> <code>IList[Qubit] | list[Qubit]</code> <p>The target qubits.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/parallel.py</code> <pre><code>@wraps(parallel.CZ)\ndef cz(\n    ctrls: ilist.IList[Qubit, Any] | list, qargs: ilist.IList[Qubit, Any] | list\n) -&gt; None:\n    \"\"\"Apply a controlled-Z gate to input qubits in parallel.\n\n    Args:\n        ctrls (IList[Qubit] | list[Qubit]): The control qubits.\n        qargs (IList[Qubit] | list[Qubit]): The target qubits.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.parallel.rz","title":"rz","text":"<pre><code>rz(qargs: IList[Qubit, Any] | list, theta: float) -&gt; None\n</code></pre> <p>Apply a RZ gate to input qubits in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>qargs</code> <code>IList[Qubit] | list[Qubit]</code> <p>The target qubits.</p> required <code>theta</code> <code>float</code> <p>The angle theta.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/parallel.py</code> <pre><code>@wraps(parallel.RZ)\ndef rz(qargs: ilist.IList[Qubit, Any] | list, theta: float) -&gt; None:\n    \"\"\"Apply a RZ gate to input qubits in parallel.\n\n    Args:\n        qargs (IList[Qubit] | list[Qubit]): The target qubits.\n        theta (float): The angle theta.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.parallel.u","title":"u","text":"<pre><code>u(\n    qargs: IList[Qubit, Any] | list,\n    theta: float,\n    phi: float,\n    lam: float,\n) -&gt; None\n</code></pre> <p>Apply a U gate to input qubits in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>qargs</code> <code>IList[Qubit] | list[Qubit]</code> <p>The target qubits.</p> required <code>theta</code> <code>float</code> <p>The angle theta.</p> required <code>phi</code> <code>float</code> <p>The angle phi.</p> required <code>lam</code> <code>float</code> <p>The angle lam.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/parallel.py</code> <pre><code>@wraps(parallel.UGate)\ndef u(\n    qargs: ilist.IList[Qubit, Any] | list, theta: float, phi: float, lam: float\n) -&gt; None:\n    \"\"\"Apply a U gate to input qubits in parallel.\n\n    Args:\n        qargs (IList[Qubit] | list[Qubit]): The target qubits.\n        theta (float): The angle theta.\n        phi (float): The angle phi.\n        lam (float): The angle lam.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.parse","title":"parse","text":""},{"location":"reference/qasm2/#bloqade.qasm2.parse.lowering","title":"lowering","text":""},{"location":"reference/qasm2/#bloqade.qasm2.parse.lowering.QASM2","title":"QASM2  <code>dataclass</code>","text":"<pre><code>QASM2(\n    *,\n    max_lines: int = 3,\n    hint_indent: int = 2,\n    hint_show_lineno: bool = True,\n    stacktrace: bool = True\n)\n</code></pre> <p>               Bases: <code>LoweringABC[Node]</code></p>"},{"location":"reference/qasm2/#bloqade.qasm2.parse.lowering.QASM2.branch_next_if_not_terminated","title":"branch_next_if_not_terminated","text":"<pre><code>branch_next_if_not_terminated(frame: Frame)\n</code></pre> <p>Branch to the next block if the current block is not terminated.</p> <p>This must be used after exhausting the current frame and before popping the frame.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qasm2/parse/lowering.py</code> <pre><code>def branch_next_if_not_terminated(self, frame: lowering.Frame):\n    \"\"\"Branch to the next block if the current block is not terminated.\n\n    This must be used after exhausting the current frame and before popping the frame.\n    \"\"\"\n    if not frame.curr_block.last_stmt or not frame.curr_block.last_stmt.has_trait(\n        ir.IsTerminator\n    ):\n        frame.curr_block.stmts.append(\n            cf.Branch(arguments=(), successor=frame.next_block)\n        )\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes","title":"passes","text":""},{"location":"reference/qasm2/#bloqade.qasm2.passes.fold","title":"fold","text":""},{"location":"reference/qasm2/#bloqade.qasm2.passes.fold.QASM2Fold","title":"QASM2Fold  <code>dataclass</code>","text":"<pre><code>QASM2Fold(inline_gate_subroutine: bool = True)\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>Fold pass for qasm2.extended</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.glob","title":"glob","text":"<p>Passes that deal with global gates. As of now, only one rewrite pass exists which converts global gates to single qubit gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.glob.GlobalToParallel","title":"GlobalToParallel","text":"<p>               Bases: <code>Pass</code></p> <p>Pass to convert Global gates into parallel gates.</p> <p>This pass rewrites the global unitary gate from the <code>qasm2.glob</code> dialect into multiple parallel gates in the <code>qasm2.parallel</code> dialect.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.glob.GlobalToParallel--usage-examples","title":"Usage Examples","text":"<pre><code># Define kernel\n@qasm2.extended\ndef main():\n    q1 = qasm2.qreg(1)\n    q2 = qasm2.qreg(2)\n\n    theta = 1.3\n    phi = 1.1\n    lam = 1.2\n\n    qasm2.glob.u(theta=theta, phi=phi, lam=lam, registers=[q1, q2])\n\nGlobalToParallel(dialects=main.dialects)(main)\n\n# Run rewrite\nGlobalToParallel(main.dialects)(main)\n</code></pre> <p>The <code>qasm2.glob.u</code> statement has been rewritten to individual gates:</p> <pre><code>qasm2.parallel.u(theta=theta, phi=phi, lam=lam, qargs=[q1[0], q2[0], q2[1]])\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.glob.GlobalToUOP","title":"GlobalToUOP","text":"<p>               Bases: <code>Pass</code></p> <p>Pass to convert Global gates into single gates.</p> <p>This pass rewrites the global unitary gate from the <code>qasm2.glob</code> dialect into multiple single gates in the <code>qasm2.uop</code> dialect, bringing the program closer to conforming to standard QASM2 syntax.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.glob.GlobalToUOP--usage-examples","title":"Usage Examples","text":"<pre><code># Define kernel\n@qasm2.extended\ndef main():\n    q1 = qasm2.qreg(1)\n    q2 = qasm2.qreg(2)\n\n    theta = 1.3\n    phi = 1.1\n    lam = 1.2\n\n    qasm2.glob.u(theta=theta, phi=phi, lam=lam, registers=[q1, q2])\n\nGlobalToUOP(dialects=main.dialects)(main)\n\n# Run rewrite\nGlobalToUOP(main.dialects)(main)\n</code></pre> <p>The <code>qasm2.glob.u</code> statement has been rewritten to individual gates:</p> <pre><code>qasm2.uop.u(q1[0], theta, phi, lam)\nqasm2.uop.u(q2[0], theta, phi, lam)\nqasm2.uop.u(q2[1], theta, phi, lam)\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.lift_qubits","title":"lift_qubits","text":""},{"location":"reference/qasm2/#bloqade.qasm2.passes.lift_qubits.LiftQubits","title":"LiftQubits","text":"<p>               Bases: <code>Pass</code></p> <p>This pass lifts the creation of qubits to the block where the register is defined.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.noise","title":"noise","text":""},{"location":"reference/qasm2/#bloqade.qasm2.passes.noise.NoisePass","title":"NoisePass  <code>dataclass</code>","text":"<pre><code>NoisePass(\n    noise_model: MoveNoiseModelABC = native.TwoRowZoneModel(),\n    gate_noise_params: GateNoiseParams = native.GateNoiseParams(),\n)\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>Apply a noise model to a quantum circuit.</p> <p>NOTE: This pass is not guaranteed to be supported long-term in bloqade. We will be moving towards a more general approach to noise modeling in the future.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.noise.NoisePass--usage-examples","title":"Usage examples","text":"<pre><code>from bloqade import qasm2\nfrom bloqade.noise import native\nfrom bloqade.qasm2.passes.noise import NoisePass\n\nnoise_main = qasm2.extended.add(native.dialect)\n\n@noise_main\ndef main():\n    q = qasm2.qreg(2)\n    qasm2.h(q[0])\n    qasm2.cx(q[0], q[1])\n    return q\n\n# simple IR without any nosie\nmain.print()\n\nnoise_pass = NoisePass(noise_main)\n\n# rewrite stuff in-place\nnoise_pass.unsafe_run(main)\n\n# now, we do have noise channels in the IR\nmain.print()\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.parallel","title":"parallel","text":"<p>Passes for converting parallel gates into multiple single gates as well as converting multiple single gates to parallel gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.parallel.ParallelToUOp","title":"ParallelToUOp  <code>dataclass</code>","text":"<pre><code>ParallelToUOp()\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>Pass to convert parallel gates into single gates.</p> <p>This pass rewrites any parallel gates from the <code>qasm2.parallel</code> dialect into multiple single gates in the <code>qasm2.uop</code> dialect, bringing the program closer to conforming to standard QASM2 syntax.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.parallel.ParallelToUOp--usage-examples","title":"Usage Examples","text":"<pre><code># Define kernel\n@qasm2.extended\ndef main():\n    q = qasm2.qreg(4)\n\n    qasm2.parallel.cz(ctrls=[q[0], q[2]], qargs=[q[1], q[3]])\n\n# Run rewrite\nParallelToUOp(main.dialects)(main)\n</code></pre> <p>The <code>qasm2.parallel.cz</code> statement has been rewritten to individual gates:</p> <pre><code>qasm2.uop.cz(ctrl=q[0], qarg=q[1])\nqasm2.uop.cz(ctrl=q[2], qarg=q[3])\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.parallel.UOpToParallel","title":"UOpToParallel  <code>dataclass</code>","text":"<pre><code>UOpToParallel(\n    merge_policy_type: Type[\n        MergePolicyABC\n    ] = SimpleOptimalMergePolicy,\n)\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>Pass to convert single gates into parallel gates.</p> <p>This pass looks for single gates from the <code>qasm2.uop</code> dialect that can be combined into parallel gates from the <code>qasm2.parallel</code> dialect and performs a rewrite to do so.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.parallel.UOpToParallel--usage-examples","title":"Usage Examples","text":"<pre><code># Define kernel\n@qasm2.main\ndef test():\n    q = qasm2.qreg(4)\n\n    theta = 0.1\n    phi = 0.2\n    lam = 0.3\n\n    qasm2.u(q[1], theta, phi, lam)\n    qasm2.u(q[3], theta, phi, lam)\n    qasm2.cx(q[1], q[3])\n    qasm2.u(q[2], theta, phi, lam)\n    qasm2.u(q[0], theta, phi, lam)\n    qasm2.cx(q[0], q[2])\n\n# Run rewrite\nUOpToParallel(main.dialects)(main)\n</code></pre> <p>The individual <code>qasm2.u</code> statements have now been combined into a single <code>qasm2.parallel.u</code> statement.</p> <pre><code>qasm2.parallel.u(qargs = [q[0], q[1], q[2], q[3]], theta, phi, lam)\nqasm2.uop.CX(q[1], q[3])\nqasm2.uop.CX(q[0], q[2])\n</code></pre>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.py2qasm","title":"py2qasm","text":"<p>Rewrite py dialects into qasm dialects.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.passes.qasm2py","title":"qasm2py","text":"<p>Rewrite qasm dialects into py dialects.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite","title":"rewrite","text":""},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.heuristic_noise","title":"heuristic_noise","text":""},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.heuristic_noise.NoiseRewriteRule","title":"NoiseRewriteRule  <code>dataclass</code>","text":"<pre><code>NoiseRewriteRule(\n    address_analysis: Dict[SSAValue, Address],\n    gate_noise_params: GateNoiseParams = native.GateNoiseParams(),\n    noise_model: MoveNoiseModelABC = native.TwoRowZoneModel(),\n)\n</code></pre> <p>               Bases: <code>RewriteRule</code></p> <p>NOTE: This pass is not guaranteed to be supported long-term in bloqade. We will be moving towards a more general approach to noise modeling in the future.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.register","title":"register","text":""},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.register.RaiseRegisterRule","title":"RaiseRegisterRule","text":"<p>               Bases: <code>RewriteRule</code></p> <p>This rule puts all registers at the top of the block.</p> <p>This is required for the UOpToParallel rules to work correctly to handle cases where a register is defined in between two statements that can be parallelized.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel","title":"uop_to_parallel","text":""},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.GreedyMixin","title":"GreedyMixin","text":"<p>               Bases: <code>MergePolicyABC</code></p> <p>Merge policy that greedily merges gates together.</p> <p>The <code>merge_gates</code> method will merge policy will try greedily merge gates together. This policy has a worst case complexity of O(n) where n is the number of gates in the input iterable.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.OptimalMixIn","title":"OptimalMixIn","text":"<p>               Bases: <code>MergePolicyABC</code></p> <p>Merge policy that merges gates together optimally.</p> <p>The <code>merge_gates</code> method will merge policy will try to merge every gate into every group of gates, terminating when it finds a group that can be merged with the current gate. This policy has a worst case complexity of O(n^2) where n is the number of gates in the input iterable.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.SimpleMergePolicy","title":"SimpleMergePolicy  <code>dataclass</code>","text":"<pre><code>SimpleMergePolicy(\n    address_analysis: Dict[SSAValue, Address],\n    merge_groups: List[List[Statement]],\n    group_numbers: Dict[Statement, int],\n    group_has_merged: Dict[int, bool] = dict(),\n)\n</code></pre> <p>               Bases: <code>MergePolicyABC</code></p> <p>General merge policy for merging gates based on their type and arguments.</p> <p>Base class to implement a merge policy for CZ, U and RZ gates, To completed the policy implement the <code>merge_gates</code> class method. This will take an iterable of statements and return a list of groups of statements that can be merged together. There are two mix-in classes that can be used to implement the <code>merge_gates</code> method. The <code>GreedyMixin</code> will merge gates together greedily, while the <code>OptimalMixIn</code> will merge gates together optimally.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.SimpleMergePolicy.address_analysis","title":"address_analysis  <code>instance-attribute</code>","text":"<pre><code>address_analysis: Dict[SSAValue, Address]\n</code></pre> <p>Mapping from SSA values to their address analysis results. Needed for rewrites</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.SimpleMergePolicy.group_has_merged","title":"group_has_merged  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_has_merged: Dict[int, bool] = field(\n    default_factory=dict\n)\n</code></pre> <p>Mapping from group number to whether the group has been merged</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.SimpleMergePolicy.group_numbers","title":"group_numbers  <code>instance-attribute</code>","text":"<pre><code>group_numbers: Dict[Statement, int]\n</code></pre> <p>Mapping from statements to their group number</p>"},{"location":"reference/qasm2/#bloqade.qasm2.rewrite.uop_to_parallel.SimpleMergePolicy.merge_groups","title":"merge_groups  <code>instance-attribute</code>","text":"<pre><code>merge_groups: List[List[Statement]]\n</code></pre> <p>List of groups of statements that can be merged together</p>"},{"location":"reference/qasm2/#bloqade.qasm2.types","title":"types","text":""},{"location":"reference/qasm2/#bloqade.qasm2.types.BitType","title":"BitType  <code>module-attribute</code>","text":"<pre><code>BitType = PyClass(Bit)\n</code></pre> <p>Kirin type for a classical bit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.types.CRegType","title":"CRegType  <code>module-attribute</code>","text":"<pre><code>CRegType = PyClass(CReg)\n</code></pre> <p>Kirin type for a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.types.QRegType","title":"QRegType  <code>module-attribute</code>","text":"<pre><code>QRegType = IListType[QubitType, Any]\n</code></pre> <p>Kirin type for a quantum register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.types.Bit","title":"Bit","text":"<p>Runtime representation of a bit.</p> Note <p>This is the base class of more specific bit types, such as a reference to a piece of classical register in some quantum register dialects.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.types.CReg","title":"CReg","text":"<p>Runtime representation of a classical register.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop","title":"uop","text":""},{"location":"reference/qasm2/#bloqade.qasm2.uop.QubitType","title":"QubitType  <code>module-attribute</code>","text":"<pre><code>QubitType = PyClass(Qubit)\n</code></pre> <p>Kirin type for a qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Barrier","title":"Barrier","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the Barrier statement.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Barrier.qargs","title":"qargs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qargs: tuple[SSAValue, ...] = argument(QubitType)\n</code></pre> <p>qargs: tuple of qubits to apply the barrier to.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CCX","title":"CCX","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the doubly controlled X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CCX.ctrl1","title":"ctrl1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl1: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl1 (Qubit): The first control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CCX.ctrl2","title":"ctrl2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl2: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl2 (Qubit): The second control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CCX.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CH","title":"CH","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-H gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRX","title":"CRX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRX.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRY","title":"CRY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRY.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRZ","title":"CRZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CRZ.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The angle to rotate around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CSX","title":"CSX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CSwap","title":"CSwap","text":"<p>               Bases: <code>Statement</code></p> <p>Apply the controlled swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CSwap.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CSwap.qarg1","title":"qarg1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg1: SSAValue = argument(QubitType)\n</code></pre> <p>qarg1 (Qubit): The first target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CSwap.qarg2","title":"qarg2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg2: SSAValue = argument(QubitType)\n</code></pre> <p>qarg2 (Qubit): The second target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU","title":"CU","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU1","title":"CU1","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU3","title":"CU3","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-U3 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU3.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CU3.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CX","title":"CX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Alias for the CNOT or CH gate operations.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CY","title":"CY","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.CZ","title":"CZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Controlled-Z gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.H","title":"H","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Hadamard gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Id","title":"Id","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Identity gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RX","title":"RX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RX gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around x axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RXX","title":"RXX","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the XX rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RXX.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the X axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RY","title":"RY","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RY gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RY.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around y axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RZ","title":"RZ","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the RZ gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): the angle of rotation around Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RZZ","title":"RZZ","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the ZZ rotation gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.RZZ.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The angle of rotation around the Z axis.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.S","title":"S","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.SX","title":"SX","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.SXdag","title":"SXdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the dagger of quantum Sqrt(X) gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Sdag","title":"Sdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of S gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.SingleQubitGate","title":"SingleQubitGate","text":"<p>               Bases: <code>Statement</code></p> <p>Base class for single qubit gates.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.SingleQubitGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The qubit argument.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Swap","title":"Swap","text":"<p>               Bases: <code>TwoQubitCtrlGate</code></p> <p>Apply the Swap gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.T","title":"T","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Tdag","title":"Tdag","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the hermitian conj of T gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.TwoQubitCtrlGate","title":"TwoQubitCtrlGate","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.TwoQubitCtrlGate.ctrl","title":"ctrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ctrl: SSAValue = argument(QubitType)\n</code></pre> <p>ctrl (Qubit): The control qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.TwoQubitCtrlGate.qarg","title":"qarg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>qarg: SSAValue = argument(QubitType)\n</code></pre> <p>qarg (Qubit): The target qubit.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.U1","title":"U1","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U1 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.U1.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.U2","title":"U2","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the U2 gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.U2.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.U2.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.UGate","title":"UGate","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply A general single qubit unitary gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.UGate.lam","title":"lam  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lam: SSAValue = argument(PyNum)\n</code></pre> <p>lam (float): The lambda parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.UGate.phi","title":"phi  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phi: SSAValue = argument(PyNum)\n</code></pre> <p>phi (float): The phi parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.UGate.theta","title":"theta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>theta: SSAValue = argument(PyNum)\n</code></pre> <p>theta (float): The theta parameter.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.X","title":"X","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the X gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Y","title":"Y","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Y gate.</p>"},{"location":"reference/qasm2/#bloqade.qasm2.uop.Z","title":"Z","text":"<p>               Bases: <code>SingleQubitGate</code></p> <p>Apply the Z gate.</p>"},{"location":"reference/qbraid/","title":"qbraid","text":""},{"location":"reference/qbraid/#bloqade.qbraid.lowering","title":"lowering","text":""},{"location":"reference/qbraid/#bloqade.qbraid.lowering.Lowering","title":"Lowering  <code>dataclass</code>","text":"<pre><code>Lowering()\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.lowering.Lowering.lower","title":"lower","text":"<pre><code>lower(\n    sym_name: str,\n    noise_model: NoiseModel,\n    return_qreg: bool = False,\n) -&gt; ir.Method\n</code></pre> <p>Lower the noise model to a method.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the method to generate.</p> required <code>return_qreg</code> <code>bool</code> <p>Use the quantum register as the return value.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Method</code> <code>Method</code> <p>The generated kirin method.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/lowering.py</code> <pre><code>def lower(\n    self,\n    sym_name: str,\n    noise_model: schema.NoiseModel,\n    return_qreg: bool = False,\n) -&gt; ir.Method:\n    \"\"\"Lower the noise model to a method.\n\n    Args:\n        name (str): The name of the method to generate.\n        return_qreg (bool): Use the quantum register as the return value.\n\n    Returns:\n        Method: The generated kirin method.\n\n    \"\"\"\n    self.process_noise_model(noise_model, return_qreg)\n    block = ir.Block(stmts=self.block_list)\n    ret_type = qasm2.types.QRegType if return_qreg else qasm2.types.CRegType\n    block.args.append_from(types.MethodType[[], ret_type], name=f\"{sym_name}_self\")\n    region = ir.Region(block)\n    func_stmt = func.Function(\n        sym_name=sym_name,\n        signature=func.Signature(inputs=(), output=qasm2.types.QRegType),\n        body=region,\n    )\n\n    mt = ir.Method(\n        mod=None,\n        py_func=None,\n        sym_name=sym_name,\n        dialects=qbraid_noise,\n        code=func_stmt,\n        arg_names=[],\n    )\n    qbraid_noise.run_pass(mt)  # type: ignore\n    return mt\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.schema","title":"schema","text":""},{"location":"reference/qbraid/#bloqade.qbraid.schema.CZ","title":"CZ","text":"<p>               Bases: <code>Operation</code></p> <p>A CZ gate operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"CZ\"]). participants (Tuple[Union[Tuple[int], Tuple[int, int]], ...]): The qubit indices that are participating in the CZ gate.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.CZError","title":"CZError","text":"<p>               Bases: <code>ErrorOperation[ErrorModelType]</code></p> <p>CZError operation.</p> Fields <p>survival_prob (Tuple[float, ...]): The survival probabilities for each qubit. error_type (str): The type of error (Literal[\"CZError\"]). storage_error (ErrorModelType): The error model for storage. entangled_error (ErrorModelType): The error model for entangled qubits. single_error (ErrorModelType): The error model for single qubits.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.ErrorModel","title":"ErrorModel","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for error models.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.ErrorOperation","title":"ErrorOperation","text":"<p>               Bases: <code>BaseModel</code>, <code>Generic[ErrorModelType]</code></p> <p>Base class for error operations.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.GateEvent","title":"GateEvent","text":"<p>               Bases: <code>BaseModel</code>, <code>Generic[ErrorModelType]</code></p> <p>A gate event.</p> Fields <p>error (Union[SingleQubitError[ErrorModelType], CZError[ErrorModelType]]): The error model for the gate event. operation (OperationType): The operation for the gate event.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.GlobalRz","title":"GlobalRz","text":"<p>               Bases: <code>Operation</code></p> <p>GlobalRz operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"GlobalRz\"]). phi (float): The angle of rotation.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.GlobalW","title":"GlobalW","text":"<p>               Bases: <code>Operation</code></p> <p>GlobalW operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"GlobalW\"]). theta (float): The angle of rotation. phi (float): The angle of rotation.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.LocalRz","title":"LocalRz","text":"<p>               Bases: <code>Operation</code></p> <p>LocalRz operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"LocalRz\"]). participants (Tuple[int, ...]): The qubit indices that are participating in the local Rz gate. phi (float): The angle of rotation.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.LocalW","title":"LocalW","text":"<p>               Bases: <code>Operation</code></p> <p>LocalW operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"LocalW\"]). participants (Tuple[int, ...]): The qubit indices that are participating in the local W gate. theta (float): The angle of rotation. phi (float): The angle of rotation.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.Measurement","title":"Measurement","text":"<p>               Bases: <code>Operation</code></p> <p>Measurement operation.</p> Fields <p>op_type (str): The type of operation (Literal[\"Measurement\"]). measure_tag (str): The tag to use for the measurement. participants (Tuple[int, ...]): The qubit indices that are participating in the measurement.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.NoiseModel","title":"NoiseModel","text":"<p>               Bases: <code>BaseModel</code>, <code>Generic[ErrorModelType]</code></p> <p>Noise model for a circuit.</p> Fields <p>all_qubits (Tuple[int, ...]): The qubit indices for the noise model. gate_events (List[GateEvent[ErrorModelType]]): The gate events for the noise model.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.NoiseModel.num_qubits","title":"num_qubits  <code>property</code>","text":"<pre><code>num_qubits: int\n</code></pre> <p>Return the number of qubits in the noise model.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.NoiseModel.decompiled_circuit","title":"decompiled_circuit","text":"<pre><code>decompiled_circuit() -&gt; str\n</code></pre> <p>Clean the circuit of noise.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The decompiled circuit from hardware execution.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/schema.py</code> <pre><code>def decompiled_circuit(self) -&gt; str:\n    \"\"\"Clean the circuit of noise.\n\n    Returns:\n        str: The decompiled circuit from hardware execution.\n\n    \"\"\"\n    from bloqade.noise import native\n    from bloqade.qasm2.emit import QASM2\n    from bloqade.qasm2.passes import glob, parallel\n\n    mt = self.lower_noise_model(\"method\")\n\n    native.RemoveNoisePass(mt.dialects)(mt)\n    parallel.ParallelToUOp(mt.dialects)(mt)\n    glob.GlobalToUOP(mt.dialects)(mt)\n    return QASM2(qelib1=True).emit_str(mt)\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.NoiseModel.lower_noise_model","title":"lower_noise_model","text":"<pre><code>lower_noise_model(sym_name: str, return_qreg: bool = False)\n</code></pre> <p>Lower the noise model to a method.</p> <p>Parameters:</p> Name Type Description Default <code>sym_name</code> <code>str</code> <p>The name of the method to generate.</p> required <code>return_qreg</code> <code>bool</code> <p>Whether to return the quantum register after the method has completed execution. Useful for obtaining the full state vector.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Method</code> <p>The generated kirin method.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/schema.py</code> <pre><code>def lower_noise_model(self, sym_name: str, return_qreg: bool = False):\n    \"\"\"Lower the noise model to a method.\n\n    Args:\n        sym_name (str): The name of the method to generate.\n        return_qreg (bool): Whether to return the quantum register after the method\n            has completed execution. Useful for obtaining the full state vector.\n\n    Returns:\n        Method: The generated kirin method.\n\n    \"\"\"\n    from bloqade.qbraid.lowering import Lowering\n\n    return Lowering().lower(sym_name, self, return_qreg)\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.Operation","title":"Operation","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for operations.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.PauliErrorModel","title":"PauliErrorModel","text":"<p>               Bases: <code>ErrorModel</code></p> <p>Pauli error model.</p> Fields <p>error_model_type (str): The type of error model (Literal[\"PauliNoise\"]). errors (Tuple[Tuple[int, Tuple[float, float, float]], ...]): The qubit indices and the error rates for each qubit.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.schema.SingleQubitError","title":"SingleQubitError","text":"<p>               Bases: <code>ErrorOperation[ErrorModelType]</code></p> <p>SingleQubitError operation.</p> Fields <p>survival_prob (Tuple[float, ...]): The survival probabilities for each qubit. error_type (str): The type of error (Literal[\"SingleQubitError\"]). operator_error (ErrorModelType): The error model for the single qubit.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.simulation_result","title":"simulation_result","text":""},{"location":"reference/qbraid/#bloqade.qbraid.simulation_result.QuEraSimulationResult","title":"QuEraSimulationResult  <code>dataclass</code>","text":"<pre><code>QuEraSimulationResult(\n    flair_visual_version: str,\n    counts: dict[str, int],\n    logs: DataFrame,\n    atom_animation_state: AnimateQPUState,\n    noise_model: NoiseModel,\n)\n</code></pre> <p>Results of the QuEra hardware model simulation.</p> Fields <p>flair_visual_version (str): The version of the Flair Visual package used to generate the simulation result. counts (dict[str, int]): The measurement bitstrings of the simulation. logs (DataFrame): Grainular logs events of what happened to each atom during the simulation. atom_animation_state (vis_qpustate.AnimateQPUState): Object used to play back atom trajectories and events during the simulation. noise_model (NoiseModel): The noise model used in the simulation.</p>"},{"location":"reference/qbraid/#bloqade.qbraid.simulation_result.QuEraSimulationResult.animate","title":"animate","text":"<pre><code>animate(\n    dilation_rate: float = 0.05,\n    fps: int = 30,\n    gate_display_dilation: float = 1.0,\n    save_mpeg: bool = False,\n    filename: str = \"vqpu_animation\",\n    start_block: int = 0,\n    n_blocks: Optional[int] = None,\n)\n</code></pre> <p>animate the qpu state</p> <p>Parameters:</p> Name Type Description Default <code>dilation_rate</code> <code>float</code> <p>Conversion factor from the qpu time to animation time units. when dilation_rate=1.0, 1 (us) of qpu exec time corresponds to 1 second of animation time.</p> <code>0.05</code> <code>fps</code> <code>int</code> <p>frame per second. Defaults to 30.</p> <code>30</code> <code>gate_display_dilation</code> <code>float</code> <p>relative dilation rate of a gate event. Defaults to 1. When setting higher value, the gate event will be displayed longer.</p> <code>1.0</code> <code>save_mpeg</code> <code>bool</code> <p>Save as mpeg. Defaults to False.</p> <code>False</code> <code>filename</code> <code>str</code> <p>The file name of saved mpeg file. Defaults to \"vqpu_animation\". When <code>save_mpeg</code> is False, this argument is ignored.</p> <code>'vqpu_animation'</code> <code>start_block</code> <code>int</code> <p>The start block to animate. Defaults to 0.</p> <code>0</code> <code>n_blocks</code> <code>int</code> <p>number of blocks to animate. Defaults to None. When None, animate all blocks after <code>start_block</code>.</p> <code>None</code> <p>Returns:     ani: matplotlib animation object</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/simulation_result.py</code> <pre><code>def animate(\n    self,\n    dilation_rate: float = 0.05,\n    fps: int = 30,\n    gate_display_dilation: float = 1.0,\n    save_mpeg: bool = False,\n    filename: str = \"vqpu_animation\",\n    start_block: int = 0,\n    n_blocks: Optional[int] = None,\n):\n    \"\"\"animate the qpu state\n\n    Args:\n        dilation_rate (float): Conversion factor from the qpu time to animation time units. when dilation_rate=1.0, 1 (us) of qpu exec time corresponds to 1 second of animation time.\n        fps (int, optional): frame per second. Defaults to 30.\n        gate_display_dilation (float, optional): relative dilation rate of a gate event. Defaults to 1. When setting higher value, the gate event will be displayed longer.\n        save_mpeg (bool, optional): Save as mpeg. Defaults to False.\n        filename (str, optional): The file name of saved mpeg file. Defaults to \"vqpu_animation\". When `save_mpeg` is False, this argument is ignored.\n        start_block (int, optional): The start block to animate. Defaults to 0.\n        n_blocks (int, optional): number of blocks to animate. Defaults to None. When None, animate all blocks after `start_block`.\n    Returns:\n        ani: matplotlib animation object\n    \"\"\"\n    from bloqade.visual.animation.animate import animate_qpu_state\n\n    ani = animate_qpu_state(\n        state=self.atom_animation_state,\n        dilation_rate=dilation_rate,\n        fps=fps,\n        gate_display_dilation=gate_display_dilation,\n        start_block=start_block,\n        n_blocks=n_blocks,\n        save_mpeg=save_mpeg,\n        filename=filename,\n    )\n    return ani\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.simulation_result.QuEraSimulationResult.from_json","title":"from_json  <code>classmethod</code>","text":"<pre><code>from_json(json: dict) -&gt; QuEraSimulationResult\n</code></pre> <p>deserialize the object from a JSON serializable dictionary.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/simulation_result.py</code> <pre><code>@classmethod\ndef from_json(cls, json: dict) -&gt; \"QuEraSimulationResult\":\n    \"\"\"deserialize the object from a JSON serializable dictionary.\"\"\"\n    flair_visual_version = json[\"flair_visual_version\"]\n    counts = json[\"counts\"]\n    logs = pd.read_csv(StringIO(json[\"logs\"]), index_col=0)\n    atom_animation_state = vis_qpustate.AnimateQPUState.from_json(\n        json[\"atom_animation_state\"]\n    )\n    noise_model = NoiseModel(**json[\"noise_model\"])\n\n    return cls(\n        flair_visual_version=flair_visual_version,\n        counts=counts,\n        logs=logs,\n        atom_animation_state=atom_animation_state,\n        noise_model=noise_model,\n    )\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.simulation_result.QuEraSimulationResult.to_json","title":"to_json","text":"<pre><code>to_json() -&gt; Dict[str, Any]\n</code></pre> <p>Turn the object into a JSON serializable dictionary.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/simulation_result.py</code> <pre><code>def to_json(self) -&gt; Dict[str, Any]:\n    \"\"\"Turn the object into a JSON serializable dictionary.\"\"\"\n    return {\n        \"flair_visual_version\": self.flair_visual_version,\n        \"counts\": self.counts,\n        \"logs\": self.logs.to_csv(),\n        \"atom_animation_state\": self.atom_animation_state.to_json(),\n        \"noise_model\": self.noise_model.model_dump(mode=\"json\"),\n    }\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.target","title":"target","text":""},{"location":"reference/qbraid/#bloqade.qbraid.target.qBraid","title":"qBraid","text":"<pre><code>qBraid(\n    *,\n    allow_parallel: bool = False,\n    allow_global: bool = False,\n    provider: QbraidProvider,\n    qelib1: bool = True\n)\n</code></pre> <p>qBraid target for Bloqade kernels.</p> <p>qBraid target that accepts a Bloqade kernel and submits the kernel to the QuEra simulator hosted on qBraid. A <code>QbraidJob</code> is obtainable that then lets you query the status of the submitted program on the simulator as well as obtain results.</p> <p>Parameters:</p> Name Type Description Default <code>allow_parallel</code> <code>bool</code> <p>Allow parallel gate in the resulting QASM2 AST. Defaults to <code>False</code>. In the case its False, and the input kernel uses parallel gates, they will get rewrite into uop gates.</p> <code>False</code> <code>allow_global</code> <code>bool</code> <p>Allow global gate in the resulting QASM2 AST. Defaults to <code>False</code>. In the case its False, and the input kernel uses global gates, they will get rewrite into parallel gates. If both <code>allow_parallel</code> and <code>allow_global</code> are False, the input kernel will be rewritten to use uop gates.</p> <code>False</code> <code>provider</code> <code>QbraidProvider</code> <p>Qbraid-provided object to allow submission of the kernel to the QuEra simulator.</p> required <code>qelib1</code> <code>bool</code> <p>Include the <code>include \"qelib1.inc\"</code> line in the resulting QASM2 AST that's submitted to qBraid. Defaults to <code>True</code>.</p> <code>True</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/target.py</code> <pre><code>def __init__(\n    self,\n    *,\n    allow_parallel: bool = False,\n    allow_global: bool = False,\n    provider: \"QbraidProvider\",  # inject externally for easier mocking\n    qelib1: bool = True,\n) -&gt; None:\n    \"\"\"Initialize the qBraid target.\n\n    Args:\n        allow_parallel (bool):\n            Allow parallel gate in the resulting QASM2 AST. Defaults to `False`.\n            In the case its False, and the input kernel uses parallel gates, they will get rewrite into uop gates.\n\n        allow_global (bool):\n            Allow global gate in the resulting QASM2 AST. Defaults to `False`.\n            In the case its False, and the input kernel uses global gates, they will get rewrite into parallel gates.\n            If both `allow_parallel` and `allow_global` are False, the input kernel will be rewritten to use uop gates.\n\n        provider (QbraidProvider):\n            Qbraid-provided object to allow submission of the kernel to the QuEra simulator.\n        qelib1 (bool):\n            Include the `include \"qelib1.inc\"` line in the resulting QASM2 AST that's\n            submitted to qBraid. Defaults to `True`.\n    \"\"\"\n\n    self.qelib1 = qelib1\n    self.provider = provider\n    self.allow_parallel = allow_parallel\n    self.allow_global = allow_global\n</code></pre>"},{"location":"reference/qbraid/#bloqade.qbraid.target.qBraid.emit","title":"emit","text":"<pre><code>emit(\n    method: Method,\n    shots: Optional[int] = None,\n    tags: Optional[dict[str, str]] = None,\n) -&gt; Union[QbraidJob, list[QbraidJob]]\n</code></pre> <p>Submit the Bloqade kernel to the QuEra simulator on qBraid.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Method</code> <p>The kernel to submit to qBraid.</p> required <code>shots</code> <code>Optional[int]</code> <p>(Optional[int]): Number of times to run the kernel. Defaults to None.</p> <code>None</code> <code>tags</code> <code>Optional[dict[str, str]]</code> <p>(Optional[dict[str,str]]): A dictionary of tags to associate with the Job.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[QbraidJob, list[QbraidJob]]</code> <p>Union[QbraidJob, list[QbraidJob]]: An object you can query for the status of your submission as well as obtain simulator results from.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/qbraid/target.py</code> <pre><code>def emit(\n    self,\n    method: ir.Method,\n    shots: Optional[int] = None,\n    tags: Optional[dict[str, str]] = None,\n) -&gt; Union[\"QbraidJob\", list[\"QbraidJob\"]]:\n    \"\"\"Submit the Bloqade kernel to the QuEra simulator on qBraid.\n\n    Args:\n        method (ir.Method):\n            The kernel to submit to qBraid.\n        shots: (Optional[int]):\n            Number of times to run the kernel. Defaults to None.\n        tags: (Optional[dict[str,str]]):\n            A dictionary of tags to associate with the Job.\n\n    Returns:\n        Union[QbraidJob, list[QbraidJob]]:\n            An object you can query for the status of your submission as well as\n            obtain simulator results from.\n    \"\"\"\n\n    # Convert method to QASM2 string\n    qasm2_emitter = QASM2(\n        allow_parallel=self.allow_parallel,\n        allow_global=self.allow_global,\n        qelib1=self.qelib1,\n    )\n    qasm2_prog = qasm2_emitter.emit_str(method)\n\n    # Submit the QASM2 string to the qBraid simulator\n    quera_qasm_simulator = self.provider.get_device(\"quera_qasm_simulator\")\n\n    return quera_qasm_simulator.run(qasm2_prog, shots=shots, tags=tags)\n</code></pre>"},{"location":"reference/squin/","title":"squin","text":""},{"location":"reference/squin/#bloqade.squin.analysis","title":"analysis","text":""},{"location":"reference/squin/#bloqade.squin.analysis.schedule","title":"schedule","text":""},{"location":"reference/squin/#bloqade.squin.analysis.schedule.StmtDag","title":"StmtDag  <code>dataclass</code>","text":"<pre><code>StmtDag(\n    id_table: IdTable[\n        Statement\n    ] = lambda: idtable.IdTable()(),\n    stmts: Dict[str, Statement] = OrderedDict(),\n    out_edges: Dict[str, Set[str]] = OrderedDict(),\n    inc_edges: Dict[str, Set[str]] = OrderedDict(),\n    stmt_index: Dict[Statement, int] = OrderedDict(),\n)\n</code></pre> <p>               Bases: <code>Graph[Statement]</code></p>"},{"location":"reference/squin/#bloqade.squin.analysis.schedule.StmtDag.topological_groups","title":"topological_groups","text":"<pre><code>topological_groups()\n</code></pre> <p>Split the dag into topological groups where each group contains nodes that have no dependencies on each other, but have dependencies on nodes in one or more previous groups.</p> <p>Yields:</p> Type Description <p>List[str]: A list of node ids in a topological group</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a cyclic dependency is detected</p> <p>The idea is to yield all nodes with no dependencies, then remove those nodes from the graph repeating until no nodes are left or we reach some upper limit. Worse case is a linear dag, so we can use len(dag.stmts) as the upper limit</p> <p>If we reach the limit and there are still nodes left, then we have a cyclic dependency.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/analysis/schedule.py</code> <pre><code>def topological_groups(self):\n    \"\"\"Split the dag into topological groups where each group\n    contains nodes that have no dependencies on each other, but\n    have dependencies on nodes in one or more previous groups.\n\n    Yields:\n        List[str]: A list of node ids in a topological group\n\n\n    Raises:\n        ValueError: If a cyclic dependency is detected\n\n\n    The idea is to yield all nodes with no dependencies, then remove\n    those nodes from the graph repeating until no nodes are left\n    or we reach some upper limit. Worse case is a linear dag,\n    so we can use len(dag.stmts) as the upper limit\n\n    If we reach the limit and there are still nodes left, then we\n    have a cyclic dependency.\n    \"\"\"\n\n    inc_edges = {k: set(v) for k, v in self.inc_edges.items()}\n\n    check_next = inc_edges.keys()\n\n    for _ in range(len(self.stmts)):\n        if len(inc_edges) == 0:\n            break\n\n        group = [node_id for node_id in check_next if len(inc_edges[node_id]) == 0]\n        yield group\n\n        check_next = set()\n        for n in group:\n            inc_edges.pop(n)\n            for m in self.out_edges[n]:\n                check_next.add(m)\n                inc_edges[m].remove(n)\n\n    if inc_edges:\n        raise ValueError(\"Cyclic dependency detected\")\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.noise","title":"noise","text":""},{"location":"reference/squin/#bloqade.squin.noise.stmts","title":"stmts","text":""},{"location":"reference/squin/#bloqade.squin.noise.stmts.Depolarize","title":"Depolarize","text":"<p>               Bases: <code>NoiseChannel</code></p> <p>Apply n-qubit depolaize error to qubits NOTE For Stim, this can only accept 1 or 2 qubits</p>"},{"location":"reference/squin/#bloqade.squin.noise.stmts.PPError","title":"PPError","text":"<p>               Bases: <code>NoiseChannel</code></p> <p>Pauli Product Error</p>"},{"location":"reference/squin/#bloqade.squin.op","title":"op","text":""},{"location":"reference/squin/#bloqade.squin.op.ch","title":"ch","text":"<pre><code>ch() -&gt; types.Op\n</code></pre> <p>Control H gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef ch() -&gt; types.Op:\n    \"\"\"Control H gate.\"\"\"\n    return control(h(), n_controls=1)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.control","title":"control","text":"<pre><code>control(op: Op, *, n_controls: int) -&gt; types.Op\n</code></pre> <p>Create a controlled operator.</p> <p>Note, that when considering atom loss, the operator will not be applied if any of the controls has been lost.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <p>The operator to apply under the control.</p> required <code>n_controls</code> <code>int</code> <p>The number qubits to be used as control.</p> required <p>Returns:</p> Type Description <code>Op</code> <p>Operator</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@_wraps(stmts.Control)\ndef control(op: types.Op, *, n_controls: int) -&gt; types.Op:\n    \"\"\"\n    Create a controlled operator.\n\n    Note, that when considering atom loss, the operator will not be applied if\n    any of the controls has been lost.\n\n    Args:\n        operator: The operator to apply under the control.\n        n_controls: The number qubits to be used as control.\n\n    Returns:\n        Operator\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.cphase","title":"cphase","text":"<pre><code>cphase(theta: float) -&gt; types.Op\n</code></pre> <p>Control Phase gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef cphase(theta: float) -&gt; types.Op:\n    \"\"\"Control Phase gate.\"\"\"\n    return control(phase(theta), n_controls=1)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.cx","title":"cx","text":"<pre><code>cx() -&gt; types.Op\n</code></pre> <p>Controlled X gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef cx() -&gt; types.Op:\n    \"\"\"Controlled X gate.\"\"\"\n    return control(x(), n_controls=1)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.cy","title":"cy","text":"<pre><code>cy() -&gt; types.Op\n</code></pre> <p>Controlled Y gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef cy() -&gt; types.Op:\n    \"\"\"Controlled Y gate.\"\"\"\n    return control(y(), n_controls=1)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.cz","title":"cz","text":"<pre><code>cz() -&gt; types.Op\n</code></pre> <p>Control Z gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef cz() -&gt; types.Op:\n    \"\"\"Control Z gate.\"\"\"\n    return control(z(), n_controls=1)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.rx","title":"rx","text":"<pre><code>rx(theta: float) -&gt; types.Op\n</code></pre> <p>Rotation X gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef rx(theta: float) -&gt; types.Op:\n    \"\"\"Rotation X gate.\"\"\"\n    return rot(x(), theta)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.ry","title":"ry","text":"<pre><code>ry(theta: float) -&gt; types.Op\n</code></pre> <p>Rotation Y gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef ry(theta: float) -&gt; types.Op:\n    \"\"\"Rotation Y gate.\"\"\"\n    return rot(y(), theta)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.rz","title":"rz","text":"<pre><code>rz(theta: float) -&gt; types.Op\n</code></pre> <p>Rotation Z gate.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/op/__init__.py</code> <pre><code>@op\ndef rz(theta: float) -&gt; types.Op:\n    \"\"\"Rotation Z gate.\"\"\"\n    return rot(z(), theta)\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.op.rewrite","title":"rewrite","text":"<p>Rewrite py.binop.mult to Mult stmt</p>"},{"location":"reference/squin/#bloqade.squin.op.stmts","title":"stmts","text":""},{"location":"reference/squin/#bloqade.squin.op.stmts.P0","title":"P0","text":"<p>               Bases: <code>ConstantOp</code></p> <p>The \\(P_0\\) projection operator.</p> \\[ P0 = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 0 \\end{bmatrix} \\]"},{"location":"reference/squin/#bloqade.squin.op.stmts.P1","title":"P1","text":"<p>               Bases: <code>ConstantOp</code></p> <p>The \\(P_1\\) projection operator.</p> \\[ P1 = \\begin{bmatrix} 0 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} \\]"},{"location":"reference/squin/#bloqade.squin.op.stmts.PhaseOp","title":"PhaseOp","text":"<p>               Bases: <code>PrimitiveOp</code></p> <p>A phase operator.</p> \\[ PhaseOp(theta) = e^{i       heta} I \\]"},{"location":"reference/squin/#bloqade.squin.op.stmts.ShiftOp","title":"ShiftOp","text":"<p>               Bases: <code>PrimitiveOp</code></p> <p>A phase shift operator.</p> \\[ Shift(theta) = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; e^{i \\theta} \\end{bmatrix} \\]"},{"location":"reference/squin/#bloqade.squin.op.stmts.Sn","title":"Sn","text":"<p>               Bases: <code>ConstantOp</code></p> <p>\\(S_{-}\\) operator.</p> \\[ Sn = \\frac{1}{2} (S_x - i S_y) = \\frac{1}{2} \\begin{bmatrix} 0 &amp; 0 \\\\ 1 &amp; 0 \\end{bmatrix} \\]"},{"location":"reference/squin/#bloqade.squin.op.stmts.Sp","title":"Sp","text":"<p>               Bases: <code>ConstantOp</code></p> <p>\\(S_{+}\\) operator.</p> \\[ Sp = \\frac{1}{2} (S_x + i S_y) = \\frac{1}{2}\\begin{bmatrix} 0 &amp; 1 \\\\ 0 &amp; 0 \\end{bmatrix} \\]"},{"location":"reference/squin/#bloqade.squin.op.traits","title":"traits","text":""},{"location":"reference/squin/#bloqade.squin.op.traits.HasSites","title":"HasSites  <code>dataclass</code>","text":"<pre><code>HasSites()\n</code></pre> <p>               Bases: <code>StmtTrait</code></p> <p>An operator with a <code>sites</code> attribute.</p>"},{"location":"reference/squin/#bloqade.squin.qubit","title":"qubit","text":"<p>qubit dialect for squin language.</p> <p>This dialect defines the operations that can be performed on qubits.</p> <p>Depends on: - <code>bloqade.squin.op</code>: provides the <code>OpType</code> type and semantics for operators applied to qubits. - <code>kirin.dialects.ilist</code>: provides the <code>ilist.IListType</code> type for lists of qubits.</p>"},{"location":"reference/squin/#bloqade.squin.qubit.apply","title":"apply","text":"<pre><code>apply(\n    operator: Op, qubits: IList[Qubit, Any] | list[Qubit]\n) -&gt; None\n</code></pre> <p>Apply an operator to a list of qubits.</p> <p>Note, that when considering atom loss, lost qubits will be skipped.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>Op</code> <p>The operator to apply.</p> required <code>qubits</code> <code>IList[Qubit, Any] | list[Qubit]</code> <p>The list of qubits to apply the operator to. The size of the list must be inferable and match the number of qubits expected by the operator.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(Apply)\ndef apply(operator: Op, qubits: ilist.IList[Qubit, Any] | list[Qubit]) -&gt; None:\n    \"\"\"Apply an operator to a list of qubits.\n\n    Note, that when considering atom loss, lost qubits will be skipped.\n\n    Args:\n        operator: The operator to apply.\n        qubits: The list of qubits to apply the operator to. The size of the list\n            must be inferable and match the number of qubits expected by the operator.\n\n    Returns:\n        None\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.qubit.broadcast","title":"broadcast","text":"<pre><code>broadcast(\n    operator: Op, qubits: IList[Qubit, Any] | list[Qubit]\n) -&gt; None\n</code></pre> <p>Broadcast and apply an operator to a list of qubits. For example, an operator that expects 2 qubits can be applied to a list of 2n qubits, where n is an integer &gt; 0.</p> <p>For controlled operators, the list of qubits is interpreted as sets of (controls, targets). For example</p> <pre><code>apply(CX, [q0, q1, q2, q3])\n</code></pre> <p>is equivalent to</p> <pre><code>apply(CX, [q0, q1])\napply(CX, [q2, q3])\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>Op</code> <p>The operator to broadcast and apply.</p> required <code>qubits</code> <code>IList[Qubit, Any] | list[Qubit]</code> <p>The list of qubits to broadcast and apply the operator to. The size of the list must be inferable and match the number of qubits expected by the operator.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(Broadcast)\ndef broadcast(operator: Op, qubits: ilist.IList[Qubit, Any] | list[Qubit]) -&gt; None:\n    \"\"\"Broadcast and apply an operator to a list of qubits. For example, an operator\n    that expects 2 qubits can be applied to a list of 2n qubits, where n is an integer &gt; 0.\n\n    For controlled operators, the list of qubits is interpreted as sets of (controls, targets).\n    For example\n\n    ```\n    apply(CX, [q0, q1, q2, q3])\n    ```\n\n    is equivalent to\n\n    ```\n    apply(CX, [q0, q1])\n    apply(CX, [q2, q3])\n    ```\n\n    Args:\n        operator: The operator to broadcast and apply.\n        qubits: The list of qubits to broadcast and apply the operator to. The size of the list\n            must be inferable and match the number of qubits expected by the operator.\n\n    Returns:\n        None\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.qubit.measure","title":"measure","text":"<pre><code>measure(input: Qubit) -&gt; bool\n</code></pre><pre><code>measure(\n    input: IList[Qubit, Any] | list[Qubit],\n) -&gt; ilist.IList[bool, Any]\n</code></pre> <pre><code>measure(input: Any) -&gt; Any\n</code></pre> <p>Measure a qubit or qubits in the list.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Any</code> <p>A qubit or a list of qubits to measure.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>bool | list[bool]: The result of the measurement. If a single qubit is measured, a single boolean is returned. If a list of qubits is measured, a list of booleans is returned.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(MeasureAny)\ndef measure(input: Any) -&gt; Any:\n    \"\"\"Measure a qubit or qubits in the list.\n\n    Args:\n        input: A qubit or a list of qubits to measure.\n\n    Returns:\n        bool | list[bool]: The result of the measurement. If a single qubit is measured,\n            a single boolean is returned. If a list of qubits is measured, a list of booleans\n            is returned.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.qubit.measure_and_reset","title":"measure_and_reset","text":"<pre><code>measure_and_reset(\n    qubits: IList[Qubit, Any],\n) -&gt; ilist.IList[bool, Any]\n</code></pre> <p>Measure the qubits in the list and reset them.\"</p> <p>Parameters:</p> Name Type Description Default <code>qubits</code> <code>IList[Qubit, Any]</code> <p>The list of qubits to measure and reset.</p> required <p>Returns:</p> Type Description <code>IList[bool, Any]</code> <p>list[bool]: The result of the measurement.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(MeasureAndReset)\ndef measure_and_reset(qubits: ilist.IList[Qubit, Any]) -&gt; ilist.IList[bool, Any]:\n    \"\"\"Measure the qubits in the list and reset them.\"\n\n    Args:\n        qubits: The list of qubits to measure and reset.\n\n    Returns:\n        list[bool]: The result of the measurement.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.qubit.new","title":"new","text":"<pre><code>new(n_qubits: int) -&gt; ilist.IList[Qubit, Any]\n</code></pre> <p>Create a new list of qubits.</p> <p>Parameters:</p> Name Type Description Default <code>n_qubits(int)</code> <p>The number of qubits to create.</p> required <p>Returns:</p> Type Description <code>IList[Qubit, Any]</code> <p>(ilist.IList[Qubit, n_qubits]) A list of qubits.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(New)\ndef new(n_qubits: int) -&gt; ilist.IList[Qubit, Any]:\n    \"\"\"Create a new list of qubits.\n\n    Args:\n        n_qubits(int): The number of qubits to create.\n\n    Returns:\n        (ilist.IList[Qubit, n_qubits]) A list of qubits.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.qubit.reset","title":"reset","text":"<pre><code>reset(qubits: IList[Qubit, Any]) -&gt; None\n</code></pre> <p>Reset the qubits in the list.\"</p> <p>Parameters:</p> Name Type Description Default <code>qubits</code> <code>IList[Qubit, Any]</code> <p>The list of qubits to reset.</p> required Source code in <code>.venv/lib/python3.12/site-packages/bloqade/squin/qubit.py</code> <pre><code>@wraps(Reset)\ndef reset(qubits: ilist.IList[Qubit, Any]) -&gt; None:\n    \"\"\"Reset the qubits in the list.\"\n\n    Args:\n        qubits: The list of qubits to reset.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/squin/#bloqade.squin.rewrite","title":"rewrite","text":""},{"location":"reference/squin/#bloqade.squin.rewrite.measure_desugar","title":"measure_desugar","text":""},{"location":"reference/squin/#bloqade.squin.rewrite.measure_desugar.MeasureDesugarRule","title":"MeasureDesugarRule","text":"<p>               Bases: <code>RewriteRule</code></p> <p>Desugar measure operations in the circuit.</p>"},{"location":"reference/squin/#bloqade.squin.wire","title":"wire","text":"<p>A NVIDIA QUAKE-like wire dialect.</p> <p>This dialect is expected to be used in combination with the operator dialect as an intermediate representation for analysis and optimization of quantum circuits. Thus we do not define wrapping functions for the statements in this dialect.</p>"},{"location":"reference/stim/","title":"stim","text":""},{"location":"reference/stim/#bloqade.stim.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.aux","title":"aux","text":""},{"location":"reference/stim/#bloqade.stim.aux.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts","title":"stmts","text":""},{"location":"reference/stim/#bloqade.stim.aux.stmts.const","title":"const","text":""},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.aux.stmts.const.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.collapse","title":"collapse","text":""},{"location":"reference/stim/#bloqade.stim.collapse.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.collapse.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.collapse.stmts","title":"stmts","text":""},{"location":"reference/stim/#bloqade.stim.collapse.stmts.measure","title":"measure","text":""},{"location":"reference/stim/#bloqade.stim.collapse.stmts.measure.Measurement","title":"Measurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.collapse.stmts.measure.Measurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.collapse.stmts.pp_measure","title":"pp_measure","text":""},{"location":"reference/stim/#bloqade.stim.collapse.stmts.pp_measure.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.collapse.stmts.pp_measure.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.dialects","title":"dialects","text":""},{"location":"reference/stim/#bloqade.stim.dialects.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.dialects.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux","title":"aux","text":""},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts","title":"stmts","text":""},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const","title":"const","text":""},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstBool","title":"ConstBool","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstBool.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Bool)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstBool.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: bool = attribute(Bool)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstFloat","title":"ConstFloat","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstFloat.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Float)\n</code></pre> <p>result (Float): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstFloat.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: float = attribute(Float)\n</code></pre> <p>value (float): The constant float value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstInt","title":"ConstInt","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstInt.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(Int)\n</code></pre> <p>result (Int): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstInt.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: int = attribute(Int)\n</code></pre> <p>value (int): The constant integer value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstStr","title":"ConstStr","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstStr.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: ResultValue = result(String)\n</code></pre> <p>result (str): The result value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.ConstStr.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value: str = attribute(String)\n</code></pre> <p>value (str): The constant str value.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.aux.stmts.const.Neg","title":"Neg","text":"<p>               Bases: <code>Statement</code></p> <p>IR Statement representing a negation operation.</p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse","title":"collapse","text":""},{"location":"reference/stim/#bloqade.stim.dialects.collapse.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts","title":"stmts","text":""},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.measure","title":"measure","text":""},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.measure.Measurement","title":"Measurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.measure.Measurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.pp_measure","title":"pp_measure","text":""},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.pp_measure.PPMeasurement","title":"PPMeasurement","text":"<p>               Bases: <code>Statement</code></p>"},{"location":"reference/stim/#bloqade.stim.dialects.collapse.stmts.pp_measure.PPMeasurement.p","title":"p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>p: SSAValue = argument(Float)\n</code></pre> <p>probability of noise introduced by measurement. For example 0.01 means 1% the measurement will be flipped</p>"},{"location":"reference/task/","title":"task","text":""},{"location":"reference/task/#bloqade.task.AbstractRemoteTask","title":"AbstractRemoteTask  <code>dataclass</code>","text":"<pre><code>AbstractRemoteTask(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...],\n    kwargs: dict[str, Any],\n)\n</code></pre> <p>               Bases: <code>AbstractTask[Params, RetType]</code></p> <p>Base class for tasks generated by the devices.</p>"},{"location":"reference/task/#bloqade.task.AbstractRemoteTask.run_async","title":"run_async  <code>abstractmethod</code>","text":"<pre><code>run_async(*, shots: int = 1) -&gt; BatchFuture[RetType]\n</code></pre> <p>Executes the kernel asynchronously and returns a Future object.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef run_async(self, *, shots: int = 1) -&gt; BatchFuture[RetType]:\n    \"\"\"Executes the kernel asynchronously and returns a Future object.\"\"\"\n</code></pre>"},{"location":"reference/task/#bloqade.task.AbstractSimulatorTask","title":"AbstractSimulatorTask  <code>dataclass</code>","text":"<pre><code>AbstractSimulatorTask(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...],\n    kwargs: dict[str, Any],\n)\n</code></pre> <p>               Bases: <code>AbstractTask[Params, RetType]</code>, <code>Generic[Params, RetType, StateType]</code></p> <p>Base class for tasks generated by local simulators.</p>"},{"location":"reference/task/#bloqade.task.AbstractSimulatorTask.state","title":"state  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>state: StateType\n</code></pre> <p>Returns the state of the simulator after running the task.</p>"},{"location":"reference/task/#bloqade.task.AbstractSimulatorTask.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run() -&gt; RetType\n</code></pre> <p>Executes the kernel and returns the result.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef run(self) -&gt; RetType:\n    \"\"\"Executes the kernel and returns the result.\"\"\"\n</code></pre>"},{"location":"reference/task/#bloqade.task.BatchFuture","title":"BatchFuture","text":"<p>               Bases: <code>ABC</code>, <code>Generic[RetType]</code></p> <p>Protocol for future objects that can be awaited.</p>"},{"location":"reference/task/#bloqade.task.BatchFuture.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Attempts to cancel the execution of the future.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>def cancel(self):\n    \"\"\"Attempts to cancel the execution of the future.\"\"\"\n    raise NotImplementedError(\n        f\"cancel method not implemented for {self.__class__.__name__}\"\n    )\n</code></pre>"},{"location":"reference/task/#bloqade.task.BatchFuture.cancelled","title":"cancelled","text":"<pre><code>cancelled() -&gt; bool\n</code></pre> <p>Returns True if the future was cancelled, False otherwise.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>def cancelled(self) -&gt; bool:\n    \"\"\"Returns True if the future was cancelled, False otherwise.\"\"\"\n    raise NotImplementedError(\n        f\"cancelled method not implemented for {self.__class__.__name__}\"\n    )\n</code></pre>"},{"location":"reference/task/#bloqade.task.BatchFuture.fetch","title":"fetch  <code>abstractmethod</code>","text":"<pre><code>fetch() -&gt; None\n</code></pre> <p>Fetches the result of the future that are currently available.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef fetch(self) -&gt; None:\n    \"\"\"Fetches the result of the future that are currently available.\"\"\"\n</code></pre>"},{"location":"reference/task/#bloqade.task.BatchFuture.partial_result","title":"partial_result  <code>abstractmethod</code>","text":"<pre><code>partial_result() -&gt; list[RetType | MISSING_RESULT]\n</code></pre> <p>Return all results that are available so far, or MISSING_RESULT for those that are not yet available.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef partial_result(self) -&gt; list[RetType | MISSING_RESULT]:\n    \"\"\"Return all results that are available so far, or MISSING_RESULT for those that are not yet available.\"\"\"\n</code></pre>"},{"location":"reference/task/#bloqade.task.BatchFuture.result","title":"result  <code>abstractmethod</code>","text":"<pre><code>result(timeout: float | None) -&gt; list[RetType]\n</code></pre> <p>Returns the result of the future, blocking until it is available or the timeout expires.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef result(self, timeout: float | None) -&gt; list[RetType]:\n    \"\"\"Returns the result of the future, blocking until it is available or the timeout expires.\"\"\"\n</code></pre>"},{"location":"reference/task/#bloqade.task.DeviceTaskExpectMixin","title":"DeviceTaskExpectMixin  <code>dataclass</code>","text":"<pre><code>DeviceTaskExpectMixin(\n    kernel: Method[Params, RetType],\n    args: tuple[Any, ...],\n    kwargs: dict[str, Any],\n)\n</code></pre> <p>               Bases: <code>AbstractTask</code></p>"},{"location":"reference/task/#bloqade.task.DeviceTaskExpectMixin.expect","title":"expect  <code>abstractmethod</code>","text":"<pre><code>expect(\n    observable: Method[[RetType], ObsType], shots: int\n) -&gt; ObsType\n</code></pre> <p>Returns the expectation value of the given observable after running the task.</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/task.py</code> <pre><code>@abc.abstractmethod\ndef expect(self, observable: ir.Method[[RetType], ObsType], shots: int) -&gt; ObsType:\n    \"\"\"Returns the expectation value of the given observable after running the task.\"\"\"\n</code></pre>"},{"location":"reference/types/","title":"types","text":"<p>Bloqade types.</p> <p>This module defines the basic types used in Bloqade eDSLs.</p>"},{"location":"reference/types/#bloqade.types.QubitType","title":"QubitType  <code>module-attribute</code>","text":"<pre><code>QubitType = PyClass(Qubit)\n</code></pre> <p>Kirin type for a qubit.</p>"},{"location":"reference/types/#bloqade.types.Qubit","title":"Qubit","text":"<p>               Bases: <code>ABC</code></p> <p>Runtime representation of a qubit.</p> Note <p>This is the base class of more specific qubit types, such as a reference to a piece of quantum register in some quantum register dialects.</p>"},{"location":"reference/visual/","title":"visual","text":""},{"location":"reference/visual/#bloqade.visual.animation","title":"animation","text":""},{"location":"reference/visual/#bloqade.visual.animation.animate","title":"animate","text":""},{"location":"reference/visual/#bloqade.visual.animation.animate.animate_qpu_state","title":"animate_qpu_state","text":"<pre><code>animate_qpu_state(\n    state: QPUStateABC,\n    display_fov: Optional[FieldOfView] = None,\n    dilation_rate: float = 0.05,\n    fps: int = 30,\n    gate_display_dilation: float = 1.0,\n    fig_args={},\n    save_mpeg: bool = False,\n    filename: str = \"vqpu_animation\",\n    start_block: int = 0,\n    n_blocks: int | None = None,\n)\n</code></pre> <p>Generate an animation from the QPU state</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>QPUStateABC</code> <p>The QPU state to animate</p> required <code>display_fov</code> <code>Optional[FieldOfView]</code> <p>The field of view to display. Defaults to None. If None, it will use the QPU's field of view.</p> <code>None</code> <code>dilation_rate</code> <code>float</code> <p>The rate at which to dilate the time. Defaults to 0.05.</p> <code>0.05</code> <code>fps</code> <code>int</code> <p>The frames per second. Defaults to 30.</p> <code>30</code> <code>gate_display_dilation</code> <code>float</code> <p>The rate at which to dilate the gate display. Defaults to 1.0.</p> <code>1.0</code> <code>fig_args</code> <code>dict</code> <p>The arguments to pass to the matplotlib.pyplot.figure. Defaults to {}.</p> <code>{}</code> <code>save_mpeg</code> <code>bool</code> <p>Whether to save the animation as an mpeg. Defaults to False.</p> <code>False</code> <code>filename</code> <code>str</code> <p>The filename to save the mpeg as. Defaults to \"vqpu_animation\".</p> <code>'vqpu_animation'</code> <code>start_block</code> <code>int</code> <p>The block to start the animation at. Defaults to 0.</p> <code>0</code> <code>n_blocks</code> <code>int | None</code> <p>The number of blocks to animate. Defaults to None. If None, it will animate all blocks after <code>start_block</code>.</p> <code>None</code> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/visual/animation/animate.py</code> <pre><code>def animate_qpu_state(\n    state: QPUStateABC,\n    display_fov: Optional[FieldOfView] = None,\n    dilation_rate: float = 0.05,\n    fps: int = 30,\n    gate_display_dilation: float = 1.0,\n    fig_args={},\n    save_mpeg: bool = False,\n    filename: str = \"vqpu_animation\",\n    start_block: int = 0,\n    n_blocks: int | None = None,\n):\n    \"\"\"Generate an animation from the QPU state\n\n    Args:\n        state (QPUStateABC): The QPU state to animate\n        display_fov (Optional[FieldOfView], optional): The field of view to display. Defaults to None. If None, it will use the QPU's field of view.\n        dilation_rate (float, optional): The rate at which to dilate the time. Defaults to 0.05.\n        fps (int, optional): The frames per second. Defaults to 30.\n        gate_display_dilation (float, optional): The rate at which to dilate the gate display. Defaults to 1.0.\n        fig_args (dict, optional): The arguments to pass to the matplotlib.pyplot.figure. Defaults to {}.\n        save_mpeg (bool, optional): Whether to save the animation as an mpeg. Defaults to False.\n        filename (str, optional): The filename to save the mpeg as. Defaults to \"vqpu_animation\".\n        start_block (int, optional): The block to start the animation at. Defaults to 0.\n        n_blocks (int | None, optional): The number of blocks to animate. Defaults to None. If None, it will animate all blocks after `start_block`.\n\n    \"\"\"\n    qpu_fov = state.qpu_fov\n\n    if display_fov is None:\n        display_fov = qpu_fov\n\n    if start_block &gt;= len(state.block_durations) or start_block &lt; 0:\n        raise ValueError(\"Start block index is out of range\")\n\n    if n_blocks is None:\n        n_blocks = len(state.block_durations) - start_block\n\n    if n_blocks &lt; 0:\n        raise ValueError(\"Number of block to animate must be non-negative\")\n\n    slm_sites = state.get_slm_sites()\n\n    # Scale the figure to different screens and so that the number of SLM sites has the same\n    # \"area\" on screen\n    nsites = max([4, len(slm_sites)])\n    scale = (\n        np.sqrt(44.0 / nsites) * 2.0 * plt.rcParams[\"figure.dpi\"] / 100\n    )  # scale the size of the figure\n\n    # figure:\n    new_fig_args = {\"figsize\": (14, 8), **fig_args}\n    fig, mpl_axs = plt.subplot_mosaic(\n        mosaic=[[\"Reg\", \"Info\"], [\"Reg\", \"Gate\"], [\"Reg\", \"Gate\"]],\n        gridspec_kw={\"width_ratios\": [3, 1]},\n        **new_fig_args,\n    )\n\n    # mpl_axs[\"Reg\"].axis(\"equal\")  # Axis equal must come before axis limits\n    mpl_axs[\"Reg\"].set_xlim(left=display_fov.xmin, right=display_fov.xmax)\n    mpl_axs[\"Reg\"].set_ylim(bottom=display_fov.ymin, top=display_fov.ymax)\n    mpl_axs[\"Reg\"].set(xlabel=\"x (um)\", ylabel=\"y (um)\")\n    mpl_axs[\"Reg\"].set_aspect(\"equal\")\n\n    # slm:\n    slm_plt_arg = {\n        \"facecolors\": \"none\",\n        \"edgecolors\": \"k\",\n        \"linestyle\": \"-\",\n        \"s\": 80 * scale,\n        \"alpha\": 0.3,\n        \"linewidth\": 0.5 * np.sqrt(scale),\n    }\n    mpl_axs[\"Reg\"].scatter(\n        x=slm_sites[:, 0], y=slm_sites[:, 1], **slm_plt_arg\n    )  # this is statically generated, so it will be the background\n\n    # atoms:\n    reg_plt_arg = {\n        \"s\": 65 * scale,\n        \"marker\": \"o\",\n        \"facecolors\": quera_color_code.purple,\n        \"alpha\": 1.0,\n    }\n    reg_panel = mpl_axs[\"Reg\"]\n    reg_scat = reg_panel.scatter([], [], **reg_plt_arg)\n\n    # gates:\n    gp = GatePainter(mpl_ax=reg_panel, qpu_fov=qpu_fov, scale=scale)\n\n    # annotate_args = {\"fontsize\": 8, \"ha\": \"center\", \"alpha\": 0.7, \"color\": quera_color_code.yellow}\n    annotate_args = {\n        \"fontsize\": 6 * np.sqrt(scale),\n        \"ha\": \"center\",\n        \"va\": \"center\",\n        \"alpha\": 1.0,\n        \"color\": quera_color_code.yellow,\n        \"weight\": \"bold\",\n    }\n    reg_annot_list = [\n        reg_panel.annotate(f\"{i}\", atom_position, **annotate_args)\n        for i, atom_position in state.get_atoms_position(time=0.0, include_lost=False)\n    ]\n\n    # AODs:\n    aod_plot_args = {\n        \"s\": 260 * scale,\n        \"marker\": \"+\",\n        \"alpha\": 0.7,\n        \"facecolors\": quera_color_code.red,\n        \"zorder\": -100,\n        \"linewidth\": np.sqrt(scale),\n    }\n    aod_scat = reg_panel.scatter(x=[], y=[], **aod_plot_args)\n\n    aod_h_args = {\n        \"s\": 1e20,\n        \"marker\": \"|\",\n        \"alpha\": 1.0,\n        \"color\": \"#FFE8E9\",\n        \"zorder\": -101,\n        \"linewidth\": 0.5 * np.sqrt(scale),\n    }\n    aod_h_scat = reg_panel.scatter(x=[], y=[], **aod_h_args)\n    aod_v_args = {\n        \"s\": 1e20,\n        \"marker\": \"_\",\n        \"alpha\": 1.0,\n        \"color\": \"#FFE8E9\",\n        \"zorder\": -101,\n        \"linewidth\": 0.5 * np.sqrt(scale),\n    }\n    aod_v_scat = reg_panel.scatter(x=[], y=[], **aod_v_args)\n\n    ## Info Panel\n    info_text = mpl_axs[\"Info\"].text(x=0.05, y=0.5, s=\"\")\n    mpl_axs[\"Info\"].set_xticks([])\n    mpl_axs[\"Info\"].set_yticks([])\n    mpl_axs[\"Info\"].grid(False)\n\n    ## Event Panel:\n    log_text = mpl_axs[\"Gate\"].text(x=0.05, y=0.0, s=\"\", size=6)\n    mpl_axs[\"Gate\"].set_xticks([])\n    mpl_axs[\"Gate\"].set_yticks([])\n    mpl_axs[\"Gate\"].grid(False)\n\n    tstep_mv = 1.0 / (fps * dilation_rate)\n    tstep_gate = 1.0 / (fps * dilation_rate * gate_display_dilation)\n    blk_t_end = np.cumsum(state.block_durations)\n\n    # determine the dilation part of the timeline, and generate more frame\n    chunk_times = []\n    curr_t = 0 if start_block == 0 else blk_t_end[start_block - 1]\n\n    for glb_tstart_gate, duration in state.get_gate_events_timing():\n        if glb_tstart_gate &lt; curr_t:  # gate start before the current time\n            if glb_tstart_gate + duration &lt; curr_t:\n                continue\n        else:\n            dt = glb_tstart_gate - curr_t\n            chunk_times.append(np.linspace(curr_t, glb_tstart_gate, int(dt / tstep_mv)))\n            curr_t = glb_tstart_gate\n\n        t_gate_end = glb_tstart_gate + duration\n        dt = t_gate_end - curr_t\n        chunk_times.append(np.linspace(curr_t, t_gate_end, int(dt / tstep_gate)))\n        curr_t = t_gate_end\n\n    dt = blk_t_end[-1] - curr_t\n    chunk_times.append(np.linspace(curr_t, blk_t_end[-1], int(dt / tstep_mv)))\n\n    times = np.concatenate(chunk_times)\n\n    fig.tight_layout()\n    fig.subplots_adjust(wspace=0.1)\n\n    def _update_annotate(loc, idx, annotate_artist):\n        new_loc = (loc[0], loc[1] - 0.06)\n        annotate_artist.set_position(new_loc)\n        txt = f\"{idx}\"\n        annotate_artist.set_text(txt)\n        return loc\n\n    def update(frame: int, state: QPUStateABC, times: np.ndarray, blk_t_end: np.array):\n\n        # get positions:\n\n        blk_id = bisect.bisect_left(blk_t_end, times[frame])\n        lbl = f\"Block: [{blk_id}]\\n\"\n        lbl += f\"Block dur: {state.block_durations[blk_id]:.2f} us\\n\"\n        lbl += f\"Total elapsed time: {times[frame]:.2f} us\"\n        info_text.set_text(lbl)\n\n        # update atoms location and annotation\n        post = np.array(\n            [\n                _update_annotate(\n                    atom_position,\n                    i,\n                    reg_annot_list[i],\n                )\n                for i, atom_position in state.get_atoms_position(\n                    times[frame], include_lost=False\n                )\n            ]\n        )\n        post = post if post.size &gt; 0 else np.array([(None, None)])\n        reg_scat.set_offsets(post)\n\n        # update log event panels\n        lost_events = state.get_atoms_lost_info(times[frame])\n\n        # update log gate:\n        gate_events = state.get_gate_events(times[frame])\n        gate_events_log = [\n            f\"Gate: {gate.cls_name} @ {t:.6f} (us)\\n\"\n            for t, gate in state.get_gate_events(times[frame])\n        ]\n        log_text.set_text(\"\".join(lost_events) + \"\".join(gate_events_log))\n\n        gate_artists = gp.process_gates([gate for _, gate in gate_events])\n\n        # update AODs\n        post = state.sample_aod_traps(times[frame]) or [(None, None)]\n        aod_scat.set_offsets(post)\n        aod_v_scat.set_offsets(post)\n        aod_h_scat.set_offsets(post)\n\n        return (\n            [reg_scat, info_text, log_text, aod_scat, aod_v_scat, aod_h_scat]\n            + reg_annot_list\n            + gate_artists\n        )\n\n    ani = FuncAnimation(\n        fig=fig,\n        func=functools.partial(update, state=state, times=times, blk_t_end=blk_t_end),\n        frames=len(times),\n        interval=tstep_mv,\n        blit=True,\n        repeat=False,\n    )\n    if save_mpeg:\n        n_frame = len(times)\n        pbar = tqdm.tqdm(range(n_frame))\n\n        def p_call_back(i, total_n):\n            pbar.update()\n\n        ani.save(\n            f\"{filename}.mp4\", writer=\"ffmpeg\", fps=fps, progress_callback=p_call_back\n        )\n    else:\n        return ani\n</code></pre>"},{"location":"reference/visual/#bloqade.visual.animation.base","title":"base","text":""},{"location":"reference/visual/#bloqade.visual.animation.base.RowRegionGateArtist","title":"RowRegionGateArtist  <code>dataclass</code>","text":"<pre><code>RowRegionGateArtist(\n    mpl_ax: Any,\n    xmin,\n    width,\n    ymin,\n    ymin_keepout,\n    ymax,\n    ymax_keepout,\n    color,\n)\n</code></pre> <p>               Bases: <code>GateArtist</code></p> <p>A row region gate artist object.</p> <p>bound box is [y_origin - width/2, y_origin + width/2]</p> Source code in <code>.venv/lib/python3.12/site-packages/bloqade/visual/animation/base.py</code> <pre><code>def __init__(\n    self, mpl_ax: Any, xmin, width, ymin, ymin_keepout, ymax, ymax_keepout, color\n):\n    super().__init__(mpl_ax)\n    self.width = width\n    self.xmin = xmin\n    rc_btm = mpatches.Rectangle(\n        (xmin, ymin_keepout),\n        width,\n        ymin - ymin_keepout,\n        color=color,\n        alpha=0.3,\n        visible=False,\n    )\n    mpl_ax.add_patch(rc_btm)\n    self.mpl_obj_keepout_btm = rc_btm\n\n    rc = mpatches.Rectangle(\n        (xmin, ymin), width, ymax - ymin, color=color, alpha=0.6, visible=False\n    )\n    mpl_ax.add_patch(rc)\n    self.mpl_obj = rc\n\n    rc_top = mpatches.Rectangle(\n        (xmin, ymax),\n        width,\n        ymax_keepout - ymax,\n        color=color,\n        alpha=0.3,\n        visible=False,\n    )\n    mpl_ax.add_patch(rc_top)\n    self.mpl_obj_keepout_top = rc_top\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2023/","title":"2023","text":""}]}